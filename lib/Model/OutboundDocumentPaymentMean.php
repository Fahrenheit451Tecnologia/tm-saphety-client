<?php
/**
 * OutboundDocumentPaymentMean
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OutboundDocumentPaymentMean Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutboundDocumentPaymentMean implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OutboundDocumentPaymentMean';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'channel_code' => 'string',
        'due_date' => '\DateTime',
        'payment_instruction' => 'string',
        'days_type_to_pay' => 'string',
        'bank_guarantee' => 'string',
        'bank_transfer_number' => 'string',
        'bank_id' => 'string',
        'bank_name' => 'string',
        'document_id' => 'string',
        'document' => '\Swagger\Client\Model\OutboundDocument',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'channel_code' => null,
        'due_date' => 'date-time',
        'payment_instruction' => null,
        'days_type_to_pay' => null,
        'bank_guarantee' => null,
        'bank_transfer_number' => null,
        'bank_id' => null,
        'bank_name' => null,
        'document_id' => 'uuid',
        'document' => null,
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'channel_code' => 'ChannelCode',
        'due_date' => 'DueDate',
        'payment_instruction' => 'PaymentInstruction',
        'days_type_to_pay' => 'DaysTypeToPay',
        'bank_guarantee' => 'BankGuarantee',
        'bank_transfer_number' => 'BankTransferNumber',
        'bank_id' => 'BankId',
        'bank_name' => 'BankName',
        'document_id' => 'DocumentId',
        'document' => 'Document',
        'id' => 'Id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'channel_code' => 'setChannelCode',
        'due_date' => 'setDueDate',
        'payment_instruction' => 'setPaymentInstruction',
        'days_type_to_pay' => 'setDaysTypeToPay',
        'bank_guarantee' => 'setBankGuarantee',
        'bank_transfer_number' => 'setBankTransferNumber',
        'bank_id' => 'setBankId',
        'bank_name' => 'setBankName',
        'document_id' => 'setDocumentId',
        'document' => 'setDocument',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'channel_code' => 'getChannelCode',
        'due_date' => 'getDueDate',
        'payment_instruction' => 'getPaymentInstruction',
        'days_type_to_pay' => 'getDaysTypeToPay',
        'bank_guarantee' => 'getBankGuarantee',
        'bank_transfer_number' => 'getBankTransferNumber',
        'bank_id' => 'getBankId',
        'bank_name' => 'getBankName',
        'document_id' => 'getDocumentId',
        'document' => 'getDocument',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const CODE_CASH = 'Cash';
    const CODE_CHEQUE = 'Cheque';
    const CODE_BANKERS_DRAFT = 'BankersDraft';
    const CODE_BANK_CHEQUE = 'BankCheque';
    const CODE_BILL_EXCHANGE_ACCEPTANCE = 'BillExchangeAcceptance';
    const CODE_CERTIFIED_CHEQUE = 'CertifiedCheque';
    const CODE_LOCAL_CHEQUE = 'LocalCheque';
    const CODE_BANK_TRANSFER = 'BankTransfer';
    const CODE_PAYMENT_BANK_ACCOUNT = 'PaymentBankAccount';
    const CODE_ACCEPTED_BILL_EXCHANGE = 'AcceptedBillExchange';
    const CODE_BANK_CARD = 'BankCard';
    const CODE_PROMISSORY_NOTE = 'PromissoryNote';
    const CODE_PROMISSORY_NOTE_SIGNED_BY_DEBTOR = 'PromissoryNoteSignedByDebtor';
    const CODE_PROMISSORY_NOTE_SIGNED_BY_DEBTOR_ENDORSED_BY_THIRD_PARTY = 'PromissoryNoteSignedByDebtorEndorsedByThirdParty';
    const CODE_PROMISSORY_NOTE_SIGNED_BY_BANK = 'PromissoryNoteSignedByBank';
    const CODE_PROMISSORY_NOTE_SIGNED_BY_DEBTOR_ENDORSED_BY_OTHER_BANK = 'PromissoryNoteSignedByDebtorEndorsedByOtherBank';
    const CODE_PROMISSORY_NOTE_SIGNED_BY_THIRD_PARTY = 'PromissoryNoteSignedByThirdParty';
    const CODE_PROMISSORY_NOTE_SIGNED_BY_THIRD_PARTY_ENDORSED_BY_BANK = 'PromissoryNoteSignedByThirdPartyEndorsedByBank';
    const CODE_REQUESTED_METHOD_PAYMENT_NOT_USED = 'RequestedMethodPaymentNotUsed';
    const CODE_MUTUALLY_DEFINED = 'MutuallyDefined';
    const CHANNEL_CODE_CASH = 'Cash';
    const CHANNEL_CODE_PAYMENT_IRREVOCABLE_LETTER_CREDIT_CONFIRMED = 'PaymentIrrevocableLetterCreditConfirmed';
    const CHANNEL_CODE_PAYMENT_IRREVOCABLE_LETTER_CREDIT = 'PaymentIrrevocableLetterCredit';
    const CHANNEL_CODE_PAYMENT_IRREVOCABLE_LETTER_CREDIT_NOT_CONFIRMED = 'PaymentIrrevocableLetterCreditNotConfirmed';
    const PAYMENT_INSTRUCTION_BASIC_TERMS = 'BasicTerms';
    const PAYMENT_INSTRUCTION_FIXED_PAYMENT_DATE = 'FixedPaymentDate';
    const PAYMENT_INSTRUCTION_EXPIRE_UPON_RECEIPT_INVOICE = 'ExpireUponReceiptInvoice';
    const PAYMENT_INSTRUCTION_PENALTY_CONDITION = 'PenaltyCondition';
    const DAYS_TYPE_TO_PAY_DAYS = 'Days';
    const DAYS_TYPE_TO_PAY_WORKING_DAYS = 'WorkingDays';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCodeAllowableValues()
    {
        return [
            self::CODE_CASH,
            self::CODE_CHEQUE,
            self::CODE_BANKERS_DRAFT,
            self::CODE_BANK_CHEQUE,
            self::CODE_BILL_EXCHANGE_ACCEPTANCE,
            self::CODE_CERTIFIED_CHEQUE,
            self::CODE_LOCAL_CHEQUE,
            self::CODE_BANK_TRANSFER,
            self::CODE_PAYMENT_BANK_ACCOUNT,
            self::CODE_ACCEPTED_BILL_EXCHANGE,
            self::CODE_BANK_CARD,
            self::CODE_PROMISSORY_NOTE,
            self::CODE_PROMISSORY_NOTE_SIGNED_BY_DEBTOR,
            self::CODE_PROMISSORY_NOTE_SIGNED_BY_DEBTOR_ENDORSED_BY_THIRD_PARTY,
            self::CODE_PROMISSORY_NOTE_SIGNED_BY_BANK,
            self::CODE_PROMISSORY_NOTE_SIGNED_BY_DEBTOR_ENDORSED_BY_OTHER_BANK,
            self::CODE_PROMISSORY_NOTE_SIGNED_BY_THIRD_PARTY,
            self::CODE_PROMISSORY_NOTE_SIGNED_BY_THIRD_PARTY_ENDORSED_BY_BANK,
            self::CODE_REQUESTED_METHOD_PAYMENT_NOT_USED,
            self::CODE_MUTUALLY_DEFINED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getChannelCodeAllowableValues()
    {
        return [
            self::CHANNEL_CODE_CASH,
            self::CHANNEL_CODE_PAYMENT_IRREVOCABLE_LETTER_CREDIT_CONFIRMED,
            self::CHANNEL_CODE_PAYMENT_IRREVOCABLE_LETTER_CREDIT,
            self::CHANNEL_CODE_PAYMENT_IRREVOCABLE_LETTER_CREDIT_NOT_CONFIRMED,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getPaymentInstructionAllowableValues()
    {
        return [
            self::PAYMENT_INSTRUCTION_BASIC_TERMS,
            self::PAYMENT_INSTRUCTION_FIXED_PAYMENT_DATE,
            self::PAYMENT_INSTRUCTION_EXPIRE_UPON_RECEIPT_INVOICE,
            self::PAYMENT_INSTRUCTION_PENALTY_CONDITION,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDaysTypeToPayAllowableValues()
    {
        return [
            self::DAYS_TYPE_TO_PAY_DAYS,
            self::DAYS_TYPE_TO_PAY_WORKING_DAYS,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['channel_code'] = isset($data['channel_code']) ? $data['channel_code'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['payment_instruction'] = isset($data['payment_instruction']) ? $data['payment_instruction'] : null;
        $this->container['days_type_to_pay'] = isset($data['days_type_to_pay']) ? $data['days_type_to_pay'] : null;
        $this->container['bank_guarantee'] = isset($data['bank_guarantee']) ? $data['bank_guarantee'] : null;
        $this->container['bank_transfer_number'] = isset($data['bank_transfer_number']) ? $data['bank_transfer_number'] : null;
        $this->container['bank_id'] = isset($data['bank_id']) ? $data['bank_id'] : null;
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($this->container['code'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getChannelCodeAllowableValues();
        if (!in_array($this->container['channel_code'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'channel_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getPaymentInstructionAllowableValues();
        if (!in_array($this->container['payment_instruction'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'payment_instruction', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getDaysTypeToPayAllowableValues();
        if (!in_array($this->container['days_type_to_pay'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'days_type_to_pay', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getCodeAllowableValues();
        if (!in_array($this->container['code'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getChannelCodeAllowableValues();
        if (!in_array($this->container['channel_code'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getPaymentInstructionAllowableValues();
        if (!in_array($this->container['payment_instruction'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getDaysTypeToPayAllowableValues();
        if (!in_array($this->container['days_type_to_pay'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets code
     *
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     *
     * @param string $code code
     *
     * @return $this
     */
    public function setCode($code)
    {
        $allowedValues = $this->getCodeAllowableValues();
        if (!is_null($code) && !in_array($code, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets channel_code
     *
     * @return string
     */
    public function getChannelCode()
    {
        return $this->container['channel_code'];
    }

    /**
     * Sets channel_code
     *
     * @param string $channel_code channel_code
     *
     * @return $this
     */
    public function setChannelCode($channel_code)
    {
        $allowedValues = $this->getChannelCodeAllowableValues();
        if (!is_null($channel_code) && !in_array($channel_code, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'channel_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['channel_code'] = $channel_code;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets payment_instruction
     *
     * @return string
     */
    public function getPaymentInstruction()
    {
        return $this->container['payment_instruction'];
    }

    /**
     * Sets payment_instruction
     *
     * @param string $payment_instruction payment_instruction
     *
     * @return $this
     */
    public function setPaymentInstruction($payment_instruction)
    {
        $allowedValues = $this->getPaymentInstructionAllowableValues();
        if (!is_null($payment_instruction) && !in_array($payment_instruction, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'payment_instruction', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['payment_instruction'] = $payment_instruction;

        return $this;
    }

    /**
     * Gets days_type_to_pay
     *
     * @return string
     */
    public function getDaysTypeToPay()
    {
        return $this->container['days_type_to_pay'];
    }

    /**
     * Sets days_type_to_pay
     *
     * @param string $days_type_to_pay days_type_to_pay
     *
     * @return $this
     */
    public function setDaysTypeToPay($days_type_to_pay)
    {
        $allowedValues = $this->getDaysTypeToPayAllowableValues();
        if (!is_null($days_type_to_pay) && !in_array($days_type_to_pay, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'days_type_to_pay', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['days_type_to_pay'] = $days_type_to_pay;

        return $this;
    }

    /**
     * Gets bank_guarantee
     *
     * @return string
     */
    public function getBankGuarantee()
    {
        return $this->container['bank_guarantee'];
    }

    /**
     * Sets bank_guarantee
     *
     * @param string $bank_guarantee bank_guarantee
     *
     * @return $this
     */
    public function setBankGuarantee($bank_guarantee)
    {
        $this->container['bank_guarantee'] = $bank_guarantee;

        return $this;
    }

    /**
     * Gets bank_transfer_number
     *
     * @return string
     */
    public function getBankTransferNumber()
    {
        return $this->container['bank_transfer_number'];
    }

    /**
     * Sets bank_transfer_number
     *
     * @param string $bank_transfer_number bank_transfer_number
     *
     * @return $this
     */
    public function setBankTransferNumber($bank_transfer_number)
    {
        $this->container['bank_transfer_number'] = $bank_transfer_number;

        return $this;
    }

    /**
     * Gets bank_id
     *
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     *
     * @param string $bank_id bank_id
     *
     * @return $this
     */
    public function setBankId($bank_id)
    {
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets bank_name
     *
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     *
     * @param string $bank_name bank_name
     *
     * @return $this
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \Swagger\Client\Model\OutboundDocument
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \Swagger\Client\Model\OutboundDocument $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


