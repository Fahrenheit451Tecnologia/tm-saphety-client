<?php
/**
 * DeliveryTermDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DeliveryTermDTO Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DeliveryTermDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DeliveryTermDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'special_terms' => 'string',
        'incoterm_code' => 'string',
        'delivery_code' => 'string',
        'delivery_description' => 'string',
        'amount' => 'double',
        'currency' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'special_terms' => null,
        'incoterm_code' => null,
        'delivery_code' => null,
        'delivery_description' => null,
        'amount' => 'double',
        'currency' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'special_terms' => 'SpecialTerms',
        'incoterm_code' => 'IncotermCode',
        'delivery_code' => 'DeliveryCode',
        'delivery_description' => 'DeliveryDescription',
        'amount' => 'Amount',
        'currency' => 'Currency'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'special_terms' => 'setSpecialTerms',
        'incoterm_code' => 'setIncotermCode',
        'delivery_code' => 'setDeliveryCode',
        'delivery_description' => 'setDeliveryDescription',
        'amount' => 'setAmount',
        'currency' => 'setCurrency'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'special_terms' => 'getSpecialTerms',
        'incoterm_code' => 'getIncotermCode',
        'delivery_code' => 'getDeliveryCode',
        'delivery_description' => 'getDeliveryDescription',
        'amount' => 'getAmount',
        'currency' => 'getCurrency'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['special_terms'] = isset($data['special_terms']) ? $data['special_terms'] : null;
        $this->container['incoterm_code'] = isset($data['incoterm_code']) ? $data['incoterm_code'] : null;
        $this->container['delivery_code'] = isset($data['delivery_code']) ? $data['delivery_code'] : null;
        $this->container['delivery_description'] = isset($data['delivery_description']) ? $data['delivery_description'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets special_terms
     * @return string
     */
    public function getSpecialTerms()
    {
        return $this->container['special_terms'];
    }

    /**
     * Sets special_terms
     * @param string $special_terms
     * @return $this
     */
    public function setSpecialTerms($special_terms)
    {
        $this->container['special_terms'] = $special_terms;

        return $this;
    }

    /**
     * Gets incoterm_code
     * @return string
     */
    public function getIncotermCode()
    {
        return $this->container['incoterm_code'];
    }

    /**
     * Sets incoterm_code
     * @param string $incoterm_code
     * @return $this
     */
    public function setIncotermCode($incoterm_code)
    {
        $this->container['incoterm_code'] = $incoterm_code;

        return $this;
    }

    /**
     * Gets delivery_code
     * @return string
     */
    public function getDeliveryCode()
    {
        return $this->container['delivery_code'];
    }

    /**
     * Sets delivery_code
     * @param string $delivery_code
     * @return $this
     */
    public function setDeliveryCode($delivery_code)
    {
        $this->container['delivery_code'] = $delivery_code;

        return $this;
    }

    /**
     * Gets delivery_description
     * @return string
     */
    public function getDeliveryDescription()
    {
        return $this->container['delivery_description'];
    }

    /**
     * Sets delivery_description
     * @param string $delivery_description
     * @return $this
     */
    public function setDeliveryDescription($delivery_description)
    {
        $this->container['delivery_description'] = $delivery_description;

        return $this;
    }

    /**
     * Gets amount
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     * @param double $amount
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


