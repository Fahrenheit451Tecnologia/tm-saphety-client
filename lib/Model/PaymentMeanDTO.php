<?php
/**
 * PaymentMeanDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * PaymentMeanDTO Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class PaymentMeanDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'PaymentMeanDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'code' => 'string',
        'channel_code' => 'string',
        'due_date' => '\DateTime',
        'payment_instruction' => 'string',
        'days_type_to_pay' => 'string',
        'bank_guarantee' => 'string',
        'bank_transfer_number' => 'string',
        'bank_id' => 'string',
        'bank_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'code' => null,
        'channel_code' => null,
        'due_date' => 'date-time',
        'payment_instruction' => null,
        'days_type_to_pay' => null,
        'bank_guarantee' => null,
        'bank_transfer_number' => null,
        'bank_id' => null,
        'bank_name' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'code' => 'Code',
        'channel_code' => 'ChannelCode',
        'due_date' => 'DueDate',
        'payment_instruction' => 'PaymentInstruction',
        'days_type_to_pay' => 'DaysTypeToPay',
        'bank_guarantee' => 'BankGuarantee',
        'bank_transfer_number' => 'BankTransferNumber',
        'bank_id' => 'BankId',
        'bank_name' => 'BankName'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'code' => 'setCode',
        'channel_code' => 'setChannelCode',
        'due_date' => 'setDueDate',
        'payment_instruction' => 'setPaymentInstruction',
        'days_type_to_pay' => 'setDaysTypeToPay',
        'bank_guarantee' => 'setBankGuarantee',
        'bank_transfer_number' => 'setBankTransferNumber',
        'bank_id' => 'setBankId',
        'bank_name' => 'setBankName'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'code' => 'getCode',
        'channel_code' => 'getChannelCode',
        'due_date' => 'getDueDate',
        'payment_instruction' => 'getPaymentInstruction',
        'days_type_to_pay' => 'getDaysTypeToPay',
        'bank_guarantee' => 'getBankGuarantee',
        'bank_transfer_number' => 'getBankTransferNumber',
        'bank_id' => 'getBankId',
        'bank_name' => 'getBankName'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['code'] = isset($data['code']) ? $data['code'] : null;
        $this->container['channel_code'] = isset($data['channel_code']) ? $data['channel_code'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['payment_instruction'] = isset($data['payment_instruction']) ? $data['payment_instruction'] : null;
        $this->container['days_type_to_pay'] = isset($data['days_type_to_pay']) ? $data['days_type_to_pay'] : null;
        $this->container['bank_guarantee'] = isset($data['bank_guarantee']) ? $data['bank_guarantee'] : null;
        $this->container['bank_transfer_number'] = isset($data['bank_transfer_number']) ? $data['bank_transfer_number'] : null;
        $this->container['bank_id'] = isset($data['bank_id']) ? $data['bank_id'] : null;
        $this->container['bank_name'] = isset($data['bank_name']) ? $data['bank_name'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets code
     * @return string
     */
    public function getCode()
    {
        return $this->container['code'];
    }

    /**
     * Sets code
     * @param string $code
     * @return $this
     */
    public function setCode($code)
    {
        $this->container['code'] = $code;

        return $this;
    }

    /**
     * Gets channel_code
     * @return string
     */
    public function getChannelCode()
    {
        return $this->container['channel_code'];
    }

    /**
     * Sets channel_code
     * @param string $channel_code
     * @return $this
     */
    public function setChannelCode($channel_code)
    {
        $this->container['channel_code'] = $channel_code;

        return $this;
    }

    /**
     * Gets due_date
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     * @param \DateTime $due_date
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets payment_instruction
     * @return string
     */
    public function getPaymentInstruction()
    {
        return $this->container['payment_instruction'];
    }

    /**
     * Sets payment_instruction
     * @param string $payment_instruction
     * @return $this
     */
    public function setPaymentInstruction($payment_instruction)
    {
        $this->container['payment_instruction'] = $payment_instruction;

        return $this;
    }

    /**
     * Gets days_type_to_pay
     * @return string
     */
    public function getDaysTypeToPay()
    {
        return $this->container['days_type_to_pay'];
    }

    /**
     * Sets days_type_to_pay
     * @param string $days_type_to_pay
     * @return $this
     */
    public function setDaysTypeToPay($days_type_to_pay)
    {
        $this->container['days_type_to_pay'] = $days_type_to_pay;

        return $this;
    }

    /**
     * Gets bank_guarantee
     * @return string
     */
    public function getBankGuarantee()
    {
        return $this->container['bank_guarantee'];
    }

    /**
     * Sets bank_guarantee
     * @param string $bank_guarantee
     * @return $this
     */
    public function setBankGuarantee($bank_guarantee)
    {
        $this->container['bank_guarantee'] = $bank_guarantee;

        return $this;
    }

    /**
     * Gets bank_transfer_number
     * @return string
     */
    public function getBankTransferNumber()
    {
        return $this->container['bank_transfer_number'];
    }

    /**
     * Sets bank_transfer_number
     * @param string $bank_transfer_number
     * @return $this
     */
    public function setBankTransferNumber($bank_transfer_number)
    {
        $this->container['bank_transfer_number'] = $bank_transfer_number;

        return $this;
    }

    /**
     * Gets bank_id
     * @return string
     */
    public function getBankId()
    {
        return $this->container['bank_id'];
    }

    /**
     * Sets bank_id
     * @param string $bank_id
     * @return $this
     */
    public function setBankId($bank_id)
    {
        $this->container['bank_id'] = $bank_id;

        return $this;
    }

    /**
     * Gets bank_name
     * @return string
     */
    public function getBankName()
    {
        return $this->container['bank_name'];
    }

    /**
     * Sets bank_name
     * @param string $bank_name
     * @return $this
     */
    public function setBankName($bank_name)
    {
        $this->container['bank_name'] = $bank_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


