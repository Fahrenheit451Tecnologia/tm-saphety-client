<?php
/**
 * Dimensions
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Dimensions Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Dimensions implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Dimensions';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'height' => 'double',
        'height_unit_of_measure' => 'string',
        'width' => 'double',
        'width_unit_of_measure' => 'string',
        'depth' => 'double',
        'depth_unit_of_measure' => 'string',
        'volume' => 'double',
        'volume_unit_of_measure' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'height' => 'double',
        'height_unit_of_measure' => null,
        'width' => 'double',
        'width_unit_of_measure' => null,
        'depth' => 'double',
        'depth_unit_of_measure' => null,
        'volume' => 'double',
        'volume_unit_of_measure' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'height' => 'Height',
        'height_unit_of_measure' => 'HeightUnitOfMeasure',
        'width' => 'Width',
        'width_unit_of_measure' => 'WidthUnitOfMeasure',
        'depth' => 'Depth',
        'depth_unit_of_measure' => 'DepthUnitOfMeasure',
        'volume' => 'Volume',
        'volume_unit_of_measure' => 'VolumeUnitOfMeasure'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'height' => 'setHeight',
        'height_unit_of_measure' => 'setHeightUnitOfMeasure',
        'width' => 'setWidth',
        'width_unit_of_measure' => 'setWidthUnitOfMeasure',
        'depth' => 'setDepth',
        'depth_unit_of_measure' => 'setDepthUnitOfMeasure',
        'volume' => 'setVolume',
        'volume_unit_of_measure' => 'setVolumeUnitOfMeasure'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'height' => 'getHeight',
        'height_unit_of_measure' => 'getHeightUnitOfMeasure',
        'width' => 'getWidth',
        'width_unit_of_measure' => 'getWidthUnitOfMeasure',
        'depth' => 'getDepth',
        'depth_unit_of_measure' => 'getDepthUnitOfMeasure',
        'volume' => 'getVolume',
        'volume_unit_of_measure' => 'getVolumeUnitOfMeasure'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['height'] = isset($data['height']) ? $data['height'] : null;
        $this->container['height_unit_of_measure'] = isset($data['height_unit_of_measure']) ? $data['height_unit_of_measure'] : null;
        $this->container['width'] = isset($data['width']) ? $data['width'] : null;
        $this->container['width_unit_of_measure'] = isset($data['width_unit_of_measure']) ? $data['width_unit_of_measure'] : null;
        $this->container['depth'] = isset($data['depth']) ? $data['depth'] : null;
        $this->container['depth_unit_of_measure'] = isset($data['depth_unit_of_measure']) ? $data['depth_unit_of_measure'] : null;
        $this->container['volume'] = isset($data['volume']) ? $data['volume'] : null;
        $this->container['volume_unit_of_measure'] = isset($data['volume_unit_of_measure']) ? $data['volume_unit_of_measure'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets height
     *
     * @return double
     */
    public function getHeight()
    {
        return $this->container['height'];
    }

    /**
     * Sets height
     *
     * @param double $height height
     *
     * @return $this
     */
    public function setHeight($height)
    {
        $this->container['height'] = $height;

        return $this;
    }

    /**
     * Gets height_unit_of_measure
     *
     * @return string
     */
    public function getHeightUnitOfMeasure()
    {
        return $this->container['height_unit_of_measure'];
    }

    /**
     * Sets height_unit_of_measure
     *
     * @param string $height_unit_of_measure height_unit_of_measure
     *
     * @return $this
     */
    public function setHeightUnitOfMeasure($height_unit_of_measure)
    {
        $this->container['height_unit_of_measure'] = $height_unit_of_measure;

        return $this;
    }

    /**
     * Gets width
     *
     * @return double
     */
    public function getWidth()
    {
        return $this->container['width'];
    }

    /**
     * Sets width
     *
     * @param double $width width
     *
     * @return $this
     */
    public function setWidth($width)
    {
        $this->container['width'] = $width;

        return $this;
    }

    /**
     * Gets width_unit_of_measure
     *
     * @return string
     */
    public function getWidthUnitOfMeasure()
    {
        return $this->container['width_unit_of_measure'];
    }

    /**
     * Sets width_unit_of_measure
     *
     * @param string $width_unit_of_measure width_unit_of_measure
     *
     * @return $this
     */
    public function setWidthUnitOfMeasure($width_unit_of_measure)
    {
        $this->container['width_unit_of_measure'] = $width_unit_of_measure;

        return $this;
    }

    /**
     * Gets depth
     *
     * @return double
     */
    public function getDepth()
    {
        return $this->container['depth'];
    }

    /**
     * Sets depth
     *
     * @param double $depth depth
     *
     * @return $this
     */
    public function setDepth($depth)
    {
        $this->container['depth'] = $depth;

        return $this;
    }

    /**
     * Gets depth_unit_of_measure
     *
     * @return string
     */
    public function getDepthUnitOfMeasure()
    {
        return $this->container['depth_unit_of_measure'];
    }

    /**
     * Sets depth_unit_of_measure
     *
     * @param string $depth_unit_of_measure depth_unit_of_measure
     *
     * @return $this
     */
    public function setDepthUnitOfMeasure($depth_unit_of_measure)
    {
        $this->container['depth_unit_of_measure'] = $depth_unit_of_measure;

        return $this;
    }

    /**
     * Gets volume
     *
     * @return double
     */
    public function getVolume()
    {
        return $this->container['volume'];
    }

    /**
     * Sets volume
     *
     * @param double $volume volume
     *
     * @return $this
     */
    public function setVolume($volume)
    {
        $this->container['volume'] = $volume;

        return $this;
    }

    /**
     * Gets volume_unit_of_measure
     *
     * @return string
     */
    public function getVolumeUnitOfMeasure()
    {
        return $this->container['volume_unit_of_measure'];
    }

    /**
     * Sets volume_unit_of_measure
     *
     * @param string $volume_unit_of_measure volume_unit_of_measure
     *
     * @return $this
     */
    public function setVolumeUnitOfMeasure($volume_unit_of_measure)
    {
        $this->container['volume_unit_of_measure'] = $volume_unit_of_measure;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


