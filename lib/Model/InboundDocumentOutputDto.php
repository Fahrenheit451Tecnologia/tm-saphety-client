<?php
/**
 * InboundDocumentOutputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * InboundDocumentOutputDto Class Doc Comment
 *
 * @category Class
 * @description Dto of an inbound document.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InboundDocumentOutputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'InboundDocumentOutputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'document_number' => 'string',
        'document_type' => 'string',
        'document_sub_type' => 'string',
        'creation_date' => '\DateTime',
        'document_date' => '\DateTime',
        'currency' => 'string',
        'issuer_name' => 'string',
        'customer_name' => 'string',
        'business_status' => 'string',
        'total_amount' => 'double',
        'business_status_reason' => 'string',
        'possibly_tacitly_accepted' => 'bool',
        'pdf' => '\Swagger\Client\Model\DocumentContentFileOutputDto',
        'xml' => '\Swagger\Client\Model\DocumentContentFileOutputDto',
        'document_attachments' => '\Swagger\Client\Model\DocumentAttachmentOutputDto[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'document_number' => null,
        'document_type' => null,
        'document_sub_type' => null,
        'creation_date' => 'date-time',
        'document_date' => 'date-time',
        'currency' => null,
        'issuer_name' => null,
        'customer_name' => null,
        'business_status' => null,
        'total_amount' => 'double',
        'business_status_reason' => null,
        'possibly_tacitly_accepted' => null,
        'pdf' => null,
        'xml' => null,
        'document_attachments' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'document_number' => 'DocumentNumber',
        'document_type' => 'DocumentType',
        'document_sub_type' => 'DocumentSubType',
        'creation_date' => 'CreationDate',
        'document_date' => 'DocumentDate',
        'currency' => 'Currency',
        'issuer_name' => 'IssuerName',
        'customer_name' => 'CustomerName',
        'business_status' => 'BusinessStatus',
        'total_amount' => 'TotalAmount',
        'business_status_reason' => 'BusinessStatusReason',
        'possibly_tacitly_accepted' => 'PossiblyTacitlyAccepted',
        'pdf' => 'Pdf',
        'xml' => 'Xml',
        'document_attachments' => 'DocumentAttachments'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'document_number' => 'setDocumentNumber',
        'document_type' => 'setDocumentType',
        'document_sub_type' => 'setDocumentSubType',
        'creation_date' => 'setCreationDate',
        'document_date' => 'setDocumentDate',
        'currency' => 'setCurrency',
        'issuer_name' => 'setIssuerName',
        'customer_name' => 'setCustomerName',
        'business_status' => 'setBusinessStatus',
        'total_amount' => 'setTotalAmount',
        'business_status_reason' => 'setBusinessStatusReason',
        'possibly_tacitly_accepted' => 'setPossiblyTacitlyAccepted',
        'pdf' => 'setPdf',
        'xml' => 'setXml',
        'document_attachments' => 'setDocumentAttachments'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'document_number' => 'getDocumentNumber',
        'document_type' => 'getDocumentType',
        'document_sub_type' => 'getDocumentSubType',
        'creation_date' => 'getCreationDate',
        'document_date' => 'getDocumentDate',
        'currency' => 'getCurrency',
        'issuer_name' => 'getIssuerName',
        'customer_name' => 'getCustomerName',
        'business_status' => 'getBusinessStatus',
        'total_amount' => 'getTotalAmount',
        'business_status_reason' => 'getBusinessStatusReason',
        'possibly_tacitly_accepted' => 'getPossiblyTacitlyAccepted',
        'pdf' => 'getPdf',
        'xml' => 'getXml',
        'document_attachments' => 'getDocumentAttachments'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['document_number'] = isset($data['document_number']) ? $data['document_number'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_sub_type'] = isset($data['document_sub_type']) ? $data['document_sub_type'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['document_date'] = isset($data['document_date']) ? $data['document_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['issuer_name'] = isset($data['issuer_name']) ? $data['issuer_name'] : null;
        $this->container['customer_name'] = isset($data['customer_name']) ? $data['customer_name'] : null;
        $this->container['business_status'] = isset($data['business_status']) ? $data['business_status'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['business_status_reason'] = isset($data['business_status_reason']) ? $data['business_status_reason'] : null;
        $this->container['possibly_tacitly_accepted'] = isset($data['possibly_tacitly_accepted']) ? $data['possibly_tacitly_accepted'] : null;
        $this->container['pdf'] = isset($data['pdf']) ? $data['pdf'] : null;
        $this->container['xml'] = isset($data['xml']) ? $data['xml'] : null;
        $this->container['document_attachments'] = isset($data['document_attachments']) ? $data['document_attachments'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Document Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets document_number
     *
     * @return string
     */
    public function getDocumentNumber()
    {
        return $this->container['document_number'];
    }

    /**
     * Sets document_number
     *
     * @param string $document_number Document number with prefix
     *
     * @return $this
     */
    public function setDocumentNumber($document_number)
    {
        $this->container['document_number'] = $document_number;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type Document type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_sub_type
     *
     * @return string
     */
    public function getDocumentSubType()
    {
        return $this->container['document_sub_type'];
    }

    /**
     * Sets document_sub_type
     *
     * @param string $document_sub_type Document sub type if exists
     *
     * @return $this
     */
    public function setDocumentSubType($document_sub_type)
    {
        $this->container['document_sub_type'] = $document_sub_type;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Record creation date on eInvoice
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets document_date
     *
     * @return \DateTime
     */
    public function getDocumentDate()
    {
        return $this->container['document_date'];
    }

    /**
     * Sets document_date
     *
     * @param \DateTime $document_date Issue date
     *
     * @return $this
     */
    public function setDocumentDate($document_date)
    {
        $this->container['document_date'] = $document_date;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Document currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets issuer_name
     *
     * @return string
     */
    public function getIssuerName()
    {
        return $this->container['issuer_name'];
    }

    /**
     * Sets issuer_name
     *
     * @param string $issuer_name Name of the issuer
     *
     * @return $this
     */
    public function setIssuerName($issuer_name)
    {
        $this->container['issuer_name'] = $issuer_name;

        return $this;
    }

    /**
     * Gets customer_name
     *
     * @return string
     */
    public function getCustomerName()
    {
        return $this->container['customer_name'];
    }

    /**
     * Sets customer_name
     *
     * @param string $customer_name Name of the client
     *
     * @return $this
     */
    public function setCustomerName($customer_name)
    {
        $this->container['customer_name'] = $customer_name;

        return $this;
    }

    /**
     * Gets business_status
     *
     * @return string
     */
    public function getBusinessStatus()
    {
        return $this->container['business_status'];
    }

    /**
     * Sets business_status
     *
     * @param string $business_status Current status of the document
     *
     * @return $this
     */
    public function setBusinessStatus($business_status)
    {
        $this->container['business_status'] = $business_status;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount Total amount
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets business_status_reason
     *
     * @return string
     */
    public function getBusinessStatusReason()
    {
        return $this->container['business_status_reason'];
    }

    /**
     * Sets business_status_reason
     *
     * @param string $business_status_reason If status is Rejected, the reason for rejection. Otherwise, null or empty.
     *
     * @return $this
     */
    public function setBusinessStatusReason($business_status_reason)
    {
        $this->container['business_status_reason'] = $business_status_reason;

        return $this;
    }

    /**
     * Gets possibly_tacitly_accepted
     *
     * @return bool
     */
    public function getPossiblyTacitlyAccepted()
    {
        return $this->container['possibly_tacitly_accepted'];
    }

    /**
     * Sets possibly_tacitly_accepted
     *
     * @param bool $possibly_tacitly_accepted Possibly tacitly accepted (merely indicative, not binding)
     *
     * @return $this
     */
    public function setPossiblyTacitlyAccepted($possibly_tacitly_accepted)
    {
        $this->container['possibly_tacitly_accepted'] = $possibly_tacitly_accepted;

        return $this;
    }

    /**
     * Gets pdf
     *
     * @return \Swagger\Client\Model\DocumentContentFileOutputDto
     */
    public function getPdf()
    {
        return $this->container['pdf'];
    }

    /**
     * Sets pdf
     *
     * @param \Swagger\Client\Model\DocumentContentFileOutputDto $pdf The pdf.
     *
     * @return $this
     */
    public function setPdf($pdf)
    {
        $this->container['pdf'] = $pdf;

        return $this;
    }

    /**
     * Gets xml
     *
     * @return \Swagger\Client\Model\DocumentContentFileOutputDto
     */
    public function getXml()
    {
        return $this->container['xml'];
    }

    /**
     * Sets xml
     *
     * @param \Swagger\Client\Model\DocumentContentFileOutputDto $xml The legal XML document
     *
     * @return $this
     */
    public function setXml($xml)
    {
        $this->container['xml'] = $xml;

        return $this;
    }

    /**
     * Gets document_attachments
     *
     * @return \Swagger\Client\Model\DocumentAttachmentOutputDto[]
     */
    public function getDocumentAttachments()
    {
        return $this->container['document_attachments'];
    }

    /**
     * Sets document_attachments
     *
     * @param \Swagger\Client\Model\DocumentAttachmentOutputDto[] $document_attachments Document attachments
     *
     * @return $this
     */
    public function setDocumentAttachments($document_attachments)
    {
        $this->container['document_attachments'] = $document_attachments;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


