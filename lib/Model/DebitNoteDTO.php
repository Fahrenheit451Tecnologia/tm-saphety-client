<?php
/**
 * DebitNoteDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DebitNoteDTO Class Doc Comment
 *
 * @category    Class
 * @description Represents a DebitNote input DTO.
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DebitNoteDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DebitNoteDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'serie_prefix' => 'string',
        'serie_number' => 'string',
        'issue_mode' => 'string',
        'issue_date' => '\DateTime',
        'due_date' => '\DateTime',
        'delivery_date' => '\DateTime',
        'currency' => 'string',
        'billing_period' => '\Swagger\Client\Model\PeriodDTO',
        'external_reference' => 'string',
        'document_references' => '\Swagger\Client\Model\DocumentReferenceDTO[]',
        'reason_debit' => 'string',
        'payment_method' => 'string',
        'issuer_party' => '\Swagger\Client\Model\AccountingPartyDTO',
        'customer_party' => '\Swagger\Client\Model\AccountingPartyDTO',
        'lines' => '\Swagger\Client\Model\LineDTO[]',
        'tax_summary' => '\Swagger\Client\Model\TaxSummaryDTO[]',
        'prepaid_payments' => '\Swagger\Client\Model\PrepaidPaymentDTO[]',
        'document_attachments' => '\Swagger\Client\Model\DocumentAttachmentDTO[]',
        'total' => '\Swagger\Client\Model\LegalMonetaryTotalDTO',
        'notes' => 'string[]',
        'notes_pdf' => '\Swagger\Client\Model\NoteDTO[]',
        'correlation_document_id' => 'string',
        'serie_external_key' => 'string',
        'additional_notification_emails' => 'string[]',
        'custom_fields' => '\Swagger\Client\Model\CustomFieldDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'serie_prefix' => null,
        'serie_number' => null,
        'issue_mode' => null,
        'issue_date' => 'date-time',
        'due_date' => 'date-time',
        'delivery_date' => 'date-time',
        'currency' => null,
        'billing_period' => null,
        'external_reference' => null,
        'document_references' => null,
        'reason_debit' => null,
        'payment_method' => null,
        'issuer_party' => null,
        'customer_party' => null,
        'lines' => null,
        'tax_summary' => null,
        'prepaid_payments' => null,
        'document_attachments' => null,
        'total' => null,
        'notes' => null,
        'notes_pdf' => null,
        'correlation_document_id' => null,
        'serie_external_key' => null,
        'additional_notification_emails' => null,
        'custom_fields' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'serie_prefix' => 'SeriePrefix',
        'serie_number' => 'SerieNumber',
        'issue_mode' => 'IssueMode',
        'issue_date' => 'IssueDate',
        'due_date' => 'DueDate',
        'delivery_date' => 'DeliveryDate',
        'currency' => 'Currency',
        'billing_period' => 'BillingPeriod',
        'external_reference' => 'ExternalReference',
        'document_references' => 'DocumentReferences',
        'reason_debit' => 'ReasonDebit',
        'payment_method' => 'PaymentMethod',
        'issuer_party' => 'IssuerParty',
        'customer_party' => 'CustomerParty',
        'lines' => 'Lines',
        'tax_summary' => 'TaxSummary',
        'prepaid_payments' => 'PrepaidPayments',
        'document_attachments' => 'DocumentAttachments',
        'total' => 'Total',
        'notes' => 'Notes',
        'notes_pdf' => 'NotesPDF',
        'correlation_document_id' => 'CorrelationDocumentId',
        'serie_external_key' => 'SerieExternalKey',
        'additional_notification_emails' => 'AdditionalNotificationEmails',
        'custom_fields' => 'CustomFields'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'serie_prefix' => 'setSeriePrefix',
        'serie_number' => 'setSerieNumber',
        'issue_mode' => 'setIssueMode',
        'issue_date' => 'setIssueDate',
        'due_date' => 'setDueDate',
        'delivery_date' => 'setDeliveryDate',
        'currency' => 'setCurrency',
        'billing_period' => 'setBillingPeriod',
        'external_reference' => 'setExternalReference',
        'document_references' => 'setDocumentReferences',
        'reason_debit' => 'setReasonDebit',
        'payment_method' => 'setPaymentMethod',
        'issuer_party' => 'setIssuerParty',
        'customer_party' => 'setCustomerParty',
        'lines' => 'setLines',
        'tax_summary' => 'setTaxSummary',
        'prepaid_payments' => 'setPrepaidPayments',
        'document_attachments' => 'setDocumentAttachments',
        'total' => 'setTotal',
        'notes' => 'setNotes',
        'notes_pdf' => 'setNotesPdf',
        'correlation_document_id' => 'setCorrelationDocumentId',
        'serie_external_key' => 'setSerieExternalKey',
        'additional_notification_emails' => 'setAdditionalNotificationEmails',
        'custom_fields' => 'setCustomFields'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'serie_prefix' => 'getSeriePrefix',
        'serie_number' => 'getSerieNumber',
        'issue_mode' => 'getIssueMode',
        'issue_date' => 'getIssueDate',
        'due_date' => 'getDueDate',
        'delivery_date' => 'getDeliveryDate',
        'currency' => 'getCurrency',
        'billing_period' => 'getBillingPeriod',
        'external_reference' => 'getExternalReference',
        'document_references' => 'getDocumentReferences',
        'reason_debit' => 'getReasonDebit',
        'payment_method' => 'getPaymentMethod',
        'issuer_party' => 'getIssuerParty',
        'customer_party' => 'getCustomerParty',
        'lines' => 'getLines',
        'tax_summary' => 'getTaxSummary',
        'prepaid_payments' => 'getPrepaidPayments',
        'document_attachments' => 'getDocumentAttachments',
        'total' => 'getTotal',
        'notes' => 'getNotes',
        'notes_pdf' => 'getNotesPdf',
        'correlation_document_id' => 'getCorrelationDocumentId',
        'serie_external_key' => 'getSerieExternalKey',
        'additional_notification_emails' => 'getAdditionalNotificationEmails',
        'custom_fields' => 'getCustomFields'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['serie_prefix'] = isset($data['serie_prefix']) ? $data['serie_prefix'] : null;
        $this->container['serie_number'] = isset($data['serie_number']) ? $data['serie_number'] : null;
        $this->container['issue_mode'] = isset($data['issue_mode']) ? $data['issue_mode'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['billing_period'] = isset($data['billing_period']) ? $data['billing_period'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['document_references'] = isset($data['document_references']) ? $data['document_references'] : null;
        $this->container['reason_debit'] = isset($data['reason_debit']) ? $data['reason_debit'] : null;
        $this->container['payment_method'] = isset($data['payment_method']) ? $data['payment_method'] : null;
        $this->container['issuer_party'] = isset($data['issuer_party']) ? $data['issuer_party'] : null;
        $this->container['customer_party'] = isset($data['customer_party']) ? $data['customer_party'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['tax_summary'] = isset($data['tax_summary']) ? $data['tax_summary'] : null;
        $this->container['prepaid_payments'] = isset($data['prepaid_payments']) ? $data['prepaid_payments'] : null;
        $this->container['document_attachments'] = isset($data['document_attachments']) ? $data['document_attachments'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['notes_pdf'] = isset($data['notes_pdf']) ? $data['notes_pdf'] : null;
        $this->container['correlation_document_id'] = isset($data['correlation_document_id']) ? $data['correlation_document_id'] : null;
        $this->container['serie_external_key'] = isset($data['serie_external_key']) ? $data['serie_external_key'] : null;
        $this->container['additional_notification_emails'] = isset($data['additional_notification_emails']) ? $data['additional_notification_emails'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['issue_mode'] === null) {
            $invalid_properties[] = "'issue_mode' can't be null";
        }
        if ($this->container['issue_date'] === null) {
            $invalid_properties[] = "'issue_date' can't be null";
        }
        if ($this->container['due_date'] === null) {
            $invalid_properties[] = "'due_date' can't be null";
        }
        if ($this->container['delivery_date'] === null) {
            $invalid_properties[] = "'delivery_date' can't be null";
        }
        if ($this->container['currency'] === null) {
            $invalid_properties[] = "'currency' can't be null";
        }
        if ($this->container['billing_period'] === null) {
            $invalid_properties[] = "'billing_period' can't be null";
        }
        if ($this->container['document_references'] === null) {
            $invalid_properties[] = "'document_references' can't be null";
        }
        if ($this->container['reason_debit'] === null) {
            $invalid_properties[] = "'reason_debit' can't be null";
        }
        if ($this->container['issuer_party'] === null) {
            $invalid_properties[] = "'issuer_party' can't be null";
        }
        if ($this->container['customer_party'] === null) {
            $invalid_properties[] = "'customer_party' can't be null";
        }
        if ($this->container['lines'] === null) {
            $invalid_properties[] = "'lines' can't be null";
        }
        if ($this->container['tax_summary'] === null) {
            $invalid_properties[] = "'tax_summary' can't be null";
        }
        if ($this->container['total'] === null) {
            $invalid_properties[] = "'total' can't be null";
        }
        if ($this->container['correlation_document_id'] === null) {
            $invalid_properties[] = "'correlation_document_id' can't be null";
        }
        if ($this->container['serie_external_key'] === null) {
            $invalid_properties[] = "'serie_external_key' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['issue_mode'] === null) {
            return false;
        }
        if ($this->container['issue_date'] === null) {
            return false;
        }
        if ($this->container['due_date'] === null) {
            return false;
        }
        if ($this->container['delivery_date'] === null) {
            return false;
        }
        if ($this->container['currency'] === null) {
            return false;
        }
        if ($this->container['billing_period'] === null) {
            return false;
        }
        if ($this->container['document_references'] === null) {
            return false;
        }
        if ($this->container['reason_debit'] === null) {
            return false;
        }
        if ($this->container['issuer_party'] === null) {
            return false;
        }
        if ($this->container['customer_party'] === null) {
            return false;
        }
        if ($this->container['lines'] === null) {
            return false;
        }
        if ($this->container['tax_summary'] === null) {
            return false;
        }
        if ($this->container['total'] === null) {
            return false;
        }
        if ($this->container['correlation_document_id'] === null) {
            return false;
        }
        if ($this->container['serie_external_key'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets serie_prefix
     * @return string
     */
    public function getSeriePrefix()
    {
        return $this->container['serie_prefix'];
    }

    /**
     * Sets serie_prefix
     * @param string $serie_prefix If the serie selected by SerieExternalKey is Autoincrement, this field must bem empty.  The document number will be assigned by the system.  Id the serie selected by SerieExternalKey is not Autoincrement, the prefix must be present.  Serie validations will be applied.
     * @return $this
     */
    public function setSeriePrefix($serie_prefix)
    {
        $this->container['serie_prefix'] = $serie_prefix;

        return $this;
    }

    /**
     * Gets serie_number
     * @return string
     */
    public function getSerieNumber()
    {
        return $this->container['serie_number'];
    }

    /**
     * Sets serie_number
     * @param string $serie_number If the serie selected by SerieExternalKey is Autoincrement, this field must bem empty.  The document number will be assigned by the system.  Id the serie selected by SerieExternalKey is not Autoincrement, the SerieNumber must be present.  Serie validations will be applied.
     * @return $this
     */
    public function setSerieNumber($serie_number)
    {
        $this->container['serie_number'] = $serie_number;

        return $this;
    }

    /**
     * Gets issue_mode
     * @return string
     */
    public function getIssueMode()
    {
        return $this->container['issue_mode'];
    }

    /**
     * Sets issue_mode
     * @param string $issue_mode Issue Mode. The value must be one of this ['Electronic', 'ByComputer']
     * @return $this
     */
    public function setIssueMode($issue_mode)
    {
        $this->container['issue_mode'] = $issue_mode;

        return $this;
    }

    /**
     * Gets issue_date
     * @return \DateTime
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     * @param \DateTime $issue_date Date issue of debit note. Format {yyyy-mm-dd}
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets due_date
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     * @param \DateTime $due_date Debit Note due date. Format {yyyy-mm-dd}
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets delivery_date
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     * @param \DateTime $delivery_date debit Note Delivery Date. Format {yyyy-mm-dd}
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets currency
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     * @param string $currency Currency code. Colombia is 'COP'
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets billing_period
     * @return \Swagger\Client\Model\PeriodDTO
     */
    public function getBillingPeriod()
    {
        return $this->container['billing_period'];
    }

    /**
     * Sets billing_period
     * @param \Swagger\Client\Model\PeriodDTO $billing_period Billing Period
     * @return $this
     */
    public function setBillingPeriod($billing_period)
    {
        $this->container['billing_period'] = $billing_period;

        return $this;
    }

    /**
     * Gets external_reference
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     * @param string $external_reference External Reference
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets document_references
     * @return \Swagger\Client\Model\DocumentReferenceDTO[]
     */
    public function getDocumentReferences()
    {
        return $this->container['document_references'];
    }

    /**
     * Sets document_references
     * @param \Swagger\Client\Model\DocumentReferenceDTO[] $document_references Documents(Sales Invoice, Exportation Invoice) refered to the debit note
     * @return $this
     */
    public function setDocumentReferences($document_references)
    {
        $this->container['document_references'] = $document_references;

        return $this;
    }

    /**
     * Gets reason_debit
     * @return string
     */
    public function getReasonDebit()
    {
        return $this->container['reason_debit'];
    }

    /**
     * Sets reason_debit
     * @param string $reason_debit Reason Debit. The value must be one of this ['Interests', 'ExpensesReceivable', 'AmountChange']
     * @return $this
     */
    public function setReasonDebit($reason_debit)
    {
        $this->container['reason_debit'] = $reason_debit;

        return $this;
    }

    /**
     * Gets payment_method
     * @return string
     */
    public function getPaymentMethod()
    {
        return $this->container['payment_method'];
    }

    /**
     * Sets payment_method
     * @param string $payment_method Bill payment method.  The value must be one of this ['Cash', 'Cheque', 'Bank', 'Transfer', 'BankDeposit']
     * @return $this
     */
    public function setPaymentMethod($payment_method)
    {
        $this->container['payment_method'] = $payment_method;

        return $this;
    }

    /**
     * Gets issuer_party
     * @return \Swagger\Client\Model\AccountingPartyDTO
     */
    public function getIssuerParty()
    {
        return $this->container['issuer_party'];
    }

    /**
     * Sets issuer_party
     * @param \Swagger\Client\Model\AccountingPartyDTO $issuer_party Data required of issuer to bill
     * @return $this
     */
    public function setIssuerParty($issuer_party)
    {
        $this->container['issuer_party'] = $issuer_party;

        return $this;
    }

    /**
     * Gets customer_party
     * @return \Swagger\Client\Model\AccountingPartyDTO
     */
    public function getCustomerParty()
    {
        return $this->container['customer_party'];
    }

    /**
     * Sets customer_party
     * @param \Swagger\Client\Model\AccountingPartyDTO $customer_party Data required of customer to bill
     * @return $this
     */
    public function setCustomerParty($customer_party)
    {
        $this->container['customer_party'] = $customer_party;

        return $this;
    }

    /**
     * Gets lines
     * @return \Swagger\Client\Model\LineDTO[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     * @param \Swagger\Client\Model\LineDTO[] $lines Debit note lines
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets tax_summary
     * @return \Swagger\Client\Model\TaxSummaryDTO[]
     */
    public function getTaxSummary()
    {
        return $this->container['tax_summary'];
    }

    /**
     * Sets tax_summary
     * @param \Swagger\Client\Model\TaxSummaryDTO[] $tax_summary Information used to report a tax withheld
     * @return $this
     */
    public function setTaxSummary($tax_summary)
    {
        $this->container['tax_summary'] = $tax_summary;

        return $this;
    }

    /**
     * Gets prepaid_payments
     * @return \Swagger\Client\Model\PrepaidPaymentDTO[]
     */
    public function getPrepaidPayments()
    {
        return $this->container['prepaid_payments'];
    }

    /**
     * Sets prepaid_payments
     * @param \Swagger\Client\Model\PrepaidPaymentDTO[] $prepaid_payments Information on the prepaid amount and date
     * @return $this
     */
    public function setPrepaidPayments($prepaid_payments)
    {
        $this->container['prepaid_payments'] = $prepaid_payments;

        return $this;
    }

    /**
     * Gets document_attachments
     * @return \Swagger\Client\Model\DocumentAttachmentDTO[]
     */
    public function getDocumentAttachments()
    {
        return $this->container['document_attachments'];
    }

    /**
     * Sets document_attachments
     * @param \Swagger\Client\Model\DocumentAttachmentDTO[] $document_attachments Document downloadable attachments.
     * @return $this
     */
    public function setDocumentAttachments($document_attachments)
    {
        $this->container['document_attachments'] = $document_attachments;

        return $this;
    }

    /**
     * Gets total
     * @return \Swagger\Client\Model\LegalMonetaryTotalDTO
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     * @param \Swagger\Client\Model\LegalMonetaryTotalDTO $total Relating to the total amounts applicable to the debit note
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets notes
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     * @param string[] $notes Additional information: Free text on the document
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets notes_pdf
     * @return \Swagger\Client\Model\NoteDTO[]
     */
    public function getNotesPdf()
    {
        return $this->container['notes_pdf'];
    }

    /**
     * Sets notes_pdf
     * @param \Swagger\Client\Model\NoteDTO[] $notes_pdf Additional information for the pdf
     * @return $this
     */
    public function setNotesPdf($notes_pdf)
    {
        $this->container['notes_pdf'] = $notes_pdf;

        return $this;
    }

    /**
     * Gets correlation_document_id
     * @return string
     */
    public function getCorrelationDocumentId()
    {
        return $this->container['correlation_document_id'];
    }

    /**
     * Sets correlation_document_id
     * @param string $correlation_document_id Unique identifier for the document. This Id is used to prevent document duplication.
     * @return $this
     */
    public function setCorrelationDocumentId($correlation_document_id)
    {
        $this->container['correlation_document_id'] = $correlation_document_id;

        return $this;
    }

    /**
     * Gets serie_external_key
     * @return string
     */
    public function getSerieExternalKey()
    {
        return $this->container['serie_external_key'];
    }

    /**
     * Sets serie_external_key
     * @param string $serie_external_key Unique identifier for the serie. This identifier is generated by the system when the serie is created  and must be sent back on document creation to select wich serie will be used
     * @return $this
     */
    public function setSerieExternalKey($serie_external_key)
    {
        $this->container['serie_external_key'] = $serie_external_key;

        return $this;
    }

    /**
     * Gets additional_notification_emails
     * @return string[]
     */
    public function getAdditionalNotificationEmails()
    {
        return $this->container['additional_notification_emails'];
    }

    /**
     * Sets additional_notification_emails
     * @param string[] $additional_notification_emails List of adicional emails to be notified
     * @return $this
     */
    public function setAdditionalNotificationEmails($additional_notification_emails)
    {
        $this->container['additional_notification_emails'] = $additional_notification_emails;

        return $this;
    }

    /**
     * Gets custom_fields
     * @return \Swagger\Client\Model\CustomFieldDTO[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     * @param \Swagger\Client\Model\CustomFieldDTO[] $custom_fields Document Custom Fields
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


