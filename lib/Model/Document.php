<?php
/**
 * Document
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * Document Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class Document implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'Document';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'nombre' => 'string',
        'sha256' => 'string',
        'tipo' => 'string',
        'nota_de_entrega' => 'string',
        'adjuntos' => 'bool',
        'representacion_graficas' => 'bool',
        'identification_destinatario' => 'bool',
        'extensiones' => '\Swagger\Client\Model\Extension[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'nombre' => null,
        'sha256' => null,
        'tipo' => null,
        'nota_de_entrega' => null,
        'adjuntos' => null,
        'representacion_graficas' => null,
        'identification_destinatario' => null,
        'extensiones' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'nombre' => 'nombre',
        'sha256' => 'sha256',
        'tipo' => 'tipo',
        'nota_de_entrega' => 'notaDeEntrega',
        'adjuntos' => 'adjuntos',
        'representacion_graficas' => 'representacionGraficas',
        'identification_destinatario' => 'identificationDestinatario',
        'extensiones' => 'extensiones'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'nombre' => 'setNombre',
        'sha256' => 'setSha256',
        'tipo' => 'setTipo',
        'nota_de_entrega' => 'setNotaDeEntrega',
        'adjuntos' => 'setAdjuntos',
        'representacion_graficas' => 'setRepresentacionGraficas',
        'identification_destinatario' => 'setIdentificationDestinatario',
        'extensiones' => 'setExtensiones'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'nombre' => 'getNombre',
        'sha256' => 'getSha256',
        'tipo' => 'getTipo',
        'nota_de_entrega' => 'getNotaDeEntrega',
        'adjuntos' => 'getAdjuntos',
        'representacion_graficas' => 'getRepresentacionGraficas',
        'identification_destinatario' => 'getIdentificationDestinatario',
        'extensiones' => 'getExtensiones'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TIPO_FACTURA_NACIONAL = 'FacturaNacional';
    const TIPO_FACTURA_EXPORTACION = 'FacturaExportacion';
    const TIPO_FACTURA_CONTIGENCIA = 'FacturaContigencia';
    const TIPO_NOTA_DEBITO = 'NotaDebito';
    const TIPO_NOTA_CREDITO = 'NotaCredito';
    const TIPO_ACUSE_DE_RECIBO = 'AcuseDeRecibo';
    const TIPO_ACEPTACION = 'Aceptacion';
    const TIPO_RECHAZO = 'Rechazo';
    const TIPO_OTRO = 'Otro';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTipoAllowableValues()
    {
        return [
            self::TIPO_FACTURA_NACIONAL,
            self::TIPO_FACTURA_EXPORTACION,
            self::TIPO_FACTURA_CONTIGENCIA,
            self::TIPO_NOTA_DEBITO,
            self::TIPO_NOTA_CREDITO,
            self::TIPO_ACUSE_DE_RECIBO,
            self::TIPO_ACEPTACION,
            self::TIPO_RECHAZO,
            self::TIPO_OTRO,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['nombre'] = isset($data['nombre']) ? $data['nombre'] : null;
        $this->container['sha256'] = isset($data['sha256']) ? $data['sha256'] : null;
        $this->container['tipo'] = isset($data['tipo']) ? $data['tipo'] : null;
        $this->container['nota_de_entrega'] = isset($data['nota_de_entrega']) ? $data['nota_de_entrega'] : null;
        $this->container['adjuntos'] = isset($data['adjuntos']) ? $data['adjuntos'] : null;
        $this->container['representacion_graficas'] = isset($data['representacion_graficas']) ? $data['representacion_graficas'] : null;
        $this->container['identification_destinatario'] = isset($data['identification_destinatario']) ? $data['identification_destinatario'] : null;
        $this->container['extensiones'] = isset($data['extensiones']) ? $data['extensiones'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getTipoAllowableValues();
        if (!in_array($this->container['tipo'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'tipo', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getTipoAllowableValues();
        if (!in_array($this->container['tipo'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets nombre
     * @return string
     */
    public function getNombre()
    {
        return $this->container['nombre'];
    }

    /**
     * Sets nombre
     * @param string $nombre
     * @return $this
     */
    public function setNombre($nombre)
    {
        $this->container['nombre'] = $nombre;

        return $this;
    }

    /**
     * Gets sha256
     * @return string
     */
    public function getSha256()
    {
        return $this->container['sha256'];
    }

    /**
     * Sets sha256
     * @param string $sha256
     * @return $this
     */
    public function setSha256($sha256)
    {
        $this->container['sha256'] = $sha256;

        return $this;
    }

    /**
     * Gets tipo
     * @return string
     */
    public function getTipo()
    {
        return $this->container['tipo'];
    }

    /**
     * Sets tipo
     * @param string $tipo
     * @return $this
     */
    public function setTipo($tipo)
    {
        $allowed_values = $this->getTipoAllowableValues();
        if (!is_null($tipo) && !in_array($tipo, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tipo', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['tipo'] = $tipo;

        return $this;
    }

    /**
     * Gets nota_de_entrega
     * @return string
     */
    public function getNotaDeEntrega()
    {
        return $this->container['nota_de_entrega'];
    }

    /**
     * Sets nota_de_entrega
     * @param string $nota_de_entrega
     * @return $this
     */
    public function setNotaDeEntrega($nota_de_entrega)
    {
        $this->container['nota_de_entrega'] = $nota_de_entrega;

        return $this;
    }

    /**
     * Gets adjuntos
     * @return bool
     */
    public function getAdjuntos()
    {
        return $this->container['adjuntos'];
    }

    /**
     * Sets adjuntos
     * @param bool $adjuntos
     * @return $this
     */
    public function setAdjuntos($adjuntos)
    {
        $this->container['adjuntos'] = $adjuntos;

        return $this;
    }

    /**
     * Gets representacion_graficas
     * @return bool
     */
    public function getRepresentacionGraficas()
    {
        return $this->container['representacion_graficas'];
    }

    /**
     * Sets representacion_graficas
     * @param bool $representacion_graficas
     * @return $this
     */
    public function setRepresentacionGraficas($representacion_graficas)
    {
        $this->container['representacion_graficas'] = $representacion_graficas;

        return $this;
    }

    /**
     * Gets identification_destinatario
     * @return bool
     */
    public function getIdentificationDestinatario()
    {
        return $this->container['identification_destinatario'];
    }

    /**
     * Sets identification_destinatario
     * @param bool $identification_destinatario
     * @return $this
     */
    public function setIdentificationDestinatario($identification_destinatario)
    {
        $this->container['identification_destinatario'] = $identification_destinatario;

        return $this;
    }

    /**
     * Gets extensiones
     * @return \Swagger\Client\Model\Extension[]
     */
    public function getExtensiones()
    {
        return $this->container['extensiones'];
    }

    /**
     * Sets extensiones
     * @param \Swagger\Client\Model\Extension[] $extensiones
     * @return $this
     */
    public function setExtensiones($extensiones)
    {
        $this->container['extensiones'] = $extensiones;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


