<?php
/**
 * RoleDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * RoleDTO Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class RoleDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'RoleDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'permission_level' => 'string',
        'permission_ids' => 'string[]',
        'permissions' => '\Swagger\Client\Model\PermissionDTO[]',
        'creation_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'name' => null,
        'permission_level' => null,
        'permission_ids' => 'uuid',
        'permissions' => null,
        'creation_date' => 'date-time'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'permission_level' => 'PermissionLevel',
        'permission_ids' => 'PermissionIds',
        'permissions' => 'Permissions',
        'creation_date' => 'CreationDate'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'permission_level' => 'setPermissionLevel',
        'permission_ids' => 'setPermissionIds',
        'permissions' => 'setPermissions',
        'creation_date' => 'setCreationDate'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'permission_level' => 'getPermissionLevel',
        'permission_ids' => 'getPermissionIds',
        'permissions' => 'getPermissions',
        'creation_date' => 'getCreationDate'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const PERMISSION_LEVEL__GLOBAL = 'Global';
    const PERMISSION_LEVEL_VIRTUAL_OPERATOR_MEMBERSHIP = 'VirtualOperatorMembership';
    const PERMISSION_LEVEL_COMPANY_MEMBERSHIP = 'CompanyMembership';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getPermissionLevelAllowableValues()
    {
        return [
            self::PERMISSION_LEVEL__GLOBAL,
            self::PERMISSION_LEVEL_VIRTUAL_OPERATOR_MEMBERSHIP,
            self::PERMISSION_LEVEL_COMPANY_MEMBERSHIP,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['permission_level'] = isset($data['permission_level']) ? $data['permission_level'] : null;
        $this->container['permission_ids'] = isset($data['permission_ids']) ? $data['permission_ids'] : null;
        $this->container['permissions'] = isset($data['permissions']) ? $data['permissions'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        $allowed_values = $this->getPermissionLevelAllowableValues();
        if (!in_array($this->container['permission_level'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'permission_level', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowed_values = $this->getPermissionLevelAllowableValues();
        if (!in_array($this->container['permission_level'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets permission_level
     * @return string
     */
    public function getPermissionLevel()
    {
        return $this->container['permission_level'];
    }

    /**
     * Sets permission_level
     * @param string $permission_level
     * @return $this
     */
    public function setPermissionLevel($permission_level)
    {
        $allowed_values = $this->getPermissionLevelAllowableValues();
        if (!is_null($permission_level) && !in_array($permission_level, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'permission_level', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['permission_level'] = $permission_level;

        return $this;
    }

    /**
     * Gets permission_ids
     * @return string[]
     */
    public function getPermissionIds()
    {
        return $this->container['permission_ids'];
    }

    /**
     * Sets permission_ids
     * @param string[] $permission_ids
     * @return $this
     */
    public function setPermissionIds($permission_ids)
    {
        $this->container['permission_ids'] = $permission_ids;

        return $this;
    }

    /**
     * Gets permissions
     * @return \Swagger\Client\Model\PermissionDTO[]
     */
    public function getPermissions()
    {
        return $this->container['permissions'];
    }

    /**
     * Sets permissions
     * @param \Swagger\Client\Model\PermissionDTO[] $permissions
     * @return $this
     */
    public function setPermissions($permissions)
    {
        $this->container['permissions'] = $permissions;

        return $this;
    }

    /**
     * Gets creation_date
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     * @param \DateTime $creation_date
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


