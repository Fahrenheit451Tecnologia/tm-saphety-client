<?php
/**
 * Item
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Item Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Item implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Item';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gtin' => 'string',
        'buyer_item_identification' => 'string',
        'seller_item_identification' => 'string',
        'serial_number' => 'string',
        'description' => 'string',
        'brand_name' => 'string',
        'model_name' => 'string',
        'pack_quantity' => 'double',
        'pack_unit_of_measure' => 'string',
        'units_per_package' => 'double',
        'dimensions' => '\Swagger\Client\Model\Dimensions',
        'lot_number' => 'string',
        'expiry_date' => '\DateTime'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gtin' => null,
        'buyer_item_identification' => null,
        'seller_item_identification' => null,
        'serial_number' => null,
        'description' => null,
        'brand_name' => null,
        'model_name' => null,
        'pack_quantity' => 'double',
        'pack_unit_of_measure' => null,
        'units_per_package' => 'double',
        'dimensions' => null,
        'lot_number' => null,
        'expiry_date' => 'date-time'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'gtin' => 'Gtin',
        'buyer_item_identification' => 'BuyerItemIdentification',
        'seller_item_identification' => 'SellerItemIdentification',
        'serial_number' => 'SerialNumber',
        'description' => 'Description',
        'brand_name' => 'BrandName',
        'model_name' => 'ModelName',
        'pack_quantity' => 'PackQuantity',
        'pack_unit_of_measure' => 'PackUnitOfMeasure',
        'units_per_package' => 'UnitsPerPackage',
        'dimensions' => 'Dimensions',
        'lot_number' => 'LotNumber',
        'expiry_date' => 'ExpiryDate'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'gtin' => 'setGtin',
        'buyer_item_identification' => 'setBuyerItemIdentification',
        'seller_item_identification' => 'setSellerItemIdentification',
        'serial_number' => 'setSerialNumber',
        'description' => 'setDescription',
        'brand_name' => 'setBrandName',
        'model_name' => 'setModelName',
        'pack_quantity' => 'setPackQuantity',
        'pack_unit_of_measure' => 'setPackUnitOfMeasure',
        'units_per_package' => 'setUnitsPerPackage',
        'dimensions' => 'setDimensions',
        'lot_number' => 'setLotNumber',
        'expiry_date' => 'setExpiryDate'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'gtin' => 'getGtin',
        'buyer_item_identification' => 'getBuyerItemIdentification',
        'seller_item_identification' => 'getSellerItemIdentification',
        'serial_number' => 'getSerialNumber',
        'description' => 'getDescription',
        'brand_name' => 'getBrandName',
        'model_name' => 'getModelName',
        'pack_quantity' => 'getPackQuantity',
        'pack_unit_of_measure' => 'getPackUnitOfMeasure',
        'units_per_package' => 'getUnitsPerPackage',
        'dimensions' => 'getDimensions',
        'lot_number' => 'getLotNumber',
        'expiry_date' => 'getExpiryDate'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gtin'] = isset($data['gtin']) ? $data['gtin'] : null;
        $this->container['buyer_item_identification'] = isset($data['buyer_item_identification']) ? $data['buyer_item_identification'] : null;
        $this->container['seller_item_identification'] = isset($data['seller_item_identification']) ? $data['seller_item_identification'] : null;
        $this->container['serial_number'] = isset($data['serial_number']) ? $data['serial_number'] : null;
        $this->container['description'] = isset($data['description']) ? $data['description'] : null;
        $this->container['brand_name'] = isset($data['brand_name']) ? $data['brand_name'] : null;
        $this->container['model_name'] = isset($data['model_name']) ? $data['model_name'] : null;
        $this->container['pack_quantity'] = isset($data['pack_quantity']) ? $data['pack_quantity'] : null;
        $this->container['pack_unit_of_measure'] = isset($data['pack_unit_of_measure']) ? $data['pack_unit_of_measure'] : null;
        $this->container['units_per_package'] = isset($data['units_per_package']) ? $data['units_per_package'] : null;
        $this->container['dimensions'] = isset($data['dimensions']) ? $data['dimensions'] : null;
        $this->container['lot_number'] = isset($data['lot_number']) ? $data['lot_number'] : null;
        $this->container['expiry_date'] = isset($data['expiry_date']) ? $data['expiry_date'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets gtin
     *
     * @return string
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string $gtin gtin
     *
     * @return $this
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets buyer_item_identification
     *
     * @return string
     */
    public function getBuyerItemIdentification()
    {
        return $this->container['buyer_item_identification'];
    }

    /**
     * Sets buyer_item_identification
     *
     * @param string $buyer_item_identification buyer_item_identification
     *
     * @return $this
     */
    public function setBuyerItemIdentification($buyer_item_identification)
    {
        $this->container['buyer_item_identification'] = $buyer_item_identification;

        return $this;
    }

    /**
     * Gets seller_item_identification
     *
     * @return string
     */
    public function getSellerItemIdentification()
    {
        return $this->container['seller_item_identification'];
    }

    /**
     * Sets seller_item_identification
     *
     * @param string $seller_item_identification seller_item_identification
     *
     * @return $this
     */
    public function setSellerItemIdentification($seller_item_identification)
    {
        $this->container['seller_item_identification'] = $seller_item_identification;

        return $this;
    }

    /**
     * Gets serial_number
     *
     * @return string
     */
    public function getSerialNumber()
    {
        return $this->container['serial_number'];
    }

    /**
     * Sets serial_number
     *
     * @param string $serial_number serial_number
     *
     * @return $this
     */
    public function setSerialNumber($serial_number)
    {
        $this->container['serial_number'] = $serial_number;

        return $this;
    }

    /**
     * Gets description
     *
     * @return string
     */
    public function getDescription()
    {
        return $this->container['description'];
    }

    /**
     * Sets description
     *
     * @param string $description description
     *
     * @return $this
     */
    public function setDescription($description)
    {
        $this->container['description'] = $description;

        return $this;
    }

    /**
     * Gets brand_name
     *
     * @return string
     */
    public function getBrandName()
    {
        return $this->container['brand_name'];
    }

    /**
     * Sets brand_name
     *
     * @param string $brand_name brand_name
     *
     * @return $this
     */
    public function setBrandName($brand_name)
    {
        $this->container['brand_name'] = $brand_name;

        return $this;
    }

    /**
     * Gets model_name
     *
     * @return string
     */
    public function getModelName()
    {
        return $this->container['model_name'];
    }

    /**
     * Sets model_name
     *
     * @param string $model_name model_name
     *
     * @return $this
     */
    public function setModelName($model_name)
    {
        $this->container['model_name'] = $model_name;

        return $this;
    }

    /**
     * Gets pack_quantity
     *
     * @return double
     */
    public function getPackQuantity()
    {
        return $this->container['pack_quantity'];
    }

    /**
     * Sets pack_quantity
     *
     * @param double $pack_quantity pack_quantity
     *
     * @return $this
     */
    public function setPackQuantity($pack_quantity)
    {
        $this->container['pack_quantity'] = $pack_quantity;

        return $this;
    }

    /**
     * Gets pack_unit_of_measure
     *
     * @return string
     */
    public function getPackUnitOfMeasure()
    {
        return $this->container['pack_unit_of_measure'];
    }

    /**
     * Sets pack_unit_of_measure
     *
     * @param string $pack_unit_of_measure pack_unit_of_measure
     *
     * @return $this
     */
    public function setPackUnitOfMeasure($pack_unit_of_measure)
    {
        $this->container['pack_unit_of_measure'] = $pack_unit_of_measure;

        return $this;
    }

    /**
     * Gets units_per_package
     *
     * @return double
     */
    public function getUnitsPerPackage()
    {
        return $this->container['units_per_package'];
    }

    /**
     * Sets units_per_package
     *
     * @param double $units_per_package units_per_package
     *
     * @return $this
     */
    public function setUnitsPerPackage($units_per_package)
    {
        $this->container['units_per_package'] = $units_per_package;

        return $this;
    }

    /**
     * Gets dimensions
     *
     * @return \Swagger\Client\Model\Dimensions
     */
    public function getDimensions()
    {
        return $this->container['dimensions'];
    }

    /**
     * Sets dimensions
     *
     * @param \Swagger\Client\Model\Dimensions $dimensions dimensions
     *
     * @return $this
     */
    public function setDimensions($dimensions)
    {
        $this->container['dimensions'] = $dimensions;

        return $this;
    }

    /**
     * Gets lot_number
     *
     * @return string
     */
    public function getLotNumber()
    {
        return $this->container['lot_number'];
    }

    /**
     * Sets lot_number
     *
     * @param string $lot_number lot_number
     *
     * @return $this
     */
    public function setLotNumber($lot_number)
    {
        $this->container['lot_number'] = $lot_number;

        return $this;
    }

    /**
     * Gets expiry_date
     *
     * @return \DateTime
     */
    public function getExpiryDate()
    {
        return $this->container['expiry_date'];
    }

    /**
     * Sets expiry_date
     *
     * @param \DateTime $expiry_date expiry_date
     *
     * @return $this
     */
    public function setExpiryDate($expiry_date)
    {
        $this->container['expiry_date'] = $expiry_date;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


