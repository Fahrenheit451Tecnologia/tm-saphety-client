<?php
/**
 * SerieDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * SerieDTO Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class SerieDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'SerieDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'company_id' => 'string',
        'name' => 'string',
        'authorization_number' => 'string',
        'prefix' => 'string',
        'valid_from' => '\DateTime',
        'valid_to' => '\DateTime',
        'start_value' => 'int',
        'end_value' => 'int',
        'efective_value' => 'int',
        'document_type' => 'string',
        'serie_type' => 'string',
        'issue_mode' => 'string',
        'technical_key' => 'string',
        'status' => 'string',
        'auto_increment' => 'string',
        'external_key' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'company_id' => 'uuid',
        'name' => null,
        'authorization_number' => null,
        'prefix' => null,
        'valid_from' => 'date-time',
        'valid_to' => 'date-time',
        'start_value' => 'int64',
        'end_value' => 'int64',
        'efective_value' => 'int64',
        'document_type' => null,
        'serie_type' => null,
        'issue_mode' => null,
        'technical_key' => null,
        'status' => null,
        'auto_increment' => null,
        'external_key' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'company_id' => 'CompanyId',
        'name' => 'Name',
        'authorization_number' => 'AuthorizationNumber',
        'prefix' => 'Prefix',
        'valid_from' => 'ValidFrom',
        'valid_to' => 'ValidTo',
        'start_value' => 'StartValue',
        'end_value' => 'EndValue',
        'efective_value' => 'EfectiveValue',
        'document_type' => 'DocumentType',
        'serie_type' => 'SerieType',
        'issue_mode' => 'IssueMode',
        'technical_key' => 'TechnicalKey',
        'status' => 'Status',
        'auto_increment' => 'AutoIncrement',
        'external_key' => 'ExternalKey'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'company_id' => 'setCompanyId',
        'name' => 'setName',
        'authorization_number' => 'setAuthorizationNumber',
        'prefix' => 'setPrefix',
        'valid_from' => 'setValidFrom',
        'valid_to' => 'setValidTo',
        'start_value' => 'setStartValue',
        'end_value' => 'setEndValue',
        'efective_value' => 'setEfectiveValue',
        'document_type' => 'setDocumentType',
        'serie_type' => 'setSerieType',
        'issue_mode' => 'setIssueMode',
        'technical_key' => 'setTechnicalKey',
        'status' => 'setStatus',
        'auto_increment' => 'setAutoIncrement',
        'external_key' => 'setExternalKey'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'company_id' => 'getCompanyId',
        'name' => 'getName',
        'authorization_number' => 'getAuthorizationNumber',
        'prefix' => 'getPrefix',
        'valid_from' => 'getValidFrom',
        'valid_to' => 'getValidTo',
        'start_value' => 'getStartValue',
        'end_value' => 'getEndValue',
        'efective_value' => 'getEfectiveValue',
        'document_type' => 'getDocumentType',
        'serie_type' => 'getSerieType',
        'issue_mode' => 'getIssueMode',
        'technical_key' => 'getTechnicalKey',
        'status' => 'getStatus',
        'auto_increment' => 'getAutoIncrement',
        'external_key' => 'getExternalKey'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['company_id'] = isset($data['company_id']) ? $data['company_id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['authorization_number'] = isset($data['authorization_number']) ? $data['authorization_number'] : null;
        $this->container['prefix'] = isset($data['prefix']) ? $data['prefix'] : null;
        $this->container['valid_from'] = isset($data['valid_from']) ? $data['valid_from'] : null;
        $this->container['valid_to'] = isset($data['valid_to']) ? $data['valid_to'] : null;
        $this->container['start_value'] = isset($data['start_value']) ? $data['start_value'] : null;
        $this->container['end_value'] = isset($data['end_value']) ? $data['end_value'] : null;
        $this->container['efective_value'] = isset($data['efective_value']) ? $data['efective_value'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['serie_type'] = isset($data['serie_type']) ? $data['serie_type'] : null;
        $this->container['issue_mode'] = isset($data['issue_mode']) ? $data['issue_mode'] : null;
        $this->container['technical_key'] = isset($data['technical_key']) ? $data['technical_key'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['auto_increment'] = isset($data['auto_increment']) ? $data['auto_increment'] : null;
        $this->container['external_key'] = isset($data['external_key']) ? $data['external_key'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     * @param string $id Serie Id
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets company_id
     * @return string
     */
    public function getCompanyId()
    {
        return $this->container['company_id'];
    }

    /**
     * Sets company_id
     * @param string $company_id Company id for the serie
     * @return $this
     */
    public function setCompanyId($company_id)
    {
        $this->container['company_id'] = $company_id;

        return $this;
    }

    /**
     * Gets name
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     * @param string $name Serie name
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets authorization_number
     * @return string
     */
    public function getAuthorizationNumber()
    {
        return $this->container['authorization_number'];
    }

    /**
     * Sets authorization_number
     * @param string $authorization_number Serie authorization number (assigned by DIAN)
     * @return $this
     */
    public function setAuthorizationNumber($authorization_number)
    {
        $this->container['authorization_number'] = $authorization_number;

        return $this;
    }

    /**
     * Gets prefix
     * @return string
     */
    public function getPrefix()
    {
        return $this->container['prefix'];
    }

    /**
     * Sets prefix
     * @param string $prefix Serie prefix
     * @return $this
     */
    public function setPrefix($prefix)
    {
        $this->container['prefix'] = $prefix;

        return $this;
    }

    /**
     * Gets valid_from
     * @return \DateTime
     */
    public function getValidFrom()
    {
        return $this->container['valid_from'];
    }

    /**
     * Sets valid_from
     * @param \DateTime $valid_from Serie is valid after this date, inclusive
     * @return $this
     */
    public function setValidFrom($valid_from)
    {
        $this->container['valid_from'] = $valid_from;

        return $this;
    }

    /**
     * Gets valid_to
     * @return \DateTime
     */
    public function getValidTo()
    {
        return $this->container['valid_to'];
    }

    /**
     * Sets valid_to
     * @param \DateTime $valid_to Serie is valid until this date, inclusive
     * @return $this
     */
    public function setValidTo($valid_to)
    {
        $this->container['valid_to'] = $valid_to;

        return $this;
    }

    /**
     * Gets start_value
     * @return int
     */
    public function getStartValue()
    {
        return $this->container['start_value'];
    }

    /**
     * Sets start_value
     * @param int $start_value Serie first value
     * @return $this
     */
    public function setStartValue($start_value)
    {
        $this->container['start_value'] = $start_value;

        return $this;
    }

    /**
     * Gets end_value
     * @return int
     */
    public function getEndValue()
    {
        return $this->container['end_value'];
    }

    /**
     * Sets end_value
     * @param int $end_value Serie last value
     * @return $this
     */
    public function setEndValue($end_value)
    {
        $this->container['end_value'] = $end_value;

        return $this;
    }

    /**
     * Gets efective_value
     * @return int
     */
    public function getEfectiveValue()
    {
        return $this->container['efective_value'];
    }

    /**
     * Sets efective_value
     * @param int $efective_value The first created document will start with this especific value
     * @return $this
     */
    public function setEfectiveValue($efective_value)
    {
        $this->container['efective_value'] = $efective_value;

        return $this;
    }

    /**
     * Gets document_type
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     * @param string $document_type Document type of the serie [SalesInvoice, CreditNote, DebitNote, ...]. See DataElements.DocumentType
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets serie_type
     * @return string
     */
    public function getSerieType()
    {
        return $this->container['serie_type'];
    }

    /**
     * Sets serie_type
     * @param string $serie_type [Range, Unlimited, ...]. See DataElements.SerieType
     * @return $this
     */
    public function setSerieType($serie_type)
    {
        $this->container['serie_type'] = $serie_type;

        return $this;
    }

    /**
     * Gets issue_mode
     * @return string
     */
    public function getIssueMode()
    {
        return $this->container['issue_mode'];
    }

    /**
     * Sets issue_mode
     * @param string $issue_mode [Electronic, ByComputer, ...]. See DataElements.IssueMode
     * @return $this
     */
    public function setIssueMode($issue_mode)
    {
        $this->container['issue_mode'] = $issue_mode;

        return $this;
    }

    /**
     * Gets technical_key
     * @return string
     */
    public function getTechnicalKey()
    {
        return $this->container['technical_key'];
    }

    /**
     * Sets technical_key
     * @param string $technical_key Serie technical key. (assigned by DIAN)
     * @return $this
     */
    public function setTechnicalKey($technical_key)
    {
        $this->container['technical_key'] = $technical_key;

        return $this;
    }

    /**
     * Gets status
     * @return string
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     * @param string $status Serie status. [Active, Inactive, ...]. See DataElements.SerieStatus
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets auto_increment
     * @return string
     */
    public function getAutoIncrement()
    {
        return $this->container['auto_increment'];
    }

    /**
     * Sets auto_increment
     * @param string $auto_increment If false, the serie number is not managed by application.  The document number will not be assigned by this software.  However, the serie range, prefix and range will be validated  Default is true.
     * @return $this
     */
    public function setAutoIncrement($auto_increment)
    {
        $this->container['auto_increment'] = $auto_increment;

        return $this;
    }

    /**
     * Gets external_key
     * @return string
     */
    public function getExternalKey()
    {
        return $this->container['external_key'];
    }

    /**
     * Sets external_key
     * @param string $external_key Serie external key
     * @return $this
     */
    public function setExternalKey($external_key)
    {
        $this->container['external_key'] = $external_key;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


