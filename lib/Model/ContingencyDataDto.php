<?php
/**
 * ContingencyDataDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * ContingencyDataDto Class Doc Comment
 *
 * @category Class
 * @description Contingency data
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class ContingencyDataDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'ContingencyDataDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'period_start' => 'string',
        'period_end' => 'string',
        'contingency_id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'period_start' => null,
        'period_end' => null,
        'contingency_id' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'period_start' => 'PeriodStart',
        'period_end' => 'PeriodEnd',
        'contingency_id' => 'ContingencyId'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'period_start' => 'setPeriodStart',
        'period_end' => 'setPeriodEnd',
        'contingency_id' => 'setContingencyId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'period_start' => 'getPeriodStart',
        'period_end' => 'getPeriodEnd',
        'contingency_id' => 'getContingencyId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['period_start'] = isset($data['period_start']) ? $data['period_start'] : null;
        $this->container['period_end'] = isset($data['period_end']) ? $data['period_end'] : null;
        $this->container['contingency_id'] = isset($data['contingency_id']) ? $data['contingency_id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['period_start'] === null) {
            $invalidProperties[] = "'period_start' can't be null";
        }
        if ($this->container['period_end'] === null) {
            $invalidProperties[] = "'period_end' can't be null";
        }
        if ($this->container['contingency_id'] === null) {
            $invalidProperties[] = "'contingency_id' can't be null";
        }
        if ((strlen($this->container['contingency_id']) > 200)) {
            $invalidProperties[] = "invalid value for 'contingency_id', the character length must be smaller than or equal to 200.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['period_start'] === null) {
            return false;
        }
        if ($this->container['period_end'] === null) {
            return false;
        }
        if ($this->container['contingency_id'] === null) {
            return false;
        }
        if (strlen($this->container['contingency_id']) > 200) {
            return false;
        }
        return true;
    }


    /**
     * Gets period_start
     *
     * @return string
     */
    public function getPeriodStart()
    {
        return $this->container['period_start'];
    }

    /**
     * Sets period_start
     *
     * @param string $period_start Contingency period start date time
     *
     * @return $this
     */
    public function setPeriodStart($period_start)
    {
        $this->container['period_start'] = $period_start;

        return $this;
    }

    /**
     * Gets period_end
     *
     * @return string
     */
    public function getPeriodEnd()
    {
        return $this->container['period_end'];
    }

    /**
     * Sets period_end
     *
     * @param string $period_end Contingency period end date time
     *
     * @return $this
     */
    public function setPeriodEnd($period_end)
    {
        $this->container['period_end'] = $period_end;

        return $this;
    }

    /**
     * Gets contingency_id
     *
     * @return string
     */
    public function getContingencyId()
    {
        return $this->container['contingency_id'];
    }

    /**
     * Sets contingency_id
     *
     * @param string $contingency_id Contingency identification (identificador universal del evento contingente; Anexo-3); MaxLength: 200
     *
     * @return $this
     */
    public function setContingencyId($contingency_id)
    {
        if ((strlen($contingency_id) > 200)) {
            throw new \InvalidArgumentException('invalid length for $contingency_id when calling ContingencyDataDto., must be smaller than or equal to 200.');
        }

        $this->container['contingency_id'] = $contingency_id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


