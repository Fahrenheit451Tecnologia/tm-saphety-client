<?php
/**
 * AuditEntryDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AuditEntryDTO Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AuditEntryDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AuditEntryDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'virtual_operator_id' => 'string',
        'username' => 'string',
        'user_company_code' => 'string',
        'input_data' => 'string',
        'result_status' => 'string',
        'event_type' => 'string',
        'exception' => 'string',
        'requester_ip' => 'string',
        'creation_date' => '\DateTime',
        'properties' => '\Swagger\Client\Model\AuditPropertyDTO[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'virtual_operator_id' => 'uuid',
        'username' => null,
        'user_company_code' => null,
        'input_data' => null,
        'result_status' => null,
        'event_type' => null,
        'exception' => null,
        'requester_ip' => null,
        'creation_date' => 'date-time',
        'properties' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'virtual_operator_id' => 'VirtualOperatorId',
        'username' => 'Username',
        'user_company_code' => 'UserCompanyCode',
        'input_data' => 'InputData',
        'result_status' => 'ResultStatus',
        'event_type' => 'EventType',
        'exception' => 'Exception',
        'requester_ip' => 'RequesterIp',
        'creation_date' => 'CreationDate',
        'properties' => 'Properties'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'virtual_operator_id' => 'setVirtualOperatorId',
        'username' => 'setUsername',
        'user_company_code' => 'setUserCompanyCode',
        'input_data' => 'setInputData',
        'result_status' => 'setResultStatus',
        'event_type' => 'setEventType',
        'exception' => 'setException',
        'requester_ip' => 'setRequesterIp',
        'creation_date' => 'setCreationDate',
        'properties' => 'setProperties'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'virtual_operator_id' => 'getVirtualOperatorId',
        'username' => 'getUsername',
        'user_company_code' => 'getUserCompanyCode',
        'input_data' => 'getInputData',
        'result_status' => 'getResultStatus',
        'event_type' => 'getEventType',
        'exception' => 'getException',
        'requester_ip' => 'getRequesterIp',
        'creation_date' => 'getCreationDate',
        'properties' => 'getProperties'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['virtual_operator_id'] = isset($data['virtual_operator_id']) ? $data['virtual_operator_id'] : null;
        $this->container['username'] = isset($data['username']) ? $data['username'] : null;
        $this->container['user_company_code'] = isset($data['user_company_code']) ? $data['user_company_code'] : null;
        $this->container['input_data'] = isset($data['input_data']) ? $data['input_data'] : null;
        $this->container['result_status'] = isset($data['result_status']) ? $data['result_status'] : null;
        $this->container['event_type'] = isset($data['event_type']) ? $data['event_type'] : null;
        $this->container['exception'] = isset($data['exception']) ? $data['exception'] : null;
        $this->container['requester_ip'] = isset($data['requester_ip']) ? $data['requester_ip'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['properties'] = isset($data['properties']) ? $data['properties'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets virtual_operator_id
     *
     * @return string
     */
    public function getVirtualOperatorId()
    {
        return $this->container['virtual_operator_id'];
    }

    /**
     * Sets virtual_operator_id
     *
     * @param string $virtual_operator_id virtual_operator_id
     *
     * @return $this
     */
    public function setVirtualOperatorId($virtual_operator_id)
    {
        $this->container['virtual_operator_id'] = $virtual_operator_id;

        return $this;
    }

    /**
     * Gets username
     *
     * @return string
     */
    public function getUsername()
    {
        return $this->container['username'];
    }

    /**
     * Sets username
     *
     * @param string $username username
     *
     * @return $this
     */
    public function setUsername($username)
    {
        $this->container['username'] = $username;

        return $this;
    }

    /**
     * Gets user_company_code
     *
     * @return string
     */
    public function getUserCompanyCode()
    {
        return $this->container['user_company_code'];
    }

    /**
     * Sets user_company_code
     *
     * @param string $user_company_code user_company_code
     *
     * @return $this
     */
    public function setUserCompanyCode($user_company_code)
    {
        $this->container['user_company_code'] = $user_company_code;

        return $this;
    }

    /**
     * Gets input_data
     *
     * @return string
     */
    public function getInputData()
    {
        return $this->container['input_data'];
    }

    /**
     * Sets input_data
     *
     * @param string $input_data input_data
     *
     * @return $this
     */
    public function setInputData($input_data)
    {
        $this->container['input_data'] = $input_data;

        return $this;
    }

    /**
     * Gets result_status
     *
     * @return string
     */
    public function getResultStatus()
    {
        return $this->container['result_status'];
    }

    /**
     * Sets result_status
     *
     * @param string $result_status result_status
     *
     * @return $this
     */
    public function setResultStatus($result_status)
    {
        $this->container['result_status'] = $result_status;

        return $this;
    }

    /**
     * Gets event_type
     *
     * @return string
     */
    public function getEventType()
    {
        return $this->container['event_type'];
    }

    /**
     * Sets event_type
     *
     * @param string $event_type event_type
     *
     * @return $this
     */
    public function setEventType($event_type)
    {
        $this->container['event_type'] = $event_type;

        return $this;
    }

    /**
     * Gets exception
     *
     * @return string
     */
    public function getException()
    {
        return $this->container['exception'];
    }

    /**
     * Sets exception
     *
     * @param string $exception exception
     *
     * @return $this
     */
    public function setException($exception)
    {
        $this->container['exception'] = $exception;

        return $this;
    }

    /**
     * Gets requester_ip
     *
     * @return string
     */
    public function getRequesterIp()
    {
        return $this->container['requester_ip'];
    }

    /**
     * Sets requester_ip
     *
     * @param string $requester_ip requester_ip
     *
     * @return $this
     */
    public function setRequesterIp($requester_ip)
    {
        $this->container['requester_ip'] = $requester_ip;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets properties
     *
     * @return \Swagger\Client\Model\AuditPropertyDTO[]
     */
    public function getProperties()
    {
        return $this->container['properties'];
    }

    /**
     * Sets properties
     *
     * @param \Swagger\Client\Model\AuditPropertyDTO[] $properties properties
     *
     * @return $this
     */
    public function setProperties($properties)
    {
        $this->container['properties'] = $properties;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


