<?php
/**
 * DocumentReferenceDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DocumentReferenceDTO Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DocumentReferenceDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DocumentReferenceDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'document_referred' => 'string',
        'issue_date' => '\DateTime',
        'type' => 'string',
        'other_reference_type_id' => 'string',
        'other_reference_type_description' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'document_referred' => null,
        'issue_date' => 'date-time',
        'type' => null,
        'other_reference_type_id' => null,
        'other_reference_type_description' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'document_referred' => 'DocumentReferred',
        'issue_date' => 'IssueDate',
        'type' => 'Type',
        'other_reference_type_id' => 'OtherReferenceTypeId',
        'other_reference_type_description' => 'OtherReferenceTypeDescription'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'document_referred' => 'setDocumentReferred',
        'issue_date' => 'setIssueDate',
        'type' => 'setType',
        'other_reference_type_id' => 'setOtherReferenceTypeId',
        'other_reference_type_description' => 'setOtherReferenceTypeDescription'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'document_referred' => 'getDocumentReferred',
        'issue_date' => 'getIssueDate',
        'type' => 'getType',
        'other_reference_type_id' => 'getOtherReferenceTypeId',
        'other_reference_type_description' => 'getOtherReferenceTypeDescription'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    const TYPE_INVOICE_REFERENCE = 'InvoiceReference';
    const TYPE_ORDER_REFERENCE = 'OrderReference';
    const TYPE_DESPATCH_REFERENCE = 'DespatchReference';
    const TYPE_RECEIPT_REFERENCE = 'ReceiptReference';
    const TYPE_CREDIT_REFERENCE = 'CreditReference';
    const TYPE_DEBIT_REFERENCE = 'DebitReference';
    const TYPE_OTHER_REFERENCE = 'OtherReference';
    

    
    /**
     * Gets allowable values of the enum
     * @return string[]
     */
    public function getTypeAllowableValues()
    {
        return [
            self::TYPE_INVOICE_REFERENCE,
            self::TYPE_ORDER_REFERENCE,
            self::TYPE_DESPATCH_REFERENCE,
            self::TYPE_RECEIPT_REFERENCE,
            self::TYPE_CREDIT_REFERENCE,
            self::TYPE_DEBIT_REFERENCE,
            self::TYPE_OTHER_REFERENCE,
        ];
    }
    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['document_referred'] = isset($data['document_referred']) ? $data['document_referred'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['type'] = isset($data['type']) ? $data['type'] : null;
        $this->container['other_reference_type_id'] = isset($data['other_reference_type_id']) ? $data['other_reference_type_id'] : null;
        $this->container['other_reference_type_description'] = isset($data['other_reference_type_description']) ? $data['other_reference_type_description'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['document_referred'] === null) {
            $invalid_properties[] = "'document_referred' can't be null";
        }
        if ($this->container['issue_date'] === null) {
            $invalid_properties[] = "'issue_date' can't be null";
        }
        if ($this->container['type'] === null) {
            $invalid_properties[] = "'type' can't be null";
        }
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            $invalid_properties[] = sprintf(
                "invalid value for 'type', must be one of '%s'",
                implode("', '", $allowed_values)
            );
        }

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['document_referred'] === null) {
            return false;
        }
        if ($this->container['issue_date'] === null) {
            return false;
        }
        if ($this->container['type'] === null) {
            return false;
        }
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($this->container['type'], $allowed_values)) {
            return false;
        }
        return true;
    }


    /**
     * Gets document_referred
     * @return string
     */
    public function getDocumentReferred()
    {
        return $this->container['document_referred'];
    }

    /**
     * Sets document_referred
     * @param string $document_referred Document number referred. Example: PRUE98745631
     * @return $this
     */
    public function setDocumentReferred($document_referred)
    {
        $this->container['document_referred'] = $document_referred;

        return $this;
    }

    /**
     * Gets issue_date
     * @return \DateTime
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     * @param \DateTime $issue_date Date when refered to invoice
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets type
     * @return string
     */
    public function getType()
    {
        return $this->container['type'];
    }

    /**
     * Sets type
     * @param string $type Type of document reference[InvoiceReference,OrderReference,DespatchReference,ReceiptReference, CreditReference, DebitReference , OtherReference
     * @return $this
     */
    public function setType($type)
    {
        $allowed_values = $this->getTypeAllowableValues();
        if (!in_array($type, $allowed_values)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'type', must be one of '%s'",
                    implode("', '", $allowed_values)
                )
            );
        }
        $this->container['type'] = $type;

        return $this;
    }

    /**
     * Gets other_reference_type_id
     * @return string
     */
    public function getOtherReferenceTypeId()
    {
        return $this->container['other_reference_type_id'];
    }

    /**
     * Sets other_reference_type_id
     * @param string $other_reference_type_id If Type=OtherReference use this field to set the custom type ID
     * @return $this
     */
    public function setOtherReferenceTypeId($other_reference_type_id)
    {
        $this->container['other_reference_type_id'] = $other_reference_type_id;

        return $this;
    }

    /**
     * Gets other_reference_type_description
     * @return string
     */
    public function getOtherReferenceTypeDescription()
    {
        return $this->container['other_reference_type_description'];
    }

    /**
     * Sets other_reference_type_description
     * @param string $other_reference_type_description If Type=OtherReference use this field to set the custom description of the reference
     * @return $this
     */
    public function setOtherReferenceTypeDescription($other_reference_type_description)
    {
        $this->container['other_reference_type_description'] = $other_reference_type_description;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


