<?php
/**
 * Issuer
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * Issuer Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class Issuer implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'Issuer';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'owner_company_id' => 'string',
        'owner_company' => '\Swagger\Client\Model\Company',
        'documents' => '\Swagger\Client\Model\InboundDocument[]',
        'settings' => '\Swagger\Client\Model\IssuerSettings',
        'integration_settings' => '\Swagger\Client\Model\IssuerIntegrationSettings[]',
        'gln_code' => 'string',
        'telephone' => 'string',
        'telefax' => 'string',
        'legal_type' => 'string',
        'identification' => '\Swagger\Client\Model\Identification',
        'website_url' => 'string',
        'email' => 'string',
        'name' => 'string',
        'address' => '\Swagger\Client\Model\Address',
        'person' => '\Swagger\Client\Model\Person',
        'industry' => 'string',
        'language' => '\Swagger\Client\Model\Language',
        'tax_scheme' => 'string',
        'creation_date' => '\DateTime',
        'last_update_date' => '\DateTime',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'owner_company_id' => 'uuid',
        'owner_company' => null,
        'documents' => null,
        'settings' => null,
        'integration_settings' => null,
        'gln_code' => null,
        'telephone' => null,
        'telefax' => null,
        'legal_type' => null,
        'identification' => null,
        'website_url' => null,
        'email' => null,
        'name' => null,
        'address' => null,
        'person' => null,
        'industry' => null,
        'language' => null,
        'tax_scheme' => null,
        'creation_date' => 'date-time',
        'last_update_date' => 'date-time',
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'owner_company_id' => 'OwnerCompanyId',
        'owner_company' => 'OwnerCompany',
        'documents' => 'Documents',
        'settings' => 'Settings',
        'integration_settings' => 'IntegrationSettings',
        'gln_code' => 'GlnCode',
        'telephone' => 'Telephone',
        'telefax' => 'Telefax',
        'legal_type' => 'LegalType',
        'identification' => 'Identification',
        'website_url' => 'WebsiteUrl',
        'email' => 'Email',
        'name' => 'Name',
        'address' => 'Address',
        'person' => 'Person',
        'industry' => 'Industry',
        'language' => 'Language',
        'tax_scheme' => 'TaxScheme',
        'creation_date' => 'CreationDate',
        'last_update_date' => 'LastUpdateDate',
        'id' => 'Id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'owner_company_id' => 'setOwnerCompanyId',
        'owner_company' => 'setOwnerCompany',
        'documents' => 'setDocuments',
        'settings' => 'setSettings',
        'integration_settings' => 'setIntegrationSettings',
        'gln_code' => 'setGlnCode',
        'telephone' => 'setTelephone',
        'telefax' => 'setTelefax',
        'legal_type' => 'setLegalType',
        'identification' => 'setIdentification',
        'website_url' => 'setWebsiteUrl',
        'email' => 'setEmail',
        'name' => 'setName',
        'address' => 'setAddress',
        'person' => 'setPerson',
        'industry' => 'setIndustry',
        'language' => 'setLanguage',
        'tax_scheme' => 'setTaxScheme',
        'creation_date' => 'setCreationDate',
        'last_update_date' => 'setLastUpdateDate',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'owner_company_id' => 'getOwnerCompanyId',
        'owner_company' => 'getOwnerCompany',
        'documents' => 'getDocuments',
        'settings' => 'getSettings',
        'integration_settings' => 'getIntegrationSettings',
        'gln_code' => 'getGlnCode',
        'telephone' => 'getTelephone',
        'telefax' => 'getTelefax',
        'legal_type' => 'getLegalType',
        'identification' => 'getIdentification',
        'website_url' => 'getWebsiteUrl',
        'email' => 'getEmail',
        'name' => 'getName',
        'address' => 'getAddress',
        'person' => 'getPerson',
        'industry' => 'getIndustry',
        'language' => 'getLanguage',
        'tax_scheme' => 'getTaxScheme',
        'creation_date' => 'getCreationDate',
        'last_update_date' => 'getLastUpdateDate',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const LEGAL_TYPE_LEGAL = 'Legal';
    const LEGAL_TYPE_NATURAL = 'Natural';
    const TAX_SCHEME_SIMPLEX = 'Simplex';
    const TAX_SCHEME_GENERAL = 'General';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLegalTypeAllowableValues()
    {
        return [
            self::LEGAL_TYPE_LEGAL,
            self::LEGAL_TYPE_NATURAL,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxSchemeAllowableValues()
    {
        return [
            self::TAX_SCHEME_SIMPLEX,
            self::TAX_SCHEME_GENERAL,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['owner_company_id'] = isset($data['owner_company_id']) ? $data['owner_company_id'] : null;
        $this->container['owner_company'] = isset($data['owner_company']) ? $data['owner_company'] : null;
        $this->container['documents'] = isset($data['documents']) ? $data['documents'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['integration_settings'] = isset($data['integration_settings']) ? $data['integration_settings'] : null;
        $this->container['gln_code'] = isset($data['gln_code']) ? $data['gln_code'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['telefax'] = isset($data['telefax']) ? $data['telefax'] : null;
        $this->container['legal_type'] = isset($data['legal_type']) ? $data['legal_type'] : null;
        $this->container['identification'] = isset($data['identification']) ? $data['identification'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['language'] = isset($data['language']) ? $data['language'] : null;
        $this->container['tax_scheme'] = isset($data['tax_scheme']) ? $data['tax_scheme'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['last_update_date'] = isset($data['last_update_date']) ? $data['last_update_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getLegalTypeAllowableValues();
        if (!in_array($this->container['legal_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'legal_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getTaxSchemeAllowableValues();
        if (!in_array($this->container['tax_scheme'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_scheme', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getLegalTypeAllowableValues();
        if (!in_array($this->container['legal_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getTaxSchemeAllowableValues();
        if (!in_array($this->container['tax_scheme'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets owner_company_id
     *
     * @return string
     */
    public function getOwnerCompanyId()
    {
        return $this->container['owner_company_id'];
    }

    /**
     * Sets owner_company_id
     *
     * @param string $owner_company_id owner_company_id
     *
     * @return $this
     */
    public function setOwnerCompanyId($owner_company_id)
    {
        $this->container['owner_company_id'] = $owner_company_id;

        return $this;
    }

    /**
     * Gets owner_company
     *
     * @return \Swagger\Client\Model\Company
     */
    public function getOwnerCompany()
    {
        return $this->container['owner_company'];
    }

    /**
     * Sets owner_company
     *
     * @param \Swagger\Client\Model\Company $owner_company owner_company
     *
     * @return $this
     */
    public function setOwnerCompany($owner_company)
    {
        $this->container['owner_company'] = $owner_company;

        return $this;
    }

    /**
     * Gets documents
     *
     * @return \Swagger\Client\Model\InboundDocument[]
     */
    public function getDocuments()
    {
        return $this->container['documents'];
    }

    /**
     * Sets documents
     *
     * @param \Swagger\Client\Model\InboundDocument[] $documents documents
     *
     * @return $this
     */
    public function setDocuments($documents)
    {
        $this->container['documents'] = $documents;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Swagger\Client\Model\IssuerSettings
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Swagger\Client\Model\IssuerSettings $settings settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets integration_settings
     *
     * @return \Swagger\Client\Model\IssuerIntegrationSettings[]
     */
    public function getIntegrationSettings()
    {
        return $this->container['integration_settings'];
    }

    /**
     * Sets integration_settings
     *
     * @param \Swagger\Client\Model\IssuerIntegrationSettings[] $integration_settings integration_settings
     *
     * @return $this
     */
    public function setIntegrationSettings($integration_settings)
    {
        $this->container['integration_settings'] = $integration_settings;

        return $this;
    }

    /**
     * Gets gln_code
     *
     * @return string
     */
    public function getGlnCode()
    {
        return $this->container['gln_code'];
    }

    /**
     * Sets gln_code
     *
     * @param string $gln_code gln_code
     *
     * @return $this
     */
    public function setGlnCode($gln_code)
    {
        $this->container['gln_code'] = $gln_code;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets telefax
     *
     * @return string
     */
    public function getTelefax()
    {
        return $this->container['telefax'];
    }

    /**
     * Sets telefax
     *
     * @param string $telefax telefax
     *
     * @return $this
     */
    public function setTelefax($telefax)
    {
        $this->container['telefax'] = $telefax;

        return $this;
    }

    /**
     * Gets legal_type
     *
     * @return string
     */
    public function getLegalType()
    {
        return $this->container['legal_type'];
    }

    /**
     * Sets legal_type
     *
     * @param string $legal_type legal_type
     *
     * @return $this
     */
    public function setLegalType($legal_type)
    {
        $allowedValues = $this->getLegalTypeAllowableValues();
        if (!is_null($legal_type) && !in_array($legal_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'legal_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['legal_type'] = $legal_type;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return \Swagger\Client\Model\Identification
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param \Swagger\Client\Model\Identification $identification identification
     *
     * @return $this
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url website_url
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\Address
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\Address $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Swagger\Client\Model\Person
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Swagger\Client\Model\Person $person person
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry industry
     *
     * @return $this
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets language
     *
     * @return \Swagger\Client\Model\Language
     */
    public function getLanguage()
    {
        return $this->container['language'];
    }

    /**
     * Sets language
     *
     * @param \Swagger\Client\Model\Language $language language
     *
     * @return $this
     */
    public function setLanguage($language)
    {
        $this->container['language'] = $language;

        return $this;
    }

    /**
     * Gets tax_scheme
     *
     * @return string
     */
    public function getTaxScheme()
    {
        return $this->container['tax_scheme'];
    }

    /**
     * Sets tax_scheme
     *
     * @param string $tax_scheme tax_scheme
     *
     * @return $this
     */
    public function setTaxScheme($tax_scheme)
    {
        $allowedValues = $this->getTaxSchemeAllowableValues();
        if (!is_null($tax_scheme) && !in_array($tax_scheme, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_scheme', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_scheme'] = $tax_scheme;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets last_update_date
     *
     * @return \DateTime
     */
    public function getLastUpdateDate()
    {
        return $this->container['last_update_date'];
    }

    /**
     * Sets last_update_date
     *
     * @param \DateTime $last_update_date last_update_date
     *
     * @return $this
     */
    public function setLastUpdateDate($last_update_date)
    {
        $this->container['last_update_date'] = $last_update_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


