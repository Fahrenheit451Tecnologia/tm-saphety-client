<?php
/**
 * OutboundDocumentAllowanceCharge
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OutboundDocumentAllowanceCharge Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutboundDocumentAllowanceCharge implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OutboundDocumentAllowanceCharge';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'charge_indicator' => 'bool',
        'reason_code' => 'string',
        'reason' => 'string',
        'base_amount' => 'double',
        'amount' => 'double',
        'currency' => 'string',
        'percentage' => 'int',
        'sequence_indicator' => 'int',
        'document_id' => 'string',
        'line_id' => 'string',
        'document' => '\Swagger\Client\Model\OutboundDocument',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'charge_indicator' => null,
        'reason_code' => null,
        'reason' => null,
        'base_amount' => 'double',
        'amount' => 'double',
        'currency' => null,
        'percentage' => 'int32',
        'sequence_indicator' => 'int32',
        'document_id' => 'uuid',
        'line_id' => 'uuid',
        'document' => null,
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'charge_indicator' => 'ChargeIndicator',
        'reason_code' => 'ReasonCode',
        'reason' => 'Reason',
        'base_amount' => 'BaseAmount',
        'amount' => 'Amount',
        'currency' => 'Currency',
        'percentage' => 'Percentage',
        'sequence_indicator' => 'SequenceIndicator',
        'document_id' => 'DocumentId',
        'line_id' => 'LineId',
        'document' => 'Document',
        'id' => 'Id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'charge_indicator' => 'setChargeIndicator',
        'reason_code' => 'setReasonCode',
        'reason' => 'setReason',
        'base_amount' => 'setBaseAmount',
        'amount' => 'setAmount',
        'currency' => 'setCurrency',
        'percentage' => 'setPercentage',
        'sequence_indicator' => 'setSequenceIndicator',
        'document_id' => 'setDocumentId',
        'line_id' => 'setLineId',
        'document' => 'setDocument',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'charge_indicator' => 'getChargeIndicator',
        'reason_code' => 'getReasonCode',
        'reason' => 'getReason',
        'base_amount' => 'getBaseAmount',
        'amount' => 'getAmount',
        'currency' => 'getCurrency',
        'percentage' => 'getPercentage',
        'sequence_indicator' => 'getSequenceIndicator',
        'document_id' => 'getDocumentId',
        'line_id' => 'getLineId',
        'document' => 'getDocument',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REASON_CODE_AGREED_SETTLEMENT = 'AgreedSettlement';
    const REASON_CODE_BELOW_SPECIFICATION_GOODS = 'BelowSpecificationGoods';
    const REASON_CODE_DAMAGED_GOODS = 'DamagedGoods';
    const REASON_CODE_SHORT_DELIVERY = 'ShortDelivery';
    const REASON_CODE_PRICE_QUERY = 'PriceQuery';
    const REASON_CODE_PROOF_OF_DELIVERY_REQUIRED = 'ProofOfDeliveryRequired';
    const REASON_CODE_PAYMENT_ON_ACCOUNT = 'PaymentOnAccount';
    const REASON_CODE_RETURNABLE_CONTAINER_CHARGE_INCLUDED = 'ReturnableContainerChargeIncluded';
    const REASON_CODE_INVOICE_ERROR = 'InvoiceError';
    const REASON_CODE_COSTS_FOR_DRAFT = 'CostsForDraft';
    const REASON_CODE_BANK_CHARGES = 'BankCharges';
    const REASON_CODE_AGENT_COMMISSION = 'AgentCommission';
    const REASON_CODE_COUNTER_CLAIM = 'CounterClaim';
    const REASON_CODE_WRONG_DELIVERY = 'WrongDelivery';
    const REASON_CODE_GOODS_RETURNED_TO_AGENT = 'GoodsReturnedToAgent';
    const REASON_CODE_GOODS_PARTLY_RETURNED = 'GoodsPartlyReturned';
    const REASON_CODE_TRANSPORT_DAMAGE = 'TransportDamage';
    const REASON_CODE_GOODS_ON_CONSIGNMENT = 'GoodsOnConsignment';
    const REASON_CODE_TRADE_DISCOUNT = 'TradeDiscount';
    const REASON_CODE_DEDUCTION_FOR_LATE_DELIVERY = 'DeductionForLateDelivery';
    const REASON_CODE_ADVERTISING_COSTS = 'AdvertisingCosts';
    const REASON_CODE_CUSTOMS_DUTIES = 'CustomsDuties';
    const REASON_CODE_TELEPHONE_AND_POSTAL_COSTS = 'TelephoneAndPostalCosts';
    const REASON_CODE_REPAIR_COSTS = 'RepairCosts';
    const REASON_CODE_ATTORNEY_FEES = 'AttorneyFees';
    const REASON_CODE_TAXES = 'Taxes';
    const REASON_CODE_RECLAIMED_DEDUCTION = 'ReclaimedDeduction';
    const REASON_CODE_SEE_SEPARATE_ADVICE = 'SeeSeparateAdvice';
    const REASON_CODE_BUYER_REFUSED_TO_TAKE_DELIVERY = 'BuyerRefusedToTakeDelivery';
    const REASON_CODE_DIRECT_PAYMENT_TO_SELLER = 'DirectPaymentToSeller';
    const REASON_CODE_BUYER_DISAGREES_WITH_DUE_DATE = 'BuyerDisagreesWithDueDate';
    const REASON_CODE_GOODS_NOT_DELIVERED = 'GoodsNotDelivered';
    const REASON_CODE_LATE_DELIVERY = 'LateDelivery';
    const REASON_CODE_QUOTED_AS_PAID_TO_YOU = 'QuotedAsPaidToYou';
    const REASON_CODE_GOODS_RETURNED = 'GoodsReturned';
    const REASON_CODE_INVOICE_NOT_RECEIVED = 'InvoiceNotReceived';
    const REASON_CODE_CREDIT_NOTE_TO_DEBTOR_NOT_TO_US = 'CreditNoteToDebtorNotToUs';
    const REASON_CODE_DEDUCTED_BONUS = 'DeductedBonus';
    const REASON_CODE_DEDUCTED_DISCOUNT = 'DeductedDiscount';
    const REASON_CODE_DEDUCTED_FREIGHT_COSTS = 'DeductedFreightCosts';
    const REASON_CODE_CREDIT_BALANCE = 'CreditBalance';
    const REASON_CODE_REASON_UNKNOWN = 'ReasonUnknown';
    const REASON_CODE_AWAITING_MESSAGE_FROM_SELLER = 'AwaitingMessageFromSeller';
    const REASON_CODE_DEBIT_NOTE_TO_SELLER = 'DebitNoteToSeller';
    const REASON_CODE_DISCOUNT_BEYOND_TERMS = 'DiscountBeyondTerms';
    const REASON_CODE_SEE_BUYERS_LETTER = 'SeeBuyersLetter';
    const REASON_CODE_ALLOWANCE_CHARGE_ERROR = 'AllowanceChargeError';
    const REASON_CODE_SUBSTITUTE_PRODUCT = 'SubstituteProduct';
    const REASON_CODE_TERMS_OF_SALE_ERROR = 'TermsOfSaleError';
    const REASON_CODE_REQUIRED_DATA_MISSING = 'RequiredDataMissing';
    const REASON_CODE_WRONG_INVOICE = 'WrongInvoice';
    const REASON_CODE_DUPLICATE_INVOICE = 'DuplicateInvoice';
    const REASON_CODE_WEIGHT_ERROR = 'WeightError';
    const REASON_CODE_ADDITIONAL_CHARGE_NOT_AUTHORIZED = 'AdditionalChargeNotAuthorized';
    const REASON_CODE_INCORRECT_DISCOUNT = 'IncorrectDiscount';
    const REASON_CODE_PRICE_CHANGE = 'PriceChange';
    const REASON_CODE_VARIATION = 'Variation';
    const REASON_CODE_CHARGEBACK = 'Chargeback';
    const REASON_CODE_OFFSET = 'Offset';
    const REASON_CODE_INDIRECT_PAYMENT = 'IndirectPayment';
    const REASON_CODE_FINANCIAL_REASSIGNMENT = 'FinancialReassignment';
    const REASON_CODE_REINSTATEMENT_OF_CHARGEBACK_OFFSET = 'ReinstatementOfChargebackOffset';
    const REASON_CODE_EXPECTING_NEW_TERMS = 'ExpectingNewTerms';
    const REASON_CODE_SETTLEMENT_TO_AGENT = 'SettlementToAgent';
    const REASON_CODE_CASH_DISCOUNT = 'CashDiscount';
    const REASON_CODE_DELCREDERE_COSTS = 'DelcredereCosts';
    const REASON_CODE_EARLY_PAYMENT_ALLOWANCE_ADJUSTMENT = 'EarlyPaymentAllowanceAdjustment';
    const REASON_CODE_INCORRECT_DUE_DATE_FOR_MONETARY_AMOUNT = 'IncorrectDueDateForMonetaryAmount';
    const REASON_CODE_WRONG_MONETARY_AMOUNT_RESULTING_FROM_INCORRECT_FREE_GOODS = 'WrongMonetaryAmountResultingFromIncorrectFreeGoods';
    const REASON_CODE_RACK_OR_SHELF_REPLENISHMENT_SERVICE_BY_A_SUPPLIER = 'RackOrShelfReplenishmentServiceByASupplier';
    const REASON_CODE_TEMPORARY_SPECIAL_PROMOTION = 'TemporarySpecialPromotion';
    const REASON_CODE_DIFFERENCE_IN_TAX_RATE = 'DifferenceInTaxRate';
    const REASON_CODE_QUANTITY_DISCOUNT = 'QuantityDiscount';
    const REASON_CODE_PROMOTION_DISCOUNT = 'PromotionDiscount';
    const REASON_CODE_CANCELLATION_DEADLINE_PASSED = 'CancellationDeadlinePassed';
    const REASON_CODE_PRICING_DISCOUNT = 'PricingDiscount';
    const REASON_CODE_VOLUME_DISCOUNT = 'VolumeDiscount';
    const REASON_CODE_SUNDRY_DISCOUNT = 'SundryDiscount';
    const REASON_CODE_CARD_HOLDER_SIGNATURE_MISSING = 'CardHolderSignatureMissing';
    const REASON_CODE_CARD_EXPIRY_DATE_MISSING = 'CardExpiryDateMissing';
    const REASON_CODE_CARD_NUMBER_ERROR = 'CardNumberError';
    const REASON_CODE_CARD_EXPIRED = 'CardExpired';
    const REASON_CODE_TEST_CARD_TRANSACTION = 'TestCardTransaction';
    const REASON_CODE_PERMISSION_LIMIT_EXCEEDED = 'PermissionLimitExceeded';
    const REASON_CODE_WRONG_AUTHORISATION_CODE = 'WrongAuthorisationCode';
    const REASON_CODE_WRONG_AUTHORISED_AMOUNT = 'WrongAuthorisedAmount';
    const REASON_CODE_AUTHORISATION_FAILED = 'AuthorisationFailed';
    const REASON_CODE_CARD_ACCEPTOR_DATA_ERROR = 'CardAcceptorDataError';
    const REASON_CODE_MUTUALLY_DEFINED = 'MutuallyDefined';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getReasonCodeAllowableValues()
    {
        return [
            self::REASON_CODE_AGREED_SETTLEMENT,
            self::REASON_CODE_BELOW_SPECIFICATION_GOODS,
            self::REASON_CODE_DAMAGED_GOODS,
            self::REASON_CODE_SHORT_DELIVERY,
            self::REASON_CODE_PRICE_QUERY,
            self::REASON_CODE_PROOF_OF_DELIVERY_REQUIRED,
            self::REASON_CODE_PAYMENT_ON_ACCOUNT,
            self::REASON_CODE_RETURNABLE_CONTAINER_CHARGE_INCLUDED,
            self::REASON_CODE_INVOICE_ERROR,
            self::REASON_CODE_COSTS_FOR_DRAFT,
            self::REASON_CODE_BANK_CHARGES,
            self::REASON_CODE_AGENT_COMMISSION,
            self::REASON_CODE_COUNTER_CLAIM,
            self::REASON_CODE_WRONG_DELIVERY,
            self::REASON_CODE_GOODS_RETURNED_TO_AGENT,
            self::REASON_CODE_GOODS_PARTLY_RETURNED,
            self::REASON_CODE_TRANSPORT_DAMAGE,
            self::REASON_CODE_GOODS_ON_CONSIGNMENT,
            self::REASON_CODE_TRADE_DISCOUNT,
            self::REASON_CODE_DEDUCTION_FOR_LATE_DELIVERY,
            self::REASON_CODE_ADVERTISING_COSTS,
            self::REASON_CODE_CUSTOMS_DUTIES,
            self::REASON_CODE_TELEPHONE_AND_POSTAL_COSTS,
            self::REASON_CODE_REPAIR_COSTS,
            self::REASON_CODE_ATTORNEY_FEES,
            self::REASON_CODE_TAXES,
            self::REASON_CODE_RECLAIMED_DEDUCTION,
            self::REASON_CODE_SEE_SEPARATE_ADVICE,
            self::REASON_CODE_BUYER_REFUSED_TO_TAKE_DELIVERY,
            self::REASON_CODE_DIRECT_PAYMENT_TO_SELLER,
            self::REASON_CODE_BUYER_DISAGREES_WITH_DUE_DATE,
            self::REASON_CODE_GOODS_NOT_DELIVERED,
            self::REASON_CODE_LATE_DELIVERY,
            self::REASON_CODE_QUOTED_AS_PAID_TO_YOU,
            self::REASON_CODE_GOODS_RETURNED,
            self::REASON_CODE_INVOICE_NOT_RECEIVED,
            self::REASON_CODE_CREDIT_NOTE_TO_DEBTOR_NOT_TO_US,
            self::REASON_CODE_DEDUCTED_BONUS,
            self::REASON_CODE_DEDUCTED_DISCOUNT,
            self::REASON_CODE_DEDUCTED_FREIGHT_COSTS,
            self::REASON_CODE_CREDIT_BALANCE,
            self::REASON_CODE_REASON_UNKNOWN,
            self::REASON_CODE_AWAITING_MESSAGE_FROM_SELLER,
            self::REASON_CODE_DEBIT_NOTE_TO_SELLER,
            self::REASON_CODE_DISCOUNT_BEYOND_TERMS,
            self::REASON_CODE_SEE_BUYERS_LETTER,
            self::REASON_CODE_ALLOWANCE_CHARGE_ERROR,
            self::REASON_CODE_SUBSTITUTE_PRODUCT,
            self::REASON_CODE_TERMS_OF_SALE_ERROR,
            self::REASON_CODE_REQUIRED_DATA_MISSING,
            self::REASON_CODE_WRONG_INVOICE,
            self::REASON_CODE_DUPLICATE_INVOICE,
            self::REASON_CODE_WEIGHT_ERROR,
            self::REASON_CODE_ADDITIONAL_CHARGE_NOT_AUTHORIZED,
            self::REASON_CODE_INCORRECT_DISCOUNT,
            self::REASON_CODE_PRICE_CHANGE,
            self::REASON_CODE_VARIATION,
            self::REASON_CODE_CHARGEBACK,
            self::REASON_CODE_OFFSET,
            self::REASON_CODE_INDIRECT_PAYMENT,
            self::REASON_CODE_FINANCIAL_REASSIGNMENT,
            self::REASON_CODE_REINSTATEMENT_OF_CHARGEBACK_OFFSET,
            self::REASON_CODE_EXPECTING_NEW_TERMS,
            self::REASON_CODE_SETTLEMENT_TO_AGENT,
            self::REASON_CODE_CASH_DISCOUNT,
            self::REASON_CODE_DELCREDERE_COSTS,
            self::REASON_CODE_EARLY_PAYMENT_ALLOWANCE_ADJUSTMENT,
            self::REASON_CODE_INCORRECT_DUE_DATE_FOR_MONETARY_AMOUNT,
            self::REASON_CODE_WRONG_MONETARY_AMOUNT_RESULTING_FROM_INCORRECT_FREE_GOODS,
            self::REASON_CODE_RACK_OR_SHELF_REPLENISHMENT_SERVICE_BY_A_SUPPLIER,
            self::REASON_CODE_TEMPORARY_SPECIAL_PROMOTION,
            self::REASON_CODE_DIFFERENCE_IN_TAX_RATE,
            self::REASON_CODE_QUANTITY_DISCOUNT,
            self::REASON_CODE_PROMOTION_DISCOUNT,
            self::REASON_CODE_CANCELLATION_DEADLINE_PASSED,
            self::REASON_CODE_PRICING_DISCOUNT,
            self::REASON_CODE_VOLUME_DISCOUNT,
            self::REASON_CODE_SUNDRY_DISCOUNT,
            self::REASON_CODE_CARD_HOLDER_SIGNATURE_MISSING,
            self::REASON_CODE_CARD_EXPIRY_DATE_MISSING,
            self::REASON_CODE_CARD_NUMBER_ERROR,
            self::REASON_CODE_CARD_EXPIRED,
            self::REASON_CODE_TEST_CARD_TRANSACTION,
            self::REASON_CODE_PERMISSION_LIMIT_EXCEEDED,
            self::REASON_CODE_WRONG_AUTHORISATION_CODE,
            self::REASON_CODE_WRONG_AUTHORISED_AMOUNT,
            self::REASON_CODE_AUTHORISATION_FAILED,
            self::REASON_CODE_CARD_ACCEPTOR_DATA_ERROR,
            self::REASON_CODE_MUTUALLY_DEFINED,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['charge_indicator'] = isset($data['charge_indicator']) ? $data['charge_indicator'] : null;
        $this->container['reason_code'] = isset($data['reason_code']) ? $data['reason_code'] : null;
        $this->container['reason'] = isset($data['reason']) ? $data['reason'] : null;
        $this->container['base_amount'] = isset($data['base_amount']) ? $data['base_amount'] : null;
        $this->container['amount'] = isset($data['amount']) ? $data['amount'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['percentage'] = isset($data['percentage']) ? $data['percentage'] : null;
        $this->container['sequence_indicator'] = isset($data['sequence_indicator']) ? $data['sequence_indicator'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['line_id'] = isset($data['line_id']) ? $data['line_id'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getReasonCodeAllowableValues();
        if (!in_array($this->container['reason_code'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'reason_code', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getReasonCodeAllowableValues();
        if (!in_array($this->container['reason_code'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets charge_indicator
     *
     * @return bool
     */
    public function getChargeIndicator()
    {
        return $this->container['charge_indicator'];
    }

    /**
     * Sets charge_indicator
     *
     * @param bool $charge_indicator charge_indicator
     *
     * @return $this
     */
    public function setChargeIndicator($charge_indicator)
    {
        $this->container['charge_indicator'] = $charge_indicator;

        return $this;
    }

    /**
     * Gets reason_code
     *
     * @return string
     */
    public function getReasonCode()
    {
        return $this->container['reason_code'];
    }

    /**
     * Sets reason_code
     *
     * @param string $reason_code reason_code
     *
     * @return $this
     */
    public function setReasonCode($reason_code)
    {
        $allowedValues = $this->getReasonCodeAllowableValues();
        if (!is_null($reason_code) && !in_array($reason_code, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'reason_code', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['reason_code'] = $reason_code;

        return $this;
    }

    /**
     * Gets reason
     *
     * @return string
     */
    public function getReason()
    {
        return $this->container['reason'];
    }

    /**
     * Sets reason
     *
     * @param string $reason reason
     *
     * @return $this
     */
    public function setReason($reason)
    {
        $this->container['reason'] = $reason;

        return $this;
    }

    /**
     * Gets base_amount
     *
     * @return double
     */
    public function getBaseAmount()
    {
        return $this->container['base_amount'];
    }

    /**
     * Sets base_amount
     *
     * @param double $base_amount base_amount
     *
     * @return $this
     */
    public function setBaseAmount($base_amount)
    {
        $this->container['base_amount'] = $base_amount;

        return $this;
    }

    /**
     * Gets amount
     *
     * @return double
     */
    public function getAmount()
    {
        return $this->container['amount'];
    }

    /**
     * Sets amount
     *
     * @param double $amount amount
     *
     * @return $this
     */
    public function setAmount($amount)
    {
        $this->container['amount'] = $amount;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets percentage
     *
     * @return int
     */
    public function getPercentage()
    {
        return $this->container['percentage'];
    }

    /**
     * Sets percentage
     *
     * @param int $percentage percentage
     *
     * @return $this
     */
    public function setPercentage($percentage)
    {
        $this->container['percentage'] = $percentage;

        return $this;
    }

    /**
     * Gets sequence_indicator
     *
     * @return int
     */
    public function getSequenceIndicator()
    {
        return $this->container['sequence_indicator'];
    }

    /**
     * Sets sequence_indicator
     *
     * @param int $sequence_indicator sequence_indicator
     *
     * @return $this
     */
    public function setSequenceIndicator($sequence_indicator)
    {
        $this->container['sequence_indicator'] = $sequence_indicator;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets line_id
     *
     * @return string
     */
    public function getLineId()
    {
        return $this->container['line_id'];
    }

    /**
     * Sets line_id
     *
     * @param string $line_id line_id
     *
     * @return $this
     */
    public function setLineId($line_id)
    {
        $this->container['line_id'] = $line_id;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \Swagger\Client\Model\OutboundDocument
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \Swagger\Client\Model\OutboundDocument $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


