<?php
/**
 * OutboundDocumentLine
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OutboundDocumentLine Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutboundDocumentLine implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OutboundDocumentLine';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number' => 'int',
        'free_of_charge' => 'bool',
        'accounting_cost_code' => 'string',
        'quantity' => 'double',
        'quantity_unit_of_measure' => '\Swagger\Client\Model\UnitOfMeasure',
        'taxable_amount' => 'double',
        'tax_category' => 'string',
        'tax_category_string' => 'string',
        'tax_percentage' => 'double',
        'tax_amount' => 'double',
        'exclude_vat' => 'bool',
        'currency_code' => 'string',
        'unit_price' => 'double',
        'gross_amount' => 'double',
        'net_amount' => 'double',
        'service_period' => '\Swagger\Client\Model\ServicePeriod',
        'item' => '\Swagger\Client\Model\Item',
        'allowance_charges' => '\Swagger\Client\Model\OutboundDocumentAllowanceCharge[]',
        'document_references' => '\Swagger\Client\Model\OutboundDocumentReference[]',
        'document_line_references' => '\Swagger\Client\Model\OutboundDocumentLineReference[]',
        'gas_and_oil_properties' => '\Swagger\Client\Model\OutboundDocumentLineGasAndOil[]',
        'document_id' => 'string',
        'document' => '\Swagger\Client\Model\OutboundDocument',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number' => 'int32',
        'free_of_charge' => null,
        'accounting_cost_code' => null,
        'quantity' => 'double',
        'quantity_unit_of_measure' => null,
        'taxable_amount' => 'double',
        'tax_category' => null,
        'tax_category_string' => null,
        'tax_percentage' => 'double',
        'tax_amount' => 'double',
        'exclude_vat' => null,
        'currency_code' => null,
        'unit_price' => 'double',
        'gross_amount' => 'double',
        'net_amount' => 'double',
        'service_period' => null,
        'item' => null,
        'allowance_charges' => null,
        'document_references' => null,
        'document_line_references' => null,
        'gas_and_oil_properties' => null,
        'document_id' => 'uuid',
        'document' => null,
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'Number',
        'free_of_charge' => 'FreeOfCharge',
        'accounting_cost_code' => 'AccountingCostCode',
        'quantity' => 'Quantity',
        'quantity_unit_of_measure' => 'QuantityUnitOfMeasure',
        'taxable_amount' => 'TaxableAmount',
        'tax_category' => 'TaxCategory',
        'tax_category_string' => 'TaxCategoryString',
        'tax_percentage' => 'TaxPercentage',
        'tax_amount' => 'TaxAmount',
        'exclude_vat' => 'ExcludeVat',
        'currency_code' => 'CurrencyCode',
        'unit_price' => 'UnitPrice',
        'gross_amount' => 'GrossAmount',
        'net_amount' => 'NetAmount',
        'service_period' => 'ServicePeriod',
        'item' => 'Item',
        'allowance_charges' => 'AllowanceCharges',
        'document_references' => 'DocumentReferences',
        'document_line_references' => 'DocumentLineReferences',
        'gas_and_oil_properties' => 'GasAndOilProperties',
        'document_id' => 'DocumentId',
        'document' => 'Document',
        'id' => 'Id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'free_of_charge' => 'setFreeOfCharge',
        'accounting_cost_code' => 'setAccountingCostCode',
        'quantity' => 'setQuantity',
        'quantity_unit_of_measure' => 'setQuantityUnitOfMeasure',
        'taxable_amount' => 'setTaxableAmount',
        'tax_category' => 'setTaxCategory',
        'tax_category_string' => 'setTaxCategoryString',
        'tax_percentage' => 'setTaxPercentage',
        'tax_amount' => 'setTaxAmount',
        'exclude_vat' => 'setExcludeVat',
        'currency_code' => 'setCurrencyCode',
        'unit_price' => 'setUnitPrice',
        'gross_amount' => 'setGrossAmount',
        'net_amount' => 'setNetAmount',
        'service_period' => 'setServicePeriod',
        'item' => 'setItem',
        'allowance_charges' => 'setAllowanceCharges',
        'document_references' => 'setDocumentReferences',
        'document_line_references' => 'setDocumentLineReferences',
        'gas_and_oil_properties' => 'setGasAndOilProperties',
        'document_id' => 'setDocumentId',
        'document' => 'setDocument',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'free_of_charge' => 'getFreeOfCharge',
        'accounting_cost_code' => 'getAccountingCostCode',
        'quantity' => 'getQuantity',
        'quantity_unit_of_measure' => 'getQuantityUnitOfMeasure',
        'taxable_amount' => 'getTaxableAmount',
        'tax_category' => 'getTaxCategory',
        'tax_category_string' => 'getTaxCategoryString',
        'tax_percentage' => 'getTaxPercentage',
        'tax_amount' => 'getTaxAmount',
        'exclude_vat' => 'getExcludeVat',
        'currency_code' => 'getCurrencyCode',
        'unit_price' => 'getUnitPrice',
        'gross_amount' => 'getGrossAmount',
        'net_amount' => 'getNetAmount',
        'service_period' => 'getServicePeriod',
        'item' => 'getItem',
        'allowance_charges' => 'getAllowanceCharges',
        'document_references' => 'getDocumentReferences',
        'document_line_references' => 'getDocumentLineReferences',
        'gas_and_oil_properties' => 'getGasAndOilProperties',
        'document_id' => 'getDocumentId',
        'document' => 'getDocument',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const TAX_CATEGORY_NOTSET = 'NOTSET';
    const TAX_CATEGORY_IVA = 'IVA';
    const TAX_CATEGORY_IPO = 'IPO';
    const TAX_CATEGORY_ICA = 'ICA';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getTaxCategoryAllowableValues()
    {
        return [
            self::TAX_CATEGORY_NOTSET,
            self::TAX_CATEGORY_IVA,
            self::TAX_CATEGORY_IPO,
            self::TAX_CATEGORY_ICA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['free_of_charge'] = isset($data['free_of_charge']) ? $data['free_of_charge'] : null;
        $this->container['accounting_cost_code'] = isset($data['accounting_cost_code']) ? $data['accounting_cost_code'] : null;
        $this->container['quantity'] = isset($data['quantity']) ? $data['quantity'] : null;
        $this->container['quantity_unit_of_measure'] = isset($data['quantity_unit_of_measure']) ? $data['quantity_unit_of_measure'] : null;
        $this->container['taxable_amount'] = isset($data['taxable_amount']) ? $data['taxable_amount'] : null;
        $this->container['tax_category'] = isset($data['tax_category']) ? $data['tax_category'] : null;
        $this->container['tax_category_string'] = isset($data['tax_category_string']) ? $data['tax_category_string'] : null;
        $this->container['tax_percentage'] = isset($data['tax_percentage']) ? $data['tax_percentage'] : null;
        $this->container['tax_amount'] = isset($data['tax_amount']) ? $data['tax_amount'] : null;
        $this->container['exclude_vat'] = isset($data['exclude_vat']) ? $data['exclude_vat'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['unit_price'] = isset($data['unit_price']) ? $data['unit_price'] : null;
        $this->container['gross_amount'] = isset($data['gross_amount']) ? $data['gross_amount'] : null;
        $this->container['net_amount'] = isset($data['net_amount']) ? $data['net_amount'] : null;
        $this->container['service_period'] = isset($data['service_period']) ? $data['service_period'] : null;
        $this->container['item'] = isset($data['item']) ? $data['item'] : null;
        $this->container['allowance_charges'] = isset($data['allowance_charges']) ? $data['allowance_charges'] : null;
        $this->container['document_references'] = isset($data['document_references']) ? $data['document_references'] : null;
        $this->container['document_line_references'] = isset($data['document_line_references']) ? $data['document_line_references'] : null;
        $this->container['gas_and_oil_properties'] = isset($data['gas_and_oil_properties']) ? $data['gas_and_oil_properties'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['document'] = isset($data['document']) ? $data['document'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getTaxCategoryAllowableValues();
        if (!in_array($this->container['tax_category'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'tax_category', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getTaxCategoryAllowableValues();
        if (!in_array($this->container['tax_category'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets number
     *
     * @return int
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param int $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets free_of_charge
     *
     * @return bool
     */
    public function getFreeOfCharge()
    {
        return $this->container['free_of_charge'];
    }

    /**
     * Sets free_of_charge
     *
     * @param bool $free_of_charge free_of_charge
     *
     * @return $this
     */
    public function setFreeOfCharge($free_of_charge)
    {
        $this->container['free_of_charge'] = $free_of_charge;

        return $this;
    }

    /**
     * Gets accounting_cost_code
     *
     * @return string
     */
    public function getAccountingCostCode()
    {
        return $this->container['accounting_cost_code'];
    }

    /**
     * Sets accounting_cost_code
     *
     * @param string $accounting_cost_code accounting_cost_code
     *
     * @return $this
     */
    public function setAccountingCostCode($accounting_cost_code)
    {
        $this->container['accounting_cost_code'] = $accounting_cost_code;

        return $this;
    }

    /**
     * Gets quantity
     *
     * @return double
     */
    public function getQuantity()
    {
        return $this->container['quantity'];
    }

    /**
     * Sets quantity
     *
     * @param double $quantity quantity
     *
     * @return $this
     */
    public function setQuantity($quantity)
    {
        $this->container['quantity'] = $quantity;

        return $this;
    }

    /**
     * Gets quantity_unit_of_measure
     *
     * @return \Swagger\Client\Model\UnitOfMeasure
     */
    public function getQuantityUnitOfMeasure()
    {
        return $this->container['quantity_unit_of_measure'];
    }

    /**
     * Sets quantity_unit_of_measure
     *
     * @param \Swagger\Client\Model\UnitOfMeasure $quantity_unit_of_measure quantity_unit_of_measure
     *
     * @return $this
     */
    public function setQuantityUnitOfMeasure($quantity_unit_of_measure)
    {
        $this->container['quantity_unit_of_measure'] = $quantity_unit_of_measure;

        return $this;
    }

    /**
     * Gets taxable_amount
     *
     * @return double
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     *
     * @param double $taxable_amount taxable_amount
     *
     * @return $this
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets tax_category
     *
     * @return string
     */
    public function getTaxCategory()
    {
        return $this->container['tax_category'];
    }

    /**
     * Sets tax_category
     *
     * @param string $tax_category tax_category
     *
     * @return $this
     */
    public function setTaxCategory($tax_category)
    {
        $allowedValues = $this->getTaxCategoryAllowableValues();
        if (!is_null($tax_category) && !in_array($tax_category, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'tax_category', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['tax_category'] = $tax_category;

        return $this;
    }

    /**
     * Gets tax_category_string
     *
     * @return string
     */
    public function getTaxCategoryString()
    {
        return $this->container['tax_category_string'];
    }

    /**
     * Sets tax_category_string
     *
     * @param string $tax_category_string tax_category_string
     *
     * @return $this
     */
    public function setTaxCategoryString($tax_category_string)
    {
        $this->container['tax_category_string'] = $tax_category_string;

        return $this;
    }

    /**
     * Gets tax_percentage
     *
     * @return double
     */
    public function getTaxPercentage()
    {
        return $this->container['tax_percentage'];
    }

    /**
     * Sets tax_percentage
     *
     * @param double $tax_percentage tax_percentage
     *
     * @return $this
     */
    public function setTaxPercentage($tax_percentage)
    {
        $this->container['tax_percentage'] = $tax_percentage;

        return $this;
    }

    /**
     * Gets tax_amount
     *
     * @return double
     */
    public function getTaxAmount()
    {
        return $this->container['tax_amount'];
    }

    /**
     * Sets tax_amount
     *
     * @param double $tax_amount tax_amount
     *
     * @return $this
     */
    public function setTaxAmount($tax_amount)
    {
        $this->container['tax_amount'] = $tax_amount;

        return $this;
    }

    /**
     * Gets exclude_vat
     *
     * @return bool
     */
    public function getExcludeVat()
    {
        return $this->container['exclude_vat'];
    }

    /**
     * Sets exclude_vat
     *
     * @param bool $exclude_vat exclude_vat
     *
     * @return $this
     */
    public function setExcludeVat($exclude_vat)
    {
        $this->container['exclude_vat'] = $exclude_vat;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets unit_price
     *
     * @return double
     */
    public function getUnitPrice()
    {
        return $this->container['unit_price'];
    }

    /**
     * Sets unit_price
     *
     * @param double $unit_price unit_price
     *
     * @return $this
     */
    public function setUnitPrice($unit_price)
    {
        $this->container['unit_price'] = $unit_price;

        return $this;
    }

    /**
     * Gets gross_amount
     *
     * @return double
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     *
     * @param double $gross_amount gross_amount
     *
     * @return $this
     */
    public function setGrossAmount($gross_amount)
    {
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets net_amount
     *
     * @return double
     */
    public function getNetAmount()
    {
        return $this->container['net_amount'];
    }

    /**
     * Sets net_amount
     *
     * @param double $net_amount net_amount
     *
     * @return $this
     */
    public function setNetAmount($net_amount)
    {
        $this->container['net_amount'] = $net_amount;

        return $this;
    }

    /**
     * Gets service_period
     *
     * @return \Swagger\Client\Model\ServicePeriod
     */
    public function getServicePeriod()
    {
        return $this->container['service_period'];
    }

    /**
     * Sets service_period
     *
     * @param \Swagger\Client\Model\ServicePeriod $service_period service_period
     *
     * @return $this
     */
    public function setServicePeriod($service_period)
    {
        $this->container['service_period'] = $service_period;

        return $this;
    }

    /**
     * Gets item
     *
     * @return \Swagger\Client\Model\Item
     */
    public function getItem()
    {
        return $this->container['item'];
    }

    /**
     * Sets item
     *
     * @param \Swagger\Client\Model\Item $item item
     *
     * @return $this
     */
    public function setItem($item)
    {
        $this->container['item'] = $item;

        return $this;
    }

    /**
     * Gets allowance_charges
     *
     * @return \Swagger\Client\Model\OutboundDocumentAllowanceCharge[]
     */
    public function getAllowanceCharges()
    {
        return $this->container['allowance_charges'];
    }

    /**
     * Sets allowance_charges
     *
     * @param \Swagger\Client\Model\OutboundDocumentAllowanceCharge[] $allowance_charges allowance_charges
     *
     * @return $this
     */
    public function setAllowanceCharges($allowance_charges)
    {
        $this->container['allowance_charges'] = $allowance_charges;

        return $this;
    }

    /**
     * Gets document_references
     *
     * @return \Swagger\Client\Model\OutboundDocumentReference[]
     */
    public function getDocumentReferences()
    {
        return $this->container['document_references'];
    }

    /**
     * Sets document_references
     *
     * @param \Swagger\Client\Model\OutboundDocumentReference[] $document_references document_references
     *
     * @return $this
     */
    public function setDocumentReferences($document_references)
    {
        $this->container['document_references'] = $document_references;

        return $this;
    }

    /**
     * Gets document_line_references
     *
     * @return \Swagger\Client\Model\OutboundDocumentLineReference[]
     */
    public function getDocumentLineReferences()
    {
        return $this->container['document_line_references'];
    }

    /**
     * Sets document_line_references
     *
     * @param \Swagger\Client\Model\OutboundDocumentLineReference[] $document_line_references document_line_references
     *
     * @return $this
     */
    public function setDocumentLineReferences($document_line_references)
    {
        $this->container['document_line_references'] = $document_line_references;

        return $this;
    }

    /**
     * Gets gas_and_oil_properties
     *
     * @return \Swagger\Client\Model\OutboundDocumentLineGasAndOil[]
     */
    public function getGasAndOilProperties()
    {
        return $this->container['gas_and_oil_properties'];
    }

    /**
     * Sets gas_and_oil_properties
     *
     * @param \Swagger\Client\Model\OutboundDocumentLineGasAndOil[] $gas_and_oil_properties gas_and_oil_properties
     *
     * @return $this
     */
    public function setGasAndOilProperties($gas_and_oil_properties)
    {
        $this->container['gas_and_oil_properties'] = $gas_and_oil_properties;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets document
     *
     * @return \Swagger\Client\Model\OutboundDocument
     */
    public function getDocument()
    {
        return $this->container['document'];
    }

    /**
     * Sets document
     *
     * @param \Swagger\Client\Model\OutboundDocument $document document
     *
     * @return $this
     */
    public function setDocument($document)
    {
        $this->container['document'] = $document;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


