<?php
/**
 * CustomerPartyInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomerPartyInputDto Class Doc Comment
 *
 * @category Class
 * @description Data structure which can describe the issuer or customer
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerPartyInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerPartyInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'tele_fax' => 'string',
        'document_contacts' => '\Swagger\Client\Model\DocumentContactInputDto[]',
        'gln' => 'string',
        'legal_type' => 'string',
        'identification' => '\Swagger\Client\Model\IdentificationInputDto',
        'name' => 'string',
        'website_url' => 'string',
        'email' => 'string',
        'address' => '\Swagger\Client\Model\AddressInputDto',
        'tax_scheme' => 'string',
        'person' => '\Swagger\Client\Model\PersonInputDto',
        'industry' => 'string',
        'representation_type' => 'string',
        'obligation_type' => 'string',
        'customs_type' => 'string',
        'location_type' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'tele_fax' => null,
        'document_contacts' => null,
        'gln' => null,
        'legal_type' => null,
        'identification' => null,
        'name' => null,
        'website_url' => null,
        'email' => null,
        'address' => null,
        'tax_scheme' => null,
        'person' => null,
        'industry' => null,
        'representation_type' => null,
        'obligation_type' => null,
        'customs_type' => null,
        'location_type' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'tele_fax' => 'TeleFax',
        'document_contacts' => 'DocumentContacts',
        'gln' => 'Gln',
        'legal_type' => 'LegalType',
        'identification' => 'Identification',
        'name' => 'Name',
        'website_url' => 'WebsiteUrl',
        'email' => 'Email',
        'address' => 'Address',
        'tax_scheme' => 'TaxScheme',
        'person' => 'Person',
        'industry' => 'Industry',
        'representation_type' => 'RepresentationType',
        'obligation_type' => 'ObligationType',
        'customs_type' => 'CustomsType',
        'location_type' => 'LocationType'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'tele_fax' => 'setTeleFax',
        'document_contacts' => 'setDocumentContacts',
        'gln' => 'setGln',
        'legal_type' => 'setLegalType',
        'identification' => 'setIdentification',
        'name' => 'setName',
        'website_url' => 'setWebsiteUrl',
        'email' => 'setEmail',
        'address' => 'setAddress',
        'tax_scheme' => 'setTaxScheme',
        'person' => 'setPerson',
        'industry' => 'setIndustry',
        'representation_type' => 'setRepresentationType',
        'obligation_type' => 'setObligationType',
        'customs_type' => 'setCustomsType',
        'location_type' => 'setLocationType'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'tele_fax' => 'getTeleFax',
        'document_contacts' => 'getDocumentContacts',
        'gln' => 'getGln',
        'legal_type' => 'getLegalType',
        'identification' => 'getIdentification',
        'name' => 'getName',
        'website_url' => 'getWebsiteUrl',
        'email' => 'getEmail',
        'address' => 'getAddress',
        'tax_scheme' => 'getTaxScheme',
        'person' => 'getPerson',
        'industry' => 'getIndustry',
        'representation_type' => 'getRepresentationType',
        'obligation_type' => 'getObligationType',
        'customs_type' => 'getCustomsType',
        'location_type' => 'getLocationType'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['tele_fax'] = isset($data['tele_fax']) ? $data['tele_fax'] : null;
        $this->container['document_contacts'] = isset($data['document_contacts']) ? $data['document_contacts'] : null;
        $this->container['gln'] = isset($data['gln']) ? $data['gln'] : null;
        $this->container['legal_type'] = isset($data['legal_type']) ? $data['legal_type'] : null;
        $this->container['identification'] = isset($data['identification']) ? $data['identification'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['tax_scheme'] = isset($data['tax_scheme']) ? $data['tax_scheme'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['representation_type'] = isset($data['representation_type']) ? $data['representation_type'] : null;
        $this->container['obligation_type'] = isset($data['obligation_type']) ? $data['obligation_type'] : null;
        $this->container['customs_type'] = isset($data['customs_type']) ? $data['customs_type'] : null;
        $this->container['location_type'] = isset($data['location_type']) ? $data['location_type'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['gln']) && (strlen($this->container['gln']) > 13)) {
            $invalidProperties[] = "invalid value for 'gln', the character length must be smaller than or equal to 13.";
        }

        if ($this->container['legal_type'] === null) {
            $invalidProperties[] = "'legal_type' can't be null";
        }
        if ($this->container['identification'] === null) {
            $invalidProperties[] = "'identification' can't be null";
        }
        if (!is_null($this->container['name']) && (strlen($this->container['name']) > 450)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 450.";
        }

        if (!is_null($this->container['website_url']) && (strlen($this->container['website_url']) > 250)) {
            $invalidProperties[] = "invalid value for 'website_url', the character length must be smaller than or equal to 250.";
        }

        if ($this->container['email'] === null) {
            $invalidProperties[] = "'email' can't be null";
        }
        if ((strlen($this->container['email']) > 200)) {
            $invalidProperties[] = "invalid value for 'email', the character length must be smaller than or equal to 200.";
        }

        if ($this->container['address'] === null) {
            $invalidProperties[] = "'address' can't be null";
        }
        if ($this->container['tax_scheme'] === null) {
            $invalidProperties[] = "'tax_scheme' can't be null";
        }
        if (!is_null($this->container['industry']) && (strlen($this->container['industry']) > 100)) {
            $invalidProperties[] = "invalid value for 'industry', the character length must be smaller than or equal to 100.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if (strlen($this->container['gln']) > 13) {
            return false;
        }
        if ($this->container['legal_type'] === null) {
            return false;
        }
        if ($this->container['identification'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 450) {
            return false;
        }
        if (strlen($this->container['website_url']) > 250) {
            return false;
        }
        if ($this->container['email'] === null) {
            return false;
        }
        if (strlen($this->container['email']) > 200) {
            return false;
        }
        if ($this->container['address'] === null) {
            return false;
        }
        if ($this->container['tax_scheme'] === null) {
            return false;
        }
        if (strlen($this->container['industry']) > 100) {
            return false;
        }
        return true;
    }


    /**
     * Gets tele_fax
     *
     * @return string
     */
    public function getTeleFax()
    {
        return $this->container['tele_fax'];
    }

    /**
     * Sets tele_fax
     *
     * @param string $tele_fax TeleFax
     *
     * @return $this
     */
    public function setTeleFax($tele_fax)
    {
        $this->container['tele_fax'] = $tele_fax;

        return $this;
    }

    /**
     * Gets document_contacts
     *
     * @return \Swagger\Client\Model\DocumentContactInputDto[]
     */
    public function getDocumentContacts()
    {
        return $this->container['document_contacts'];
    }

    /**
     * Sets document_contacts
     *
     * @param \Swagger\Client\Model\DocumentContactInputDto[] $document_contacts Party contacts related to  current document
     *
     * @return $this
     */
    public function setDocumentContacts($document_contacts)
    {
        $this->container['document_contacts'] = $document_contacts;

        return $this;
    }

    /**
     * Gets gln
     *
     * @return string
     */
    public function getGln()
    {
        return $this->container['gln'];
    }

    /**
     * Sets gln
     *
     * @param string $gln Party GLN; MaxLength: 13
     *
     * @return $this
     */
    public function setGln($gln)
    {
        if (!is_null($gln) && (strlen($gln) > 13)) {
            throw new \InvalidArgumentException('invalid length for $gln when calling CustomerPartyInputDto., must be smaller than or equal to 13.');
        }

        $this->container['gln'] = $gln;

        return $this;
    }

    /**
     * Gets legal_type
     *
     * @return string
     */
    public function getLegalType()
    {
        return $this->container['legal_type'];
    }

    /**
     * Sets legal_type
     *
     * @param string $legal_type Document type identification. The value must be one of this: ['Natural', 'Legal']
     *
     * @return $this
     */
    public function setLegalType($legal_type)
    {
        $this->container['legal_type'] = $legal_type;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return \Swagger\Client\Model\IdentificationInputDto
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param \Swagger\Client\Model\IdentificationInputDto $identification Identification
     *
     * @return $this
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Name of commercial establishment.   Required if LegalType = Legal; MaxLength: 450
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (strlen($name) > 450)) {
            throw new \InvalidArgumentException('invalid length for $name when calling CustomerPartyInputDto., must be smaller than or equal to 450.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url Website url; MaxLength: 250
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        if (!is_null($website_url) && (strlen($website_url) > 250)) {
            throw new \InvalidArgumentException('invalid length for $website_url when calling CustomerPartyInputDto., must be smaller than or equal to 250.');
        }

        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email Email address; MaxLength: 200
     *
     * @return $this
     */
    public function setEmail($email)
    {
        if ((strlen($email) > 200)) {
            throw new \InvalidArgumentException('invalid length for $email when calling CustomerPartyInputDto., must be smaller than or equal to 200.');
        }

        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\AddressInputDto
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\AddressInputDto $address Data required to detail address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets tax_scheme
     *
     * @return string
     */
    public function getTaxScheme()
    {
        return $this->container['tax_scheme'];
    }

    /**
     * Sets tax_scheme
     *
     * @param string $tax_scheme Describe the regime.
     *
     * @return $this
     */
    public function setTaxScheme($tax_scheme)
    {
        $this->container['tax_scheme'] = $tax_scheme;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Swagger\Client\Model\PersonInputDto
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Swagger\Client\Model\PersonInputDto $person Person. Required if LegalType = Natural
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry Industry; MaxLength: 100
     *
     * @return $this
     */
    public function setIndustry($industry)
    {
        if (!is_null($industry) && (strlen($industry) > 100)) {
            throw new \InvalidArgumentException('invalid length for $industry when calling CustomerPartyInputDto., must be smaller than or equal to 100.');
        }

        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets representation_type
     *
     * @return string
     */
    public function getRepresentationType()
    {
        return $this->container['representation_type'];
    }

    /**
     * Sets representation_type
     *
     * @param string $representation_type representation_type
     *
     * @return $this
     */
    public function setRepresentationType($representation_type)
    {
        $this->container['representation_type'] = $representation_type;

        return $this;
    }

    /**
     * Gets obligation_type
     *
     * @return string
     */
    public function getObligationType()
    {
        return $this->container['obligation_type'];
    }

    /**
     * Sets obligation_type
     *
     * @param string $obligation_type obligation_type
     *
     * @return $this
     */
    public function setObligationType($obligation_type)
    {
        $this->container['obligation_type'] = $obligation_type;

        return $this;
    }

    /**
     * Gets customs_type
     *
     * @return string
     */
    public function getCustomsType()
    {
        return $this->container['customs_type'];
    }

    /**
     * Sets customs_type
     *
     * @param string $customs_type customs_type
     *
     * @return $this
     */
    public function setCustomsType($customs_type)
    {
        $this->container['customs_type'] = $customs_type;

        return $this;
    }

    /**
     * Gets location_type
     *
     * @return string
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     *
     * @param string $location_type location_type
     *
     * @return $this
     */
    public function setLocationType($location_type)
    {
        $this->container['location_type'] = $location_type;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


