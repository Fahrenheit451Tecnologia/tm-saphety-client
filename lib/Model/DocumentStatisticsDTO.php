<?php
/**
 * DocumentStatisticsDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * DocumentStatisticsDTO Class Doc Comment
 *
 * @category    Class
 * @description Object representing the document statistics
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class DocumentStatisticsDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'DocumentStatisticsDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'certified' => 'int',
        'received' => 'int',
        'accepted' => 'int',
        'tacitly_accepted' => 'int',
        'rejected' => 'int',
        'deliver_ok' => 'int',
        'not_communicated' => 'int',
        'unable_to_deliver' => 'int',
        'communication_error' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'certified' => 'int32',
        'received' => 'int32',
        'accepted' => 'int32',
        'tacitly_accepted' => 'int32',
        'rejected' => 'int32',
        'deliver_ok' => 'int32',
        'not_communicated' => 'int32',
        'unable_to_deliver' => 'int32',
        'communication_error' => 'int32'
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'certified' => 'Certified',
        'received' => 'Received',
        'accepted' => 'Accepted',
        'tacitly_accepted' => 'TacitlyAccepted',
        'rejected' => 'Rejected',
        'deliver_ok' => 'DeliverOk',
        'not_communicated' => 'NotCommunicated',
        'unable_to_deliver' => 'UnableToDeliver',
        'communication_error' => 'CommunicationError'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'certified' => 'setCertified',
        'received' => 'setReceived',
        'accepted' => 'setAccepted',
        'tacitly_accepted' => 'setTacitlyAccepted',
        'rejected' => 'setRejected',
        'deliver_ok' => 'setDeliverOk',
        'not_communicated' => 'setNotCommunicated',
        'unable_to_deliver' => 'setUnableToDeliver',
        'communication_error' => 'setCommunicationError'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'certified' => 'getCertified',
        'received' => 'getReceived',
        'accepted' => 'getAccepted',
        'tacitly_accepted' => 'getTacitlyAccepted',
        'rejected' => 'getRejected',
        'deliver_ok' => 'getDeliverOk',
        'not_communicated' => 'getNotCommunicated',
        'unable_to_deliver' => 'getUnableToDeliver',
        'communication_error' => 'getCommunicationError'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['certified'] = isset($data['certified']) ? $data['certified'] : null;
        $this->container['received'] = isset($data['received']) ? $data['received'] : null;
        $this->container['accepted'] = isset($data['accepted']) ? $data['accepted'] : null;
        $this->container['tacitly_accepted'] = isset($data['tacitly_accepted']) ? $data['tacitly_accepted'] : null;
        $this->container['rejected'] = isset($data['rejected']) ? $data['rejected'] : null;
        $this->container['deliver_ok'] = isset($data['deliver_ok']) ? $data['deliver_ok'] : null;
        $this->container['not_communicated'] = isset($data['not_communicated']) ? $data['not_communicated'] : null;
        $this->container['unable_to_deliver'] = isset($data['unable_to_deliver']) ? $data['unable_to_deliver'] : null;
        $this->container['communication_error'] = isset($data['communication_error']) ? $data['communication_error'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets certified
     * @return int
     */
    public function getCertified()
    {
        return $this->container['certified'];
    }

    /**
     * Sets certified
     * @param int $certified number of documents in the certified state
     * @return $this
     */
    public function setCertified($certified)
    {
        $this->container['certified'] = $certified;

        return $this;
    }

    /**
     * Gets received
     * @return int
     */
    public function getReceived()
    {
        return $this->container['received'];
    }

    /**
     * Sets received
     * @param int $received number of documents in the received state
     * @return $this
     */
    public function setReceived($received)
    {
        $this->container['received'] = $received;

        return $this;
    }

    /**
     * Gets accepted
     * @return int
     */
    public function getAccepted()
    {
        return $this->container['accepted'];
    }

    /**
     * Sets accepted
     * @param int $accepted number of documents in the accepted state
     * @return $this
     */
    public function setAccepted($accepted)
    {
        $this->container['accepted'] = $accepted;

        return $this;
    }

    /**
     * Gets tacitly_accepted
     * @return int
     */
    public function getTacitlyAccepted()
    {
        return $this->container['tacitly_accepted'];
    }

    /**
     * Sets tacitly_accepted
     * @param int $tacitly_accepted number of documents in the TacitlyAccepted state
     * @return $this
     */
    public function setTacitlyAccepted($tacitly_accepted)
    {
        $this->container['tacitly_accepted'] = $tacitly_accepted;

        return $this;
    }

    /**
     * Gets rejected
     * @return int
     */
    public function getRejected()
    {
        return $this->container['rejected'];
    }

    /**
     * Sets rejected
     * @param int $rejected number of documents in the rejected state
     * @return $this
     */
    public function setRejected($rejected)
    {
        $this->container['rejected'] = $rejected;

        return $this;
    }

    /**
     * Gets deliver_ok
     * @return int
     */
    public function getDeliverOk()
    {
        return $this->container['deliver_ok'];
    }

    /**
     * Sets deliver_ok
     * @param int $deliver_ok number of documents in the deliver to dian ok state
     * @return $this
     */
    public function setDeliverOk($deliver_ok)
    {
        $this->container['deliver_ok'] = $deliver_ok;

        return $this;
    }

    /**
     * Gets not_communicated
     * @return int
     */
    public function getNotCommunicated()
    {
        return $this->container['not_communicated'];
    }

    /**
     * Sets not_communicated
     * @param int $not_communicated number of documents in the not communicated to dian state
     * @return $this
     */
    public function setNotCommunicated($not_communicated)
    {
        $this->container['not_communicated'] = $not_communicated;

        return $this;
    }

    /**
     * Gets unable_to_deliver
     * @return int
     */
    public function getUnableToDeliver()
    {
        return $this->container['unable_to_deliver'];
    }

    /**
     * Sets unable_to_deliver
     * @param int $unable_to_deliver number of documents in the unable to deliver to dian state
     * @return $this
     */
    public function setUnableToDeliver($unable_to_deliver)
    {
        $this->container['unable_to_deliver'] = $unable_to_deliver;

        return $this;
    }

    /**
     * Gets communication_error
     * @return int
     */
    public function getCommunicationError()
    {
        return $this->container['communication_error'];
    }

    /**
     * Sets communication_error
     * @param int $communication_error number of documents in the communication with dian error state
     * @return $this
     */
    public function setCommunicationError($communication_error)
    {
        $this->container['communication_error'] = $communication_error;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


