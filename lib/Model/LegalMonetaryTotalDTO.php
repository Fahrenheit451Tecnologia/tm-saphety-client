<?php
/**
 * LegalMonetaryTotalDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;

/**
 * LegalMonetaryTotalDTO Class Doc Comment
 *
 * @category    Class
 * @package     Swagger\Client
 * @author      Swagger Codegen team
 * @link        https://github.com/swagger-api/swagger-codegen
 */
class LegalMonetaryTotalDTO implements ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      * @var string
      */
    protected static $swaggerModelName = 'LegalMonetaryTotalDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerTypes = [
        'gross_amount' => 'string',
        'payable_amount' => 'string',
        'taxable_amount' => 'string',
        'allowances_total_amount' => 'string',
        'charges_total_amount' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      * @var string[]
      */
    protected static $swaggerFormats = [
        'gross_amount' => null,
        'payable_amount' => null,
        'taxable_amount' => null,
        'allowances_total_amount' => null,
        'charges_total_amount' => null
    ];

    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name, and the value is the original name
     * @var string[]
     */
    protected static $attributeMap = [
        'gross_amount' => 'GrossAmount',
        'payable_amount' => 'PayableAmount',
        'taxable_amount' => 'TaxableAmount',
        'allowances_total_amount' => 'AllowancesTotalAmount',
        'charges_total_amount' => 'ChargesTotalAmount'
    ];


    /**
     * Array of attributes to setter functions (for deserialization of responses)
     * @var string[]
     */
    protected static $setters = [
        'gross_amount' => 'setGrossAmount',
        'payable_amount' => 'setPayableAmount',
        'taxable_amount' => 'setTaxableAmount',
        'allowances_total_amount' => 'setAllowancesTotalAmount',
        'charges_total_amount' => 'setChargesTotalAmount'
    ];


    /**
     * Array of attributes to getter functions (for serialization of requests)
     * @var string[]
     */
    protected static $getters = [
        'gross_amount' => 'getGrossAmount',
        'payable_amount' => 'getPayableAmount',
        'taxable_amount' => 'getTaxableAmount',
        'allowances_total_amount' => 'getAllowancesTotalAmount',
        'charges_total_amount' => 'getChargesTotalAmount'
    ];

    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    public static function setters()
    {
        return self::$setters;
    }

    public static function getters()
    {
        return self::$getters;
    }

    

    

    /**
     * Associative array for storing property values
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     * @param mixed[] $data Associated array of property values initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['gross_amount'] = isset($data['gross_amount']) ? $data['gross_amount'] : null;
        $this->container['payable_amount'] = isset($data['payable_amount']) ? $data['payable_amount'] : null;
        $this->container['taxable_amount'] = isset($data['taxable_amount']) ? $data['taxable_amount'] : null;
        $this->container['allowances_total_amount'] = isset($data['allowances_total_amount']) ? $data['allowances_total_amount'] : null;
        $this->container['charges_total_amount'] = isset($data['charges_total_amount']) ? $data['charges_total_amount'] : null;
    }

    /**
     * show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalid_properties = [];

        if ($this->container['gross_amount'] === null) {
            $invalid_properties[] = "'gross_amount' can't be null";
        }
        if ($this->container['payable_amount'] === null) {
            $invalid_properties[] = "'payable_amount' can't be null";
        }
        if ($this->container['taxable_amount'] === null) {
            $invalid_properties[] = "'taxable_amount' can't be null";
        }
        return $invalid_properties;
    }

    /**
     * validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['gross_amount'] === null) {
            return false;
        }
        if ($this->container['payable_amount'] === null) {
            return false;
        }
        if ($this->container['taxable_amount'] === null) {
            return false;
        }
        return true;
    }


    /**
     * Gets gross_amount
     * @return string
     */
    public function getGrossAmount()
    {
        return $this->container['gross_amount'];
    }

    /**
     * Sets gross_amount
     * @param string $gross_amount Sum of gross amount of all lines, before taxes
     * @return $this
     */
    public function setGrossAmount($gross_amount)
    {
        $this->container['gross_amount'] = $gross_amount;

        return $this;
    }

    /**
     * Gets payable_amount
     * @return string
     */
    public function getPayableAmount()
    {
        return $this->container['payable_amount'];
    }

    /**
     * Sets payable_amount
     * @param string $payable_amount Value to pay: Gross amount + Total taxes - taxes withheld
     * @return $this
     */
    public function setPayableAmount($payable_amount)
    {
        $this->container['payable_amount'] = $payable_amount;

        return $this;
    }

    /**
     * Gets taxable_amount
     * @return string
     */
    public function getTaxableAmount()
    {
        return $this->container['taxable_amount'];
    }

    /**
     * Sets taxable_amount
     * @param string $taxable_amount Base amount for tax calculation (Gross amount + Charges - Allawances)
     * @return $this
     */
    public function setTaxableAmount($taxable_amount)
    {
        $this->container['taxable_amount'] = $taxable_amount;

        return $this;
    }

    /**
     * Gets allowances_total_amount
     * @return string
     */
    public function getAllowancesTotalAmount()
    {
        return $this->container['allowances_total_amount'];
    }

    /**
     * Sets allowances_total_amount
     * @param string $allowances_total_amount Sum of all allwances
     * @return $this
     */
    public function setAllowancesTotalAmount($allowances_total_amount)
    {
        $this->container['allowances_total_amount'] = $allowances_total_amount;

        return $this;
    }

    /**
     * Gets charges_total_amount
     * @return string
     */
    public function getChargesTotalAmount()
    {
        return $this->container['charges_total_amount'];
    }

    /**
     * Sets charges_total_amount
     * @param string $charges_total_amount Sum of all charges
     * @return $this
     */
    public function setChargesTotalAmount($charges_total_amount)
    {
        $this->container['charges_total_amount'] = $charges_total_amount;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     * @param  integer $offset Offset
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     * @param  integer $offset Offset
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     * @param  integer $offset Offset
     * @param  mixed   $value  Value to be set
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     * @param  integer $offset Offset
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this), JSON_PRETTY_PRINT);
        }

        return json_encode(\Swagger\Client\ObjectSerializer::sanitizeForSerialization($this));
    }
}


