<?php
/**
 * AcceptUserInvitationInputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * AcceptUserInvitationInputDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AcceptUserInvitationInputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'AcceptUserInvitationInputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'password' => 'string',
        'confirm_password' => 'string',
        'name' => 'string',
        'telephone' => 'string',
        'timezone' => 'string',
        'language_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'password' => null,
        'confirm_password' => null,
        'name' => null,
        'telephone' => null,
        'timezone' => null,
        'language_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'password' => 'Password',
        'confirm_password' => 'ConfirmPassword',
        'name' => 'Name',
        'telephone' => 'Telephone',
        'timezone' => 'Timezone',
        'language_code' => 'LanguageCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'password' => 'setPassword',
        'confirm_password' => 'setConfirmPassword',
        'name' => 'setName',
        'telephone' => 'setTelephone',
        'timezone' => 'setTimezone',
        'language_code' => 'setLanguageCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'password' => 'getPassword',
        'confirm_password' => 'getConfirmPassword',
        'name' => 'getName',
        'telephone' => 'getTelephone',
        'timezone' => 'getTimezone',
        'language_code' => 'getLanguageCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['password'] = isset($data['password']) ? $data['password'] : null;
        $this->container['confirm_password'] = isset($data['confirm_password']) ? $data['confirm_password'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['timezone'] = isset($data['timezone']) ? $data['timezone'] : null;
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['password'] === null) {
            $invalidProperties[] = "'password' can't be null";
        }
        if ((strlen($this->container['password']) > 30)) {
            $invalidProperties[] = "invalid value for 'password', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['confirm_password'] === null) {
            $invalidProperties[] = "'confirm_password' can't be null";
        }
        if ((strlen($this->container['confirm_password']) > 30)) {
            $invalidProperties[] = "invalid value for 'confirm_password', the character length must be smaller than or equal to 30.";
        }

        if ($this->container['name'] === null) {
            $invalidProperties[] = "'name' can't be null";
        }
        if ((strlen($this->container['name']) > 450)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 450.";
        }

        if ($this->container['telephone'] === null) {
            $invalidProperties[] = "'telephone' can't be null";
        }
        if ((strlen($this->container['telephone']) > 20)) {
            $invalidProperties[] = "invalid value for 'telephone', the character length must be smaller than or equal to 20.";
        }

        if ($this->container['timezone'] === null) {
            $invalidProperties[] = "'timezone' can't be null";
        }
        if ((strlen($this->container['timezone']) > 50)) {
            $invalidProperties[] = "invalid value for 'timezone', the character length must be smaller than or equal to 50.";
        }

        if ($this->container['language_code'] === null) {
            $invalidProperties[] = "'language_code' can't be null";
        }
        if ((strlen($this->container['language_code']) > 8)) {
            $invalidProperties[] = "invalid value for 'language_code', the character length must be smaller than or equal to 8.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['password'] === null) {
            return false;
        }
        if (strlen($this->container['password']) > 30) {
            return false;
        }
        if ($this->container['confirm_password'] === null) {
            return false;
        }
        if (strlen($this->container['confirm_password']) > 30) {
            return false;
        }
        if ($this->container['name'] === null) {
            return false;
        }
        if (strlen($this->container['name']) > 450) {
            return false;
        }
        if ($this->container['telephone'] === null) {
            return false;
        }
        if (strlen($this->container['telephone']) > 20) {
            return false;
        }
        if ($this->container['timezone'] === null) {
            return false;
        }
        if (strlen($this->container['timezone']) > 50) {
            return false;
        }
        if ($this->container['language_code'] === null) {
            return false;
        }
        if (strlen($this->container['language_code']) > 8) {
            return false;
        }
        return true;
    }


    /**
     * Gets password
     *
     * @return string
     */
    public function getPassword()
    {
        return $this->container['password'];
    }

    /**
     * Sets password
     *
     * @param string $password Accept user invitation's password; MaxLength: 30
     *
     * @return $this
     */
    public function setPassword($password)
    {
        if ((strlen($password) > 30)) {
            throw new \InvalidArgumentException('invalid length for $password when calling AcceptUserInvitationInputDto., must be smaller than or equal to 30.');
        }

        $this->container['password'] = $password;

        return $this;
    }

    /**
     * Gets confirm_password
     *
     * @return string
     */
    public function getConfirmPassword()
    {
        return $this->container['confirm_password'];
    }

    /**
     * Sets confirm_password
     *
     * @param string $confirm_password Accept user invitation's password confirmation; MaxLength: 30
     *
     * @return $this
     */
    public function setConfirmPassword($confirm_password)
    {
        if ((strlen($confirm_password) > 30)) {
            throw new \InvalidArgumentException('invalid length for $confirm_password when calling AcceptUserInvitationInputDto., must be smaller than or equal to 30.');
        }

        $this->container['confirm_password'] = $confirm_password;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name Accept user invitation's name; MaxLength: 450
     *
     * @return $this
     */
    public function setName($name)
    {
        if ((strlen($name) > 450)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AcceptUserInvitationInputDto., must be smaller than or equal to 450.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone Accept user invitation's telephone; MaxLength: 20
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        if ((strlen($telephone) > 20)) {
            throw new \InvalidArgumentException('invalid length for $telephone when calling AcceptUserInvitationInputDto., must be smaller than or equal to 20.');
        }

        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets timezone
     *
     * @return string
     */
    public function getTimezone()
    {
        return $this->container['timezone'];
    }

    /**
     * Sets timezone
     *
     * @param string $timezone Accept user invitation's timezone; MaxLength: 50
     *
     * @return $this
     */
    public function setTimezone($timezone)
    {
        if ((strlen($timezone) > 50)) {
            throw new \InvalidArgumentException('invalid length for $timezone when calling AcceptUserInvitationInputDto., must be smaller than or equal to 50.');
        }

        $this->container['timezone'] = $timezone;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string $language_code Accept user invitation's language code; MaxLength: 8
     *
     * @return $this
     */
    public function setLanguageCode($language_code)
    {
        if ((strlen($language_code) > 8)) {
            throw new \InvalidArgumentException('invalid length for $language_code when calling AcceptUserInvitationInputDto., must be smaller than or equal to 8.');
        }

        $this->container['language_code'] = $language_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


