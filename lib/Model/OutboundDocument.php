<?php
/**
 * OutboundDocument
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OutboundDocument Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutboundDocument implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OutboundDocument';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'number' => 'string',
        'serie_number' => 'int',
        'serie_prefix' => 'string',
        'issue_date' => '\DateTime',
        'billing_period' => '\Swagger\Client\Model\Period',
        'year' => 'string',
        'notes' => 'string[]',
        'lines' => '\Swagger\Client\Model\OutboundDocumentLine[]',
        'tax_summary' => '\Swagger\Client\Model\OutboundDocumentTaxSummary[]',
        'withholding_tax_summary' => '\Swagger\Client\Model\OutboundDocumentWithholdingTaxSummary[]',
        'prepaid_payments' => '\Swagger\Client\Model\OutboundDocumentPrepaidPayment[]',
        'total' => '\Swagger\Client\Model\LegalMonetaryTotal',
        'document_type' => 'string',
        'document_sub_type' => 'string',
        'cufe' => 'string',
        'cufe_unhashed' => 'string',
        'business_status' => '\Swagger\Client\Model\OutboundDocumentBusinessStatus[]',
        'communication_status' => '\Swagger\Client\Model\OutboundDocumentCommunicationStatus[]',
        'document_references' => '\Swagger\Client\Model\OutboundDocumentReference[]',
        'currency' => '\Swagger\Client\Model\Currency',
        'issue_mode' => 'string',
        'external_reference' => 'string',
        'payment_means' => '\Swagger\Client\Model\OutboundDocumentPaymentMean[]',
        'payment_terms' => '\Swagger\Client\Model\OutboundDocumentPaymentTerm[]',
        'delivery_terms' => '\Swagger\Client\Model\OutboundDocumentDeliveryTerms',
        'allowance_charges' => '\Swagger\Client\Model\OutboundDocumentAllowanceCharge[]',
        'payment_exchange_rate' => '\Swagger\Client\Model\PaymentExchangeRate',
        'due_date' => '\DateTime',
        'delivery_date' => '\DateTime',
        'serie_id' => 'string',
        'correlation_document_id' => 'string',
        'in_transport_document_id' => 'string',
        'issuer_party_id' => 'string',
        'customer_party_id' => 'string',
        'pdf_template_id' => 'string',
        'virtual_operator_id' => 'string',
        'virtual_operator' => '\Swagger\Client\Model\VirtualOperator',
        'issuer_party' => '\Swagger\Client\Model\Company',
        'customer_party' => '\Swagger\Client\Model\Customer',
        'document_files' => '\Swagger\Client\Model\OutboundDocumentFile[]',
        'dian_communication_responses' => '\Swagger\Client\Model\OutboundDocumentDIANCommunicationResponse[]',
        'serie' => '\Swagger\Client\Model\Serie',
        'pdf_template' => '\Swagger\Client\Model\Template',
        'document_emails' => '\Swagger\Client\Model\OutboundDocumentEmail[]',
        'document_attachments' => '\Swagger\Client\Model\OutboundDocumentAttachment[]',
        'issuer_contacts' => '\Swagger\Client\Model\OutboundDocumentIssuerContact[]',
        'customer_contacts' => '\Swagger\Client\Model\OutboundDocumentCustomerContact[]',
        'contingency_data' => '\Swagger\Client\Model\OutboundDocumentContingencyData',
        'software_security_code' => 'string',
        'public_document_url' => 'string',
        'custom_fields' => '\Swagger\Client\Model\CustomField[]',
        'creation_date' => '\DateTime',
        'last_update_date' => '\DateTime',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'number' => null,
        'serie_number' => 'int64',
        'serie_prefix' => null,
        'issue_date' => 'date-time',
        'billing_period' => null,
        'year' => null,
        'notes' => null,
        'lines' => null,
        'tax_summary' => null,
        'withholding_tax_summary' => null,
        'prepaid_payments' => null,
        'total' => null,
        'document_type' => null,
        'document_sub_type' => null,
        'cufe' => null,
        'cufe_unhashed' => null,
        'business_status' => null,
        'communication_status' => null,
        'document_references' => null,
        'currency' => null,
        'issue_mode' => null,
        'external_reference' => null,
        'payment_means' => null,
        'payment_terms' => null,
        'delivery_terms' => null,
        'allowance_charges' => null,
        'payment_exchange_rate' => null,
        'due_date' => 'date-time',
        'delivery_date' => 'date-time',
        'serie_id' => 'uuid',
        'correlation_document_id' => null,
        'in_transport_document_id' => null,
        'issuer_party_id' => 'uuid',
        'customer_party_id' => 'uuid',
        'pdf_template_id' => 'uuid',
        'virtual_operator_id' => 'uuid',
        'virtual_operator' => null,
        'issuer_party' => null,
        'customer_party' => null,
        'document_files' => null,
        'dian_communication_responses' => null,
        'serie' => null,
        'pdf_template' => null,
        'document_emails' => null,
        'document_attachments' => null,
        'issuer_contacts' => null,
        'customer_contacts' => null,
        'contingency_data' => null,
        'software_security_code' => null,
        'public_document_url' => null,
        'custom_fields' => null,
        'creation_date' => 'date-time',
        'last_update_date' => 'date-time',
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'number' => 'Number',
        'serie_number' => 'SerieNumber',
        'serie_prefix' => 'SeriePrefix',
        'issue_date' => 'IssueDate',
        'billing_period' => 'BillingPeriod',
        'year' => 'Year',
        'notes' => 'Notes',
        'lines' => 'Lines',
        'tax_summary' => 'TaxSummary',
        'withholding_tax_summary' => 'WithholdingTaxSummary',
        'prepaid_payments' => 'PrepaidPayments',
        'total' => 'Total',
        'document_type' => 'DocumentType',
        'document_sub_type' => 'DocumentSubType',
        'cufe' => 'Cufe',
        'cufe_unhashed' => 'CufeUnhashed',
        'business_status' => 'BusinessStatus',
        'communication_status' => 'CommunicationStatus',
        'document_references' => 'DocumentReferences',
        'currency' => 'Currency',
        'issue_mode' => 'IssueMode',
        'external_reference' => 'ExternalReference',
        'payment_means' => 'PaymentMeans',
        'payment_terms' => 'PaymentTerms',
        'delivery_terms' => 'DeliveryTerms',
        'allowance_charges' => 'AllowanceCharges',
        'payment_exchange_rate' => 'PaymentExchangeRate',
        'due_date' => 'DueDate',
        'delivery_date' => 'DeliveryDate',
        'serie_id' => 'SerieId',
        'correlation_document_id' => 'CorrelationDocumentId',
        'in_transport_document_id' => 'InTransportDocumentId',
        'issuer_party_id' => 'IssuerPartyId',
        'customer_party_id' => 'CustomerPartyId',
        'pdf_template_id' => 'PdfTemplateId',
        'virtual_operator_id' => 'VirtualOperatorId',
        'virtual_operator' => 'VirtualOperator',
        'issuer_party' => 'IssuerParty',
        'customer_party' => 'CustomerParty',
        'document_files' => 'DocumentFiles',
        'dian_communication_responses' => 'DianCommunicationResponses',
        'serie' => 'Serie',
        'pdf_template' => 'PdfTemplate',
        'document_emails' => 'DocumentEmails',
        'document_attachments' => 'DocumentAttachments',
        'issuer_contacts' => 'IssuerContacts',
        'customer_contacts' => 'CustomerContacts',
        'contingency_data' => 'ContingencyData',
        'software_security_code' => 'SoftwareSecurityCode',
        'public_document_url' => 'PublicDocumentUrl',
        'custom_fields' => 'CustomFields',
        'creation_date' => 'CreationDate',
        'last_update_date' => 'LastUpdateDate',
        'id' => 'Id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'number' => 'setNumber',
        'serie_number' => 'setSerieNumber',
        'serie_prefix' => 'setSeriePrefix',
        'issue_date' => 'setIssueDate',
        'billing_period' => 'setBillingPeriod',
        'year' => 'setYear',
        'notes' => 'setNotes',
        'lines' => 'setLines',
        'tax_summary' => 'setTaxSummary',
        'withholding_tax_summary' => 'setWithholdingTaxSummary',
        'prepaid_payments' => 'setPrepaidPayments',
        'total' => 'setTotal',
        'document_type' => 'setDocumentType',
        'document_sub_type' => 'setDocumentSubType',
        'cufe' => 'setCufe',
        'cufe_unhashed' => 'setCufeUnhashed',
        'business_status' => 'setBusinessStatus',
        'communication_status' => 'setCommunicationStatus',
        'document_references' => 'setDocumentReferences',
        'currency' => 'setCurrency',
        'issue_mode' => 'setIssueMode',
        'external_reference' => 'setExternalReference',
        'payment_means' => 'setPaymentMeans',
        'payment_terms' => 'setPaymentTerms',
        'delivery_terms' => 'setDeliveryTerms',
        'allowance_charges' => 'setAllowanceCharges',
        'payment_exchange_rate' => 'setPaymentExchangeRate',
        'due_date' => 'setDueDate',
        'delivery_date' => 'setDeliveryDate',
        'serie_id' => 'setSerieId',
        'correlation_document_id' => 'setCorrelationDocumentId',
        'in_transport_document_id' => 'setInTransportDocumentId',
        'issuer_party_id' => 'setIssuerPartyId',
        'customer_party_id' => 'setCustomerPartyId',
        'pdf_template_id' => 'setPdfTemplateId',
        'virtual_operator_id' => 'setVirtualOperatorId',
        'virtual_operator' => 'setVirtualOperator',
        'issuer_party' => 'setIssuerParty',
        'customer_party' => 'setCustomerParty',
        'document_files' => 'setDocumentFiles',
        'dian_communication_responses' => 'setDianCommunicationResponses',
        'serie' => 'setSerie',
        'pdf_template' => 'setPdfTemplate',
        'document_emails' => 'setDocumentEmails',
        'document_attachments' => 'setDocumentAttachments',
        'issuer_contacts' => 'setIssuerContacts',
        'customer_contacts' => 'setCustomerContacts',
        'contingency_data' => 'setContingencyData',
        'software_security_code' => 'setSoftwareSecurityCode',
        'public_document_url' => 'setPublicDocumentUrl',
        'custom_fields' => 'setCustomFields',
        'creation_date' => 'setCreationDate',
        'last_update_date' => 'setLastUpdateDate',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'number' => 'getNumber',
        'serie_number' => 'getSerieNumber',
        'serie_prefix' => 'getSeriePrefix',
        'issue_date' => 'getIssueDate',
        'billing_period' => 'getBillingPeriod',
        'year' => 'getYear',
        'notes' => 'getNotes',
        'lines' => 'getLines',
        'tax_summary' => 'getTaxSummary',
        'withholding_tax_summary' => 'getWithholdingTaxSummary',
        'prepaid_payments' => 'getPrepaidPayments',
        'total' => 'getTotal',
        'document_type' => 'getDocumentType',
        'document_sub_type' => 'getDocumentSubType',
        'cufe' => 'getCufe',
        'cufe_unhashed' => 'getCufeUnhashed',
        'business_status' => 'getBusinessStatus',
        'communication_status' => 'getCommunicationStatus',
        'document_references' => 'getDocumentReferences',
        'currency' => 'getCurrency',
        'issue_mode' => 'getIssueMode',
        'external_reference' => 'getExternalReference',
        'payment_means' => 'getPaymentMeans',
        'payment_terms' => 'getPaymentTerms',
        'delivery_terms' => 'getDeliveryTerms',
        'allowance_charges' => 'getAllowanceCharges',
        'payment_exchange_rate' => 'getPaymentExchangeRate',
        'due_date' => 'getDueDate',
        'delivery_date' => 'getDeliveryDate',
        'serie_id' => 'getSerieId',
        'correlation_document_id' => 'getCorrelationDocumentId',
        'in_transport_document_id' => 'getInTransportDocumentId',
        'issuer_party_id' => 'getIssuerPartyId',
        'customer_party_id' => 'getCustomerPartyId',
        'pdf_template_id' => 'getPdfTemplateId',
        'virtual_operator_id' => 'getVirtualOperatorId',
        'virtual_operator' => 'getVirtualOperator',
        'issuer_party' => 'getIssuerParty',
        'customer_party' => 'getCustomerParty',
        'document_files' => 'getDocumentFiles',
        'dian_communication_responses' => 'getDianCommunicationResponses',
        'serie' => 'getSerie',
        'pdf_template' => 'getPdfTemplate',
        'document_emails' => 'getDocumentEmails',
        'document_attachments' => 'getDocumentAttachments',
        'issuer_contacts' => 'getIssuerContacts',
        'customer_contacts' => 'getCustomerContacts',
        'contingency_data' => 'getContingencyData',
        'software_security_code' => 'getSoftwareSecurityCode',
        'public_document_url' => 'getPublicDocumentUrl',
        'custom_fields' => 'getCustomFields',
        'creation_date' => 'getCreationDate',
        'last_update_date' => 'getLastUpdateDate',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const DOCUMENT_TYPE_SALES_INVOICE = 'SalesInvoice';
    const DOCUMENT_TYPE_CREDIT_NOTE = 'CreditNote';
    const DOCUMENT_TYPE_DEBIT_NOTE = 'DebitNote';
    const ISSUE_MODE_ELECTRONIC = 'Electronic';
    const ISSUE_MODE_BY_COMPUTER = 'ByComputer';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getDocumentTypeAllowableValues()
    {
        return [
            self::DOCUMENT_TYPE_SALES_INVOICE,
            self::DOCUMENT_TYPE_CREDIT_NOTE,
            self::DOCUMENT_TYPE_DEBIT_NOTE,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getIssueModeAllowableValues()
    {
        return [
            self::ISSUE_MODE_ELECTRONIC,
            self::ISSUE_MODE_BY_COMPUTER,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['serie_number'] = isset($data['serie_number']) ? $data['serie_number'] : null;
        $this->container['serie_prefix'] = isset($data['serie_prefix']) ? $data['serie_prefix'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['billing_period'] = isset($data['billing_period']) ? $data['billing_period'] : null;
        $this->container['year'] = isset($data['year']) ? $data['year'] : null;
        $this->container['notes'] = isset($data['notes']) ? $data['notes'] : null;
        $this->container['lines'] = isset($data['lines']) ? $data['lines'] : null;
        $this->container['tax_summary'] = isset($data['tax_summary']) ? $data['tax_summary'] : null;
        $this->container['withholding_tax_summary'] = isset($data['withholding_tax_summary']) ? $data['withholding_tax_summary'] : null;
        $this->container['prepaid_payments'] = isset($data['prepaid_payments']) ? $data['prepaid_payments'] : null;
        $this->container['total'] = isset($data['total']) ? $data['total'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_sub_type'] = isset($data['document_sub_type']) ? $data['document_sub_type'] : null;
        $this->container['cufe'] = isset($data['cufe']) ? $data['cufe'] : null;
        $this->container['cufe_unhashed'] = isset($data['cufe_unhashed']) ? $data['cufe_unhashed'] : null;
        $this->container['business_status'] = isset($data['business_status']) ? $data['business_status'] : null;
        $this->container['communication_status'] = isset($data['communication_status']) ? $data['communication_status'] : null;
        $this->container['document_references'] = isset($data['document_references']) ? $data['document_references'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['issue_mode'] = isset($data['issue_mode']) ? $data['issue_mode'] : null;
        $this->container['external_reference'] = isset($data['external_reference']) ? $data['external_reference'] : null;
        $this->container['payment_means'] = isset($data['payment_means']) ? $data['payment_means'] : null;
        $this->container['payment_terms'] = isset($data['payment_terms']) ? $data['payment_terms'] : null;
        $this->container['delivery_terms'] = isset($data['delivery_terms']) ? $data['delivery_terms'] : null;
        $this->container['allowance_charges'] = isset($data['allowance_charges']) ? $data['allowance_charges'] : null;
        $this->container['payment_exchange_rate'] = isset($data['payment_exchange_rate']) ? $data['payment_exchange_rate'] : null;
        $this->container['due_date'] = isset($data['due_date']) ? $data['due_date'] : null;
        $this->container['delivery_date'] = isset($data['delivery_date']) ? $data['delivery_date'] : null;
        $this->container['serie_id'] = isset($data['serie_id']) ? $data['serie_id'] : null;
        $this->container['correlation_document_id'] = isset($data['correlation_document_id']) ? $data['correlation_document_id'] : null;
        $this->container['in_transport_document_id'] = isset($data['in_transport_document_id']) ? $data['in_transport_document_id'] : null;
        $this->container['issuer_party_id'] = isset($data['issuer_party_id']) ? $data['issuer_party_id'] : null;
        $this->container['customer_party_id'] = isset($data['customer_party_id']) ? $data['customer_party_id'] : null;
        $this->container['pdf_template_id'] = isset($data['pdf_template_id']) ? $data['pdf_template_id'] : null;
        $this->container['virtual_operator_id'] = isset($data['virtual_operator_id']) ? $data['virtual_operator_id'] : null;
        $this->container['virtual_operator'] = isset($data['virtual_operator']) ? $data['virtual_operator'] : null;
        $this->container['issuer_party'] = isset($data['issuer_party']) ? $data['issuer_party'] : null;
        $this->container['customer_party'] = isset($data['customer_party']) ? $data['customer_party'] : null;
        $this->container['document_files'] = isset($data['document_files']) ? $data['document_files'] : null;
        $this->container['dian_communication_responses'] = isset($data['dian_communication_responses']) ? $data['dian_communication_responses'] : null;
        $this->container['serie'] = isset($data['serie']) ? $data['serie'] : null;
        $this->container['pdf_template'] = isset($data['pdf_template']) ? $data['pdf_template'] : null;
        $this->container['document_emails'] = isset($data['document_emails']) ? $data['document_emails'] : null;
        $this->container['document_attachments'] = isset($data['document_attachments']) ? $data['document_attachments'] : null;
        $this->container['issuer_contacts'] = isset($data['issuer_contacts']) ? $data['issuer_contacts'] : null;
        $this->container['customer_contacts'] = isset($data['customer_contacts']) ? $data['customer_contacts'] : null;
        $this->container['contingency_data'] = isset($data['contingency_data']) ? $data['contingency_data'] : null;
        $this->container['software_security_code'] = isset($data['software_security_code']) ? $data['software_security_code'] : null;
        $this->container['public_document_url'] = isset($data['public_document_url']) ? $data['public_document_url'] : null;
        $this->container['custom_fields'] = isset($data['custom_fields']) ? $data['custom_fields'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['last_update_date'] = isset($data['last_update_date']) ? $data['last_update_date'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($this->container['document_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'document_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getIssueModeAllowableValues();
        if (!in_array($this->container['issue_mode'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'issue_mode', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!in_array($this->container['document_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getIssueModeAllowableValues();
        if (!in_array($this->container['issue_mode'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets serie_number
     *
     * @return int
     */
    public function getSerieNumber()
    {
        return $this->container['serie_number'];
    }

    /**
     * Sets serie_number
     *
     * @param int $serie_number serie_number
     *
     * @return $this
     */
    public function setSerieNumber($serie_number)
    {
        $this->container['serie_number'] = $serie_number;

        return $this;
    }

    /**
     * Gets serie_prefix
     *
     * @return string
     */
    public function getSeriePrefix()
    {
        return $this->container['serie_prefix'];
    }

    /**
     * Sets serie_prefix
     *
     * @param string $serie_prefix serie_prefix
     *
     * @return $this
     */
    public function setSeriePrefix($serie_prefix)
    {
        $this->container['serie_prefix'] = $serie_prefix;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return \DateTime
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param \DateTime $issue_date issue_date
     *
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets billing_period
     *
     * @return \Swagger\Client\Model\Period
     */
    public function getBillingPeriod()
    {
        return $this->container['billing_period'];
    }

    /**
     * Sets billing_period
     *
     * @param \Swagger\Client\Model\Period $billing_period billing_period
     *
     * @return $this
     */
    public function setBillingPeriod($billing_period)
    {
        $this->container['billing_period'] = $billing_period;

        return $this;
    }

    /**
     * Gets year
     *
     * @return string
     */
    public function getYear()
    {
        return $this->container['year'];
    }

    /**
     * Sets year
     *
     * @param string $year year
     *
     * @return $this
     */
    public function setYear($year)
    {
        $this->container['year'] = $year;

        return $this;
    }

    /**
     * Gets notes
     *
     * @return string[]
     */
    public function getNotes()
    {
        return $this->container['notes'];
    }

    /**
     * Sets notes
     *
     * @param string[] $notes notes
     *
     * @return $this
     */
    public function setNotes($notes)
    {
        $this->container['notes'] = $notes;

        return $this;
    }

    /**
     * Gets lines
     *
     * @return \Swagger\Client\Model\OutboundDocumentLine[]
     */
    public function getLines()
    {
        return $this->container['lines'];
    }

    /**
     * Sets lines
     *
     * @param \Swagger\Client\Model\OutboundDocumentLine[] $lines lines
     *
     * @return $this
     */
    public function setLines($lines)
    {
        $this->container['lines'] = $lines;

        return $this;
    }

    /**
     * Gets tax_summary
     *
     * @return \Swagger\Client\Model\OutboundDocumentTaxSummary[]
     */
    public function getTaxSummary()
    {
        return $this->container['tax_summary'];
    }

    /**
     * Sets tax_summary
     *
     * @param \Swagger\Client\Model\OutboundDocumentTaxSummary[] $tax_summary tax_summary
     *
     * @return $this
     */
    public function setTaxSummary($tax_summary)
    {
        $this->container['tax_summary'] = $tax_summary;

        return $this;
    }

    /**
     * Gets withholding_tax_summary
     *
     * @return \Swagger\Client\Model\OutboundDocumentWithholdingTaxSummary[]
     */
    public function getWithholdingTaxSummary()
    {
        return $this->container['withholding_tax_summary'];
    }

    /**
     * Sets withholding_tax_summary
     *
     * @param \Swagger\Client\Model\OutboundDocumentWithholdingTaxSummary[] $withholding_tax_summary withholding_tax_summary
     *
     * @return $this
     */
    public function setWithholdingTaxSummary($withholding_tax_summary)
    {
        $this->container['withholding_tax_summary'] = $withholding_tax_summary;

        return $this;
    }

    /**
     * Gets prepaid_payments
     *
     * @return \Swagger\Client\Model\OutboundDocumentPrepaidPayment[]
     */
    public function getPrepaidPayments()
    {
        return $this->container['prepaid_payments'];
    }

    /**
     * Sets prepaid_payments
     *
     * @param \Swagger\Client\Model\OutboundDocumentPrepaidPayment[] $prepaid_payments prepaid_payments
     *
     * @return $this
     */
    public function setPrepaidPayments($prepaid_payments)
    {
        $this->container['prepaid_payments'] = $prepaid_payments;

        return $this;
    }

    /**
     * Gets total
     *
     * @return \Swagger\Client\Model\LegalMonetaryTotal
     */
    public function getTotal()
    {
        return $this->container['total'];
    }

    /**
     * Sets total
     *
     * @param \Swagger\Client\Model\LegalMonetaryTotal $total total
     *
     * @return $this
     */
    public function setTotal($total)
    {
        $this->container['total'] = $total;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type document_type
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $allowedValues = $this->getDocumentTypeAllowableValues();
        if (!is_null($document_type) && !in_array($document_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'document_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_sub_type
     *
     * @return string
     */
    public function getDocumentSubType()
    {
        return $this->container['document_sub_type'];
    }

    /**
     * Sets document_sub_type
     *
     * @param string $document_sub_type document_sub_type
     *
     * @return $this
     */
    public function setDocumentSubType($document_sub_type)
    {
        $this->container['document_sub_type'] = $document_sub_type;

        return $this;
    }

    /**
     * Gets cufe
     *
     * @return string
     */
    public function getCufe()
    {
        return $this->container['cufe'];
    }

    /**
     * Sets cufe
     *
     * @param string $cufe cufe
     *
     * @return $this
     */
    public function setCufe($cufe)
    {
        $this->container['cufe'] = $cufe;

        return $this;
    }

    /**
     * Gets cufe_unhashed
     *
     * @return string
     */
    public function getCufeUnhashed()
    {
        return $this->container['cufe_unhashed'];
    }

    /**
     * Sets cufe_unhashed
     *
     * @param string $cufe_unhashed cufe_unhashed
     *
     * @return $this
     */
    public function setCufeUnhashed($cufe_unhashed)
    {
        $this->container['cufe_unhashed'] = $cufe_unhashed;

        return $this;
    }

    /**
     * Gets business_status
     *
     * @return \Swagger\Client\Model\OutboundDocumentBusinessStatus[]
     */
    public function getBusinessStatus()
    {
        return $this->container['business_status'];
    }

    /**
     * Sets business_status
     *
     * @param \Swagger\Client\Model\OutboundDocumentBusinessStatus[] $business_status business_status
     *
     * @return $this
     */
    public function setBusinessStatus($business_status)
    {
        $this->container['business_status'] = $business_status;

        return $this;
    }

    /**
     * Gets communication_status
     *
     * @return \Swagger\Client\Model\OutboundDocumentCommunicationStatus[]
     */
    public function getCommunicationStatus()
    {
        return $this->container['communication_status'];
    }

    /**
     * Sets communication_status
     *
     * @param \Swagger\Client\Model\OutboundDocumentCommunicationStatus[] $communication_status communication_status
     *
     * @return $this
     */
    public function setCommunicationStatus($communication_status)
    {
        $this->container['communication_status'] = $communication_status;

        return $this;
    }

    /**
     * Gets document_references
     *
     * @return \Swagger\Client\Model\OutboundDocumentReference[]
     */
    public function getDocumentReferences()
    {
        return $this->container['document_references'];
    }

    /**
     * Sets document_references
     *
     * @param \Swagger\Client\Model\OutboundDocumentReference[] $document_references document_references
     *
     * @return $this
     */
    public function setDocumentReferences($document_references)
    {
        $this->container['document_references'] = $document_references;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return \Swagger\Client\Model\Currency
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param \Swagger\Client\Model\Currency $currency currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets issue_mode
     *
     * @return string
     */
    public function getIssueMode()
    {
        return $this->container['issue_mode'];
    }

    /**
     * Sets issue_mode
     *
     * @param string $issue_mode issue_mode
     *
     * @return $this
     */
    public function setIssueMode($issue_mode)
    {
        $allowedValues = $this->getIssueModeAllowableValues();
        if (!is_null($issue_mode) && !in_array($issue_mode, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'issue_mode', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['issue_mode'] = $issue_mode;

        return $this;
    }

    /**
     * Gets external_reference
     *
     * @return string
     */
    public function getExternalReference()
    {
        return $this->container['external_reference'];
    }

    /**
     * Sets external_reference
     *
     * @param string $external_reference external_reference
     *
     * @return $this
     */
    public function setExternalReference($external_reference)
    {
        $this->container['external_reference'] = $external_reference;

        return $this;
    }

    /**
     * Gets payment_means
     *
     * @return \Swagger\Client\Model\OutboundDocumentPaymentMean[]
     */
    public function getPaymentMeans()
    {
        return $this->container['payment_means'];
    }

    /**
     * Sets payment_means
     *
     * @param \Swagger\Client\Model\OutboundDocumentPaymentMean[] $payment_means payment_means
     *
     * @return $this
     */
    public function setPaymentMeans($payment_means)
    {
        $this->container['payment_means'] = $payment_means;

        return $this;
    }

    /**
     * Gets payment_terms
     *
     * @return \Swagger\Client\Model\OutboundDocumentPaymentTerm[]
     */
    public function getPaymentTerms()
    {
        return $this->container['payment_terms'];
    }

    /**
     * Sets payment_terms
     *
     * @param \Swagger\Client\Model\OutboundDocumentPaymentTerm[] $payment_terms payment_terms
     *
     * @return $this
     */
    public function setPaymentTerms($payment_terms)
    {
        $this->container['payment_terms'] = $payment_terms;

        return $this;
    }

    /**
     * Gets delivery_terms
     *
     * @return \Swagger\Client\Model\OutboundDocumentDeliveryTerms
     */
    public function getDeliveryTerms()
    {
        return $this->container['delivery_terms'];
    }

    /**
     * Sets delivery_terms
     *
     * @param \Swagger\Client\Model\OutboundDocumentDeliveryTerms $delivery_terms delivery_terms
     *
     * @return $this
     */
    public function setDeliveryTerms($delivery_terms)
    {
        $this->container['delivery_terms'] = $delivery_terms;

        return $this;
    }

    /**
     * Gets allowance_charges
     *
     * @return \Swagger\Client\Model\OutboundDocumentAllowanceCharge[]
     */
    public function getAllowanceCharges()
    {
        return $this->container['allowance_charges'];
    }

    /**
     * Sets allowance_charges
     *
     * @param \Swagger\Client\Model\OutboundDocumentAllowanceCharge[] $allowance_charges allowance_charges
     *
     * @return $this
     */
    public function setAllowanceCharges($allowance_charges)
    {
        $this->container['allowance_charges'] = $allowance_charges;

        return $this;
    }

    /**
     * Gets payment_exchange_rate
     *
     * @return \Swagger\Client\Model\PaymentExchangeRate
     */
    public function getPaymentExchangeRate()
    {
        return $this->container['payment_exchange_rate'];
    }

    /**
     * Sets payment_exchange_rate
     *
     * @param \Swagger\Client\Model\PaymentExchangeRate $payment_exchange_rate payment_exchange_rate
     *
     * @return $this
     */
    public function setPaymentExchangeRate($payment_exchange_rate)
    {
        $this->container['payment_exchange_rate'] = $payment_exchange_rate;

        return $this;
    }

    /**
     * Gets due_date
     *
     * @return \DateTime
     */
    public function getDueDate()
    {
        return $this->container['due_date'];
    }

    /**
     * Sets due_date
     *
     * @param \DateTime $due_date due_date
     *
     * @return $this
     */
    public function setDueDate($due_date)
    {
        $this->container['due_date'] = $due_date;

        return $this;
    }

    /**
     * Gets delivery_date
     *
     * @return \DateTime
     */
    public function getDeliveryDate()
    {
        return $this->container['delivery_date'];
    }

    /**
     * Sets delivery_date
     *
     * @param \DateTime $delivery_date delivery_date
     *
     * @return $this
     */
    public function setDeliveryDate($delivery_date)
    {
        $this->container['delivery_date'] = $delivery_date;

        return $this;
    }

    /**
     * Gets serie_id
     *
     * @return string
     */
    public function getSerieId()
    {
        return $this->container['serie_id'];
    }

    /**
     * Sets serie_id
     *
     * @param string $serie_id serie_id
     *
     * @return $this
     */
    public function setSerieId($serie_id)
    {
        $this->container['serie_id'] = $serie_id;

        return $this;
    }

    /**
     * Gets correlation_document_id
     *
     * @return string
     */
    public function getCorrelationDocumentId()
    {
        return $this->container['correlation_document_id'];
    }

    /**
     * Sets correlation_document_id
     *
     * @param string $correlation_document_id correlation_document_id
     *
     * @return $this
     */
    public function setCorrelationDocumentId($correlation_document_id)
    {
        $this->container['correlation_document_id'] = $correlation_document_id;

        return $this;
    }

    /**
     * Gets in_transport_document_id
     *
     * @return string
     */
    public function getInTransportDocumentId()
    {
        return $this->container['in_transport_document_id'];
    }

    /**
     * Sets in_transport_document_id
     *
     * @param string $in_transport_document_id in_transport_document_id
     *
     * @return $this
     */
    public function setInTransportDocumentId($in_transport_document_id)
    {
        $this->container['in_transport_document_id'] = $in_transport_document_id;

        return $this;
    }

    /**
     * Gets issuer_party_id
     *
     * @return string
     */
    public function getIssuerPartyId()
    {
        return $this->container['issuer_party_id'];
    }

    /**
     * Sets issuer_party_id
     *
     * @param string $issuer_party_id issuer_party_id
     *
     * @return $this
     */
    public function setIssuerPartyId($issuer_party_id)
    {
        $this->container['issuer_party_id'] = $issuer_party_id;

        return $this;
    }

    /**
     * Gets customer_party_id
     *
     * @return string
     */
    public function getCustomerPartyId()
    {
        return $this->container['customer_party_id'];
    }

    /**
     * Sets customer_party_id
     *
     * @param string $customer_party_id customer_party_id
     *
     * @return $this
     */
    public function setCustomerPartyId($customer_party_id)
    {
        $this->container['customer_party_id'] = $customer_party_id;

        return $this;
    }

    /**
     * Gets pdf_template_id
     *
     * @return string
     */
    public function getPdfTemplateId()
    {
        return $this->container['pdf_template_id'];
    }

    /**
     * Sets pdf_template_id
     *
     * @param string $pdf_template_id pdf_template_id
     *
     * @return $this
     */
    public function setPdfTemplateId($pdf_template_id)
    {
        $this->container['pdf_template_id'] = $pdf_template_id;

        return $this;
    }

    /**
     * Gets virtual_operator_id
     *
     * @return string
     */
    public function getVirtualOperatorId()
    {
        return $this->container['virtual_operator_id'];
    }

    /**
     * Sets virtual_operator_id
     *
     * @param string $virtual_operator_id virtual_operator_id
     *
     * @return $this
     */
    public function setVirtualOperatorId($virtual_operator_id)
    {
        $this->container['virtual_operator_id'] = $virtual_operator_id;

        return $this;
    }

    /**
     * Gets virtual_operator
     *
     * @return \Swagger\Client\Model\VirtualOperator
     */
    public function getVirtualOperator()
    {
        return $this->container['virtual_operator'];
    }

    /**
     * Sets virtual_operator
     *
     * @param \Swagger\Client\Model\VirtualOperator $virtual_operator virtual_operator
     *
     * @return $this
     */
    public function setVirtualOperator($virtual_operator)
    {
        $this->container['virtual_operator'] = $virtual_operator;

        return $this;
    }

    /**
     * Gets issuer_party
     *
     * @return \Swagger\Client\Model\Company
     */
    public function getIssuerParty()
    {
        return $this->container['issuer_party'];
    }

    /**
     * Sets issuer_party
     *
     * @param \Swagger\Client\Model\Company $issuer_party issuer_party
     *
     * @return $this
     */
    public function setIssuerParty($issuer_party)
    {
        $this->container['issuer_party'] = $issuer_party;

        return $this;
    }

    /**
     * Gets customer_party
     *
     * @return \Swagger\Client\Model\Customer
     */
    public function getCustomerParty()
    {
        return $this->container['customer_party'];
    }

    /**
     * Sets customer_party
     *
     * @param \Swagger\Client\Model\Customer $customer_party customer_party
     *
     * @return $this
     */
    public function setCustomerParty($customer_party)
    {
        $this->container['customer_party'] = $customer_party;

        return $this;
    }

    /**
     * Gets document_files
     *
     * @return \Swagger\Client\Model\OutboundDocumentFile[]
     */
    public function getDocumentFiles()
    {
        return $this->container['document_files'];
    }

    /**
     * Sets document_files
     *
     * @param \Swagger\Client\Model\OutboundDocumentFile[] $document_files document_files
     *
     * @return $this
     */
    public function setDocumentFiles($document_files)
    {
        $this->container['document_files'] = $document_files;

        return $this;
    }

    /**
     * Gets dian_communication_responses
     *
     * @return \Swagger\Client\Model\OutboundDocumentDIANCommunicationResponse[]
     */
    public function getDianCommunicationResponses()
    {
        return $this->container['dian_communication_responses'];
    }

    /**
     * Sets dian_communication_responses
     *
     * @param \Swagger\Client\Model\OutboundDocumentDIANCommunicationResponse[] $dian_communication_responses dian_communication_responses
     *
     * @return $this
     */
    public function setDianCommunicationResponses($dian_communication_responses)
    {
        $this->container['dian_communication_responses'] = $dian_communication_responses;

        return $this;
    }

    /**
     * Gets serie
     *
     * @return \Swagger\Client\Model\Serie
     */
    public function getSerie()
    {
        return $this->container['serie'];
    }

    /**
     * Sets serie
     *
     * @param \Swagger\Client\Model\Serie $serie serie
     *
     * @return $this
     */
    public function setSerie($serie)
    {
        $this->container['serie'] = $serie;

        return $this;
    }

    /**
     * Gets pdf_template
     *
     * @return \Swagger\Client\Model\Template
     */
    public function getPdfTemplate()
    {
        return $this->container['pdf_template'];
    }

    /**
     * Sets pdf_template
     *
     * @param \Swagger\Client\Model\Template $pdf_template pdf_template
     *
     * @return $this
     */
    public function setPdfTemplate($pdf_template)
    {
        $this->container['pdf_template'] = $pdf_template;

        return $this;
    }

    /**
     * Gets document_emails
     *
     * @return \Swagger\Client\Model\OutboundDocumentEmail[]
     */
    public function getDocumentEmails()
    {
        return $this->container['document_emails'];
    }

    /**
     * Sets document_emails
     *
     * @param \Swagger\Client\Model\OutboundDocumentEmail[] $document_emails document_emails
     *
     * @return $this
     */
    public function setDocumentEmails($document_emails)
    {
        $this->container['document_emails'] = $document_emails;

        return $this;
    }

    /**
     * Gets document_attachments
     *
     * @return \Swagger\Client\Model\OutboundDocumentAttachment[]
     */
    public function getDocumentAttachments()
    {
        return $this->container['document_attachments'];
    }

    /**
     * Sets document_attachments
     *
     * @param \Swagger\Client\Model\OutboundDocumentAttachment[] $document_attachments document_attachments
     *
     * @return $this
     */
    public function setDocumentAttachments($document_attachments)
    {
        $this->container['document_attachments'] = $document_attachments;

        return $this;
    }

    /**
     * Gets issuer_contacts
     *
     * @return \Swagger\Client\Model\OutboundDocumentIssuerContact[]
     */
    public function getIssuerContacts()
    {
        return $this->container['issuer_contacts'];
    }

    /**
     * Sets issuer_contacts
     *
     * @param \Swagger\Client\Model\OutboundDocumentIssuerContact[] $issuer_contacts issuer_contacts
     *
     * @return $this
     */
    public function setIssuerContacts($issuer_contacts)
    {
        $this->container['issuer_contacts'] = $issuer_contacts;

        return $this;
    }

    /**
     * Gets customer_contacts
     *
     * @return \Swagger\Client\Model\OutboundDocumentCustomerContact[]
     */
    public function getCustomerContacts()
    {
        return $this->container['customer_contacts'];
    }

    /**
     * Sets customer_contacts
     *
     * @param \Swagger\Client\Model\OutboundDocumentCustomerContact[] $customer_contacts customer_contacts
     *
     * @return $this
     */
    public function setCustomerContacts($customer_contacts)
    {
        $this->container['customer_contacts'] = $customer_contacts;

        return $this;
    }

    /**
     * Gets contingency_data
     *
     * @return \Swagger\Client\Model\OutboundDocumentContingencyData
     */
    public function getContingencyData()
    {
        return $this->container['contingency_data'];
    }

    /**
     * Sets contingency_data
     *
     * @param \Swagger\Client\Model\OutboundDocumentContingencyData $contingency_data contingency_data
     *
     * @return $this
     */
    public function setContingencyData($contingency_data)
    {
        $this->container['contingency_data'] = $contingency_data;

        return $this;
    }

    /**
     * Gets software_security_code
     *
     * @return string
     */
    public function getSoftwareSecurityCode()
    {
        return $this->container['software_security_code'];
    }

    /**
     * Sets software_security_code
     *
     * @param string $software_security_code software_security_code
     *
     * @return $this
     */
    public function setSoftwareSecurityCode($software_security_code)
    {
        $this->container['software_security_code'] = $software_security_code;

        return $this;
    }

    /**
     * Gets public_document_url
     *
     * @return string
     */
    public function getPublicDocumentUrl()
    {
        return $this->container['public_document_url'];
    }

    /**
     * Sets public_document_url
     *
     * @param string $public_document_url public_document_url
     *
     * @return $this
     */
    public function setPublicDocumentUrl($public_document_url)
    {
        $this->container['public_document_url'] = $public_document_url;

        return $this;
    }

    /**
     * Gets custom_fields
     *
     * @return \Swagger\Client\Model\CustomField[]
     */
    public function getCustomFields()
    {
        return $this->container['custom_fields'];
    }

    /**
     * Sets custom_fields
     *
     * @param \Swagger\Client\Model\CustomField[] $custom_fields custom_fields
     *
     * @return $this
     */
    public function setCustomFields($custom_fields)
    {
        $this->container['custom_fields'] = $custom_fields;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date creation_date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets last_update_date
     *
     * @return \DateTime
     */
    public function getLastUpdateDate()
    {
        return $this->container['last_update_date'];
    }

    /**
     * Sets last_update_date
     *
     * @param \DateTime $last_update_date last_update_date
     *
     * @return $this
     */
    public function setLastUpdateDate($last_update_date)
    {
        $this->container['last_update_date'] = $last_update_date;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


