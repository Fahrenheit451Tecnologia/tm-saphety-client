<?php
/**
 * OutboundDocumentSummaryOutputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OutboundDocumentSummaryOutputDto Class Doc Comment
 *
 * @category Class
 * @description Gets a short version of document.
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutboundDocumentSummaryOutputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OutboundDocumentSummaryOutputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'number' => 'string',
        'document_type' => 'string',
        'document_sub_type' => 'string',
        'creation_date' => '\DateTime',
        'issue_date' => '\DateTime',
        'currency' => 'string',
        'issuer' => 'string',
        'issuer_vat' => 'string',
        'customer' => 'string',
        'customer_vat' => 'string',
        'total_amount' => 'double',
        'business_status_list' => '\Swagger\Client\Model\BusinessStatusOutputDto[]',
        'business_status_reason' => 'string',
        'communication_status_list' => '\Swagger\Client\Model\CommunicationStatusOutputDto[]',
        'main_notification_email_status' => 'string',
        'main_notification_email_status_date' => '\DateTime',
        'main_notification_email_status_reason' => 'string',
        'customer_party_email' => 'string',
        'document_files' => '\Swagger\Client\Model\DocumentFileOutputDto[]',
        'pdf_of_document' => '\Swagger\Client\Model\DocumentContentFileOutputDto'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'number' => null,
        'document_type' => null,
        'document_sub_type' => null,
        'creation_date' => 'date-time',
        'issue_date' => 'date-time',
        'currency' => null,
        'issuer' => null,
        'issuer_vat' => null,
        'customer' => null,
        'customer_vat' => null,
        'total_amount' => 'double',
        'business_status_list' => null,
        'business_status_reason' => null,
        'communication_status_list' => null,
        'main_notification_email_status' => null,
        'main_notification_email_status_date' => 'date-time',
        'main_notification_email_status_reason' => null,
        'customer_party_email' => null,
        'document_files' => null,
        'pdf_of_document' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'number' => 'Number',
        'document_type' => 'DocumentType',
        'document_sub_type' => 'DocumentSubType',
        'creation_date' => 'CreationDate',
        'issue_date' => 'IssueDate',
        'currency' => 'Currency',
        'issuer' => 'Issuer',
        'issuer_vat' => 'IssuerVAT',
        'customer' => 'Customer',
        'customer_vat' => 'CustomerVAT',
        'total_amount' => 'TotalAmount',
        'business_status_list' => 'BusinessStatusList',
        'business_status_reason' => 'BusinessStatusReason',
        'communication_status_list' => 'CommunicationStatusList',
        'main_notification_email_status' => 'MainNotificationEmailStatus',
        'main_notification_email_status_date' => 'MainNotificationEmailStatusDate',
        'main_notification_email_status_reason' => 'MainNotificationEmailStatusReason',
        'customer_party_email' => 'CustomerPartyEmail',
        'document_files' => 'DocumentFiles',
        'pdf_of_document' => 'PdfOfDocument'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'number' => 'setNumber',
        'document_type' => 'setDocumentType',
        'document_sub_type' => 'setDocumentSubType',
        'creation_date' => 'setCreationDate',
        'issue_date' => 'setIssueDate',
        'currency' => 'setCurrency',
        'issuer' => 'setIssuer',
        'issuer_vat' => 'setIssuerVat',
        'customer' => 'setCustomer',
        'customer_vat' => 'setCustomerVat',
        'total_amount' => 'setTotalAmount',
        'business_status_list' => 'setBusinessStatusList',
        'business_status_reason' => 'setBusinessStatusReason',
        'communication_status_list' => 'setCommunicationStatusList',
        'main_notification_email_status' => 'setMainNotificationEmailStatus',
        'main_notification_email_status_date' => 'setMainNotificationEmailStatusDate',
        'main_notification_email_status_reason' => 'setMainNotificationEmailStatusReason',
        'customer_party_email' => 'setCustomerPartyEmail',
        'document_files' => 'setDocumentFiles',
        'pdf_of_document' => 'setPdfOfDocument'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'number' => 'getNumber',
        'document_type' => 'getDocumentType',
        'document_sub_type' => 'getDocumentSubType',
        'creation_date' => 'getCreationDate',
        'issue_date' => 'getIssueDate',
        'currency' => 'getCurrency',
        'issuer' => 'getIssuer',
        'issuer_vat' => 'getIssuerVat',
        'customer' => 'getCustomer',
        'customer_vat' => 'getCustomerVat',
        'total_amount' => 'getTotalAmount',
        'business_status_list' => 'getBusinessStatusList',
        'business_status_reason' => 'getBusinessStatusReason',
        'communication_status_list' => 'getCommunicationStatusList',
        'main_notification_email_status' => 'getMainNotificationEmailStatus',
        'main_notification_email_status_date' => 'getMainNotificationEmailStatusDate',
        'main_notification_email_status_reason' => 'getMainNotificationEmailStatusReason',
        'customer_party_email' => 'getCustomerPartyEmail',
        'document_files' => 'getDocumentFiles',
        'pdf_of_document' => 'getPdfOfDocument'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['number'] = isset($data['number']) ? $data['number'] : null;
        $this->container['document_type'] = isset($data['document_type']) ? $data['document_type'] : null;
        $this->container['document_sub_type'] = isset($data['document_sub_type']) ? $data['document_sub_type'] : null;
        $this->container['creation_date'] = isset($data['creation_date']) ? $data['creation_date'] : null;
        $this->container['issue_date'] = isset($data['issue_date']) ? $data['issue_date'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['issuer'] = isset($data['issuer']) ? $data['issuer'] : null;
        $this->container['issuer_vat'] = isset($data['issuer_vat']) ? $data['issuer_vat'] : null;
        $this->container['customer'] = isset($data['customer']) ? $data['customer'] : null;
        $this->container['customer_vat'] = isset($data['customer_vat']) ? $data['customer_vat'] : null;
        $this->container['total_amount'] = isset($data['total_amount']) ? $data['total_amount'] : null;
        $this->container['business_status_list'] = isset($data['business_status_list']) ? $data['business_status_list'] : null;
        $this->container['business_status_reason'] = isset($data['business_status_reason']) ? $data['business_status_reason'] : null;
        $this->container['communication_status_list'] = isset($data['communication_status_list']) ? $data['communication_status_list'] : null;
        $this->container['main_notification_email_status'] = isset($data['main_notification_email_status']) ? $data['main_notification_email_status'] : null;
        $this->container['main_notification_email_status_date'] = isset($data['main_notification_email_status_date']) ? $data['main_notification_email_status_date'] : null;
        $this->container['main_notification_email_status_reason'] = isset($data['main_notification_email_status_reason']) ? $data['main_notification_email_status_reason'] : null;
        $this->container['customer_party_email'] = isset($data['customer_party_email']) ? $data['customer_party_email'] : null;
        $this->container['document_files'] = isset($data['document_files']) ? $data['document_files'] : null;
        $this->container['pdf_of_document'] = isset($data['pdf_of_document']) ? $data['pdf_of_document'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id Id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets number
     *
     * @return string
     */
    public function getNumber()
    {
        return $this->container['number'];
    }

    /**
     * Sets number
     *
     * @param string $number Document number
     *
     * @return $this
     */
    public function setNumber($number)
    {
        $this->container['number'] = $number;

        return $this;
    }

    /**
     * Gets document_type
     *
     * @return string
     */
    public function getDocumentType()
    {
        return $this->container['document_type'];
    }

    /**
     * Sets document_type
     *
     * @param string $document_type Type of document
     *
     * @return $this
     */
    public function setDocumentType($document_type)
    {
        $this->container['document_type'] = $document_type;

        return $this;
    }

    /**
     * Gets document_sub_type
     *
     * @return string
     */
    public function getDocumentSubType()
    {
        return $this->container['document_sub_type'];
    }

    /**
     * Sets document_sub_type
     *
     * @param string $document_sub_type Document subtype if any
     *
     * @return $this
     */
    public function setDocumentSubType($document_sub_type)
    {
        $this->container['document_sub_type'] = $document_sub_type;

        return $this;
    }

    /**
     * Gets creation_date
     *
     * @return \DateTime
     */
    public function getCreationDate()
    {
        return $this->container['creation_date'];
    }

    /**
     * Sets creation_date
     *
     * @param \DateTime $creation_date Document creation date
     *
     * @return $this
     */
    public function setCreationDate($creation_date)
    {
        $this->container['creation_date'] = $creation_date;

        return $this;
    }

    /**
     * Gets issue_date
     *
     * @return \DateTime
     */
    public function getIssueDate()
    {
        return $this->container['issue_date'];
    }

    /**
     * Sets issue_date
     *
     * @param \DateTime $issue_date Document issue date
     *
     * @return $this
     */
    public function setIssueDate($issue_date)
    {
        $this->container['issue_date'] = $issue_date;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency Document currency
     *
     * @return $this
     */
    public function setCurrency($currency)
    {
        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets issuer
     *
     * @return string
     */
    public function getIssuer()
    {
        return $this->container['issuer'];
    }

    /**
     * Sets issuer
     *
     * @param string $issuer Issuer name
     *
     * @return $this
     */
    public function setIssuer($issuer)
    {
        $this->container['issuer'] = $issuer;

        return $this;
    }

    /**
     * Gets issuer_vat
     *
     * @return string
     */
    public function getIssuerVat()
    {
        return $this->container['issuer_vat'];
    }

    /**
     * Sets issuer_vat
     *
     * @param string $issuer_vat Issuer NIT
     *
     * @return $this
     */
    public function setIssuerVat($issuer_vat)
    {
        $this->container['issuer_vat'] = $issuer_vat;

        return $this;
    }

    /**
     * Gets customer
     *
     * @return string
     */
    public function getCustomer()
    {
        return $this->container['customer'];
    }

    /**
     * Sets customer
     *
     * @param string $customer Customer name
     *
     * @return $this
     */
    public function setCustomer($customer)
    {
        $this->container['customer'] = $customer;

        return $this;
    }

    /**
     * Gets customer_vat
     *
     * @return string
     */
    public function getCustomerVat()
    {
        return $this->container['customer_vat'];
    }

    /**
     * Sets customer_vat
     *
     * @param string $customer_vat Customer NIT
     *
     * @return $this
     */
    public function setCustomerVat($customer_vat)
    {
        $this->container['customer_vat'] = $customer_vat;

        return $this;
    }

    /**
     * Gets total_amount
     *
     * @return double
     */
    public function getTotalAmount()
    {
        return $this->container['total_amount'];
    }

    /**
     * Sets total_amount
     *
     * @param double $total_amount Total amout
     *
     * @return $this
     */
    public function setTotalAmount($total_amount)
    {
        $this->container['total_amount'] = $total_amount;

        return $this;
    }

    /**
     * Gets business_status_list
     *
     * @return \Swagger\Client\Model\BusinessStatusOutputDto[]
     */
    public function getBusinessStatusList()
    {
        return $this->container['business_status_list'];
    }

    /**
     * Sets business_status_list
     *
     * @param \Swagger\Client\Model\BusinessStatusOutputDto[] $business_status_list Business status list
     *
     * @return $this
     */
    public function setBusinessStatusList($business_status_list)
    {
        $this->container['business_status_list'] = $business_status_list;

        return $this;
    }

    /**
     * Gets business_status_reason
     *
     * @return string
     */
    public function getBusinessStatusReason()
    {
        return $this->container['business_status_reason'];
    }

    /**
     * Sets business_status_reason
     *
     * @param string $business_status_reason Reason for rejection if business status is Rejected
     *
     * @return $this
     */
    public function setBusinessStatusReason($business_status_reason)
    {
        $this->container['business_status_reason'] = $business_status_reason;

        return $this;
    }

    /**
     * Gets communication_status_list
     *
     * @return \Swagger\Client\Model\CommunicationStatusOutputDto[]
     */
    public function getCommunicationStatusList()
    {
        return $this->container['communication_status_list'];
    }

    /**
     * Sets communication_status_list
     *
     * @param \Swagger\Client\Model\CommunicationStatusOutputDto[] $communication_status_list Communication status list
     *
     * @return $this
     */
    public function setCommunicationStatusList($communication_status_list)
    {
        $this->container['communication_status_list'] = $communication_status_list;

        return $this;
    }

    /**
     * Gets main_notification_email_status
     *
     * @return string
     */
    public function getMainNotificationEmailStatus()
    {
        return $this->container['main_notification_email_status'];
    }

    /**
     * Sets main_notification_email_status
     *
     * @param string $main_notification_email_status Last email status of email notification.  Usually the main email is the email set for customer.
     *
     * @return $this
     */
    public function setMainNotificationEmailStatus($main_notification_email_status)
    {
        $this->container['main_notification_email_status'] = $main_notification_email_status;

        return $this;
    }

    /**
     * Gets main_notification_email_status_date
     *
     * @return \DateTime
     */
    public function getMainNotificationEmailStatusDate()
    {
        return $this->container['main_notification_email_status_date'];
    }

    /**
     * Sets main_notification_email_status_date
     *
     * @param \DateTime $main_notification_email_status_date Last email status date of email notification.  Usually the main email is the email set for customer.
     *
     * @return $this
     */
    public function setMainNotificationEmailStatusDate($main_notification_email_status_date)
    {
        $this->container['main_notification_email_status_date'] = $main_notification_email_status_date;

        return $this;
    }

    /**
     * Gets main_notification_email_status_reason
     *
     * @return string
     */
    public function getMainNotificationEmailStatusReason()
    {
        return $this->container['main_notification_email_status_reason'];
    }

    /**
     * Sets main_notification_email_status_reason
     *
     * @param string $main_notification_email_status_reason Last email status reason of email notification.  Usually the main email is the email set for customer.
     *
     * @return $this
     */
    public function setMainNotificationEmailStatusReason($main_notification_email_status_reason)
    {
        $this->container['main_notification_email_status_reason'] = $main_notification_email_status_reason;

        return $this;
    }

    /**
     * Gets customer_party_email
     *
     * @return string
     */
    public function getCustomerPartyEmail()
    {
        return $this->container['customer_party_email'];
    }

    /**
     * Sets customer_party_email
     *
     * @param string $customer_party_email Customer email
     *
     * @return $this
     */
    public function setCustomerPartyEmail($customer_party_email)
    {
        $this->container['customer_party_email'] = $customer_party_email;

        return $this;
    }

    /**
     * Gets document_files
     *
     * @return \Swagger\Client\Model\DocumentFileOutputDto[]
     */
    public function getDocumentFiles()
    {
        return $this->container['document_files'];
    }

    /**
     * Sets document_files
     *
     * @param \Swagger\Client\Model\DocumentFileOutputDto[] $document_files PDF and XML associated with document
     *
     * @return $this
     */
    public function setDocumentFiles($document_files)
    {
        $this->container['document_files'] = $document_files;

        return $this;
    }

    /**
     * Gets pdf_of_document
     *
     * @return \Swagger\Client\Model\DocumentContentFileOutputDto
     */
    public function getPdfOfDocument()
    {
        return $this->container['pdf_of_document'];
    }

    /**
     * Sets pdf_of_document
     *
     * @param \Swagger\Client\Model\DocumentContentFileOutputDto $pdf_of_document The pdf of document.
     *
     * @return $this
     */
    public function setPdfOfDocument($pdf_of_document)
    {
        $this->container['pdf_of_document'] = $pdf_of_document;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


