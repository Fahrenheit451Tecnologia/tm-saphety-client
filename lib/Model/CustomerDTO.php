<?php
/**
 * CustomerDTO
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * CustomerDTO Class Doc Comment
 *
 * @category Class
 * @description The DTO representing a customer
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerDTO implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'CustomerDTO';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'owner_company_id' => 'string',
        'settings' => '\Swagger\Client\Model\CustomerSettingsDTO',
        'integration_settings' => '\Swagger\Client\Model\CustomerIntegrationSettingDTO[]',
        'representation_type' => 'string',
        'obligation_type' => 'string',
        'customs_type' => 'string',
        'location_type' => 'string',
        'id' => 'string',
        'telephone' => 'string',
        'legal_type' => 'string',
        'identification' => '\Swagger\Client\Model\IdentificationDto',
        'website_url' => 'string',
        'email' => 'string',
        'name' => 'string',
        'address' => '\Swagger\Client\Model\AddressDTO',
        'tax_scheme' => 'string',
        'person' => '\Swagger\Client\Model\PersonDTO',
        'industry' => 'string',
        'language_code' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'owner_company_id' => 'uuid',
        'settings' => null,
        'integration_settings' => null,
        'representation_type' => null,
        'obligation_type' => null,
        'customs_type' => null,
        'location_type' => null,
        'id' => 'uuid',
        'telephone' => null,
        'legal_type' => null,
        'identification' => null,
        'website_url' => null,
        'email' => null,
        'name' => null,
        'address' => null,
        'tax_scheme' => null,
        'person' => null,
        'industry' => null,
        'language_code' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'owner_company_id' => 'OwnerCompanyId',
        'settings' => 'Settings',
        'integration_settings' => 'IntegrationSettings',
        'representation_type' => 'RepresentationType',
        'obligation_type' => 'ObligationType',
        'customs_type' => 'CustomsType',
        'location_type' => 'LocationType',
        'id' => 'Id',
        'telephone' => 'Telephone',
        'legal_type' => 'LegalType',
        'identification' => 'Identification',
        'website_url' => 'WebsiteUrl',
        'email' => 'Email',
        'name' => 'Name',
        'address' => 'Address',
        'tax_scheme' => 'TaxScheme',
        'person' => 'Person',
        'industry' => 'Industry',
        'language_code' => 'LanguageCode'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'owner_company_id' => 'setOwnerCompanyId',
        'settings' => 'setSettings',
        'integration_settings' => 'setIntegrationSettings',
        'representation_type' => 'setRepresentationType',
        'obligation_type' => 'setObligationType',
        'customs_type' => 'setCustomsType',
        'location_type' => 'setLocationType',
        'id' => 'setId',
        'telephone' => 'setTelephone',
        'legal_type' => 'setLegalType',
        'identification' => 'setIdentification',
        'website_url' => 'setWebsiteUrl',
        'email' => 'setEmail',
        'name' => 'setName',
        'address' => 'setAddress',
        'tax_scheme' => 'setTaxScheme',
        'person' => 'setPerson',
        'industry' => 'setIndustry',
        'language_code' => 'setLanguageCode'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'owner_company_id' => 'getOwnerCompanyId',
        'settings' => 'getSettings',
        'integration_settings' => 'getIntegrationSettings',
        'representation_type' => 'getRepresentationType',
        'obligation_type' => 'getObligationType',
        'customs_type' => 'getCustomsType',
        'location_type' => 'getLocationType',
        'id' => 'getId',
        'telephone' => 'getTelephone',
        'legal_type' => 'getLegalType',
        'identification' => 'getIdentification',
        'website_url' => 'getWebsiteUrl',
        'email' => 'getEmail',
        'name' => 'getName',
        'address' => 'getAddress',
        'tax_scheme' => 'getTaxScheme',
        'person' => 'getPerson',
        'industry' => 'getIndustry',
        'language_code' => 'getLanguageCode'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    const REPRESENTATION_TYPE__00_PN = 'R_00_PN';
    const REPRESENTATION_TYPE__01_PN = 'R_01_PN';
    const REPRESENTATION_TYPE__02_PN = 'R_02_PN';
    const REPRESENTATION_TYPE__03_PN = 'R_03_PN';
    const REPRESENTATION_TYPE__04_PN = 'R_04_PN';
    const REPRESENTATION_TYPE__05_PN = 'R_05_PN';
    const REPRESENTATION_TYPE__06_PN = 'R_06_PN';
    const REPRESENTATION_TYPE__07_PN = 'R_07_PN';
    const REPRESENTATION_TYPE__08_PN = 'R_08_PN';
    const REPRESENTATION_TYPE__09_PN = 'R_09_PN';
    const REPRESENTATION_TYPE__10_PN = 'R_10_PN';
    const REPRESENTATION_TYPE__11_PN = 'R_11_PN';
    const REPRESENTATION_TYPE__12_PN = 'R_12_PN';
    const REPRESENTATION_TYPE__14_PN = 'R_14_PN';
    const REPRESENTATION_TYPE__15_PN = 'R_15_PN';
    const REPRESENTATION_TYPE__16_PN = 'R_16_PN';
    const REPRESENTATION_TYPE__17_PN = 'R_17_PN';
    const REPRESENTATION_TYPE__21_PN = 'R_21_PN';
    const REPRESENTATION_TYPE__22_PN = 'R_22_PN';
    const REPRESENTATION_TYPE__23_PN = 'R_23_PN';
    const REPRESENTATION_TYPE__24_PN = 'R_24_PN';
    const REPRESENTATION_TYPE__25_PN = 'R_25_PN';
    const REPRESENTATION_TYPE__28_PN = 'R_28_PN';
    const REPRESENTATION_TYPE__29_PN = 'R_29_PN';
    const REPRESENTATION_TYPE__99_PN = 'R_99_PN';
    const REPRESENTATION_TYPE__01_PJ = 'R_01_PJ';
    const REPRESENTATION_TYPE__02_PJ = 'R_02_PJ';
    const REPRESENTATION_TYPE__03_PJ = 'R_03_PJ';
    const REPRESENTATION_TYPE__06_PJ = 'R_06_PJ';
    const REPRESENTATION_TYPE__07_PJ = 'R_07_PJ';
    const REPRESENTATION_TYPE__09_PJ = 'R_09_PJ';
    const REPRESENTATION_TYPE__12_PJ = 'R_12_PJ';
    const REPRESENTATION_TYPE__13_PJ = 'R_13_PJ';
    const REPRESENTATION_TYPE__15_PJ = 'R_15_PJ';
    const REPRESENTATION_TYPE__16_PJ = 'R_16_PJ';
    const REPRESENTATION_TYPE__18_PJ = 'R_18_PJ';
    const REPRESENTATION_TYPE__19_PJ = 'R_19_PJ';
    const REPRESENTATION_TYPE__20_PJ = 'R_20_PJ';
    const REPRESENTATION_TYPE__22_PJ = 'R_22_PJ';
    const REPRESENTATION_TYPE__23_PJ = 'R_23_PJ';
    const REPRESENTATION_TYPE__24_PJ = 'R_24_PJ';
    const REPRESENTATION_TYPE__25_PJ = 'R_25_PJ';
    const REPRESENTATION_TYPE__26_PJ = 'R_26_PJ';
    const REPRESENTATION_TYPE__27_PJ = 'R_27_PJ';
    const REPRESENTATION_TYPE__99_PJ = 'R_99_PJ';
    const OBLIGATION_TYPE__01 = 'O_01';
    const OBLIGATION_TYPE__02 = 'O_02';
    const OBLIGATION_TYPE__03 = 'O_03';
    const OBLIGATION_TYPE__04 = 'O_04';
    const OBLIGATION_TYPE__05 = 'O_05';
    const OBLIGATION_TYPE__06 = 'O_06';
    const OBLIGATION_TYPE__07 = 'O_07';
    const OBLIGATION_TYPE__08 = 'O_08';
    const OBLIGATION_TYPE__09 = 'O_09';
    const OBLIGATION_TYPE__10 = 'O_10';
    const OBLIGATION_TYPE__11 = 'O_11';
    const OBLIGATION_TYPE__12 = 'O_12';
    const OBLIGATION_TYPE__13 = 'O_13';
    const OBLIGATION_TYPE__14 = 'O_14';
    const OBLIGATION_TYPE__15 = 'O_15';
    const OBLIGATION_TYPE__16 = 'O_16';
    const OBLIGATION_TYPE__17 = 'O_17';
    const OBLIGATION_TYPE__18 = 'O_18';
    const OBLIGATION_TYPE__19 = 'O_19';
    const OBLIGATION_TYPE__20 = 'O_20';
    const OBLIGATION_TYPE__21 = 'O_21';
    const OBLIGATION_TYPE__22 = 'O_22';
    const OBLIGATION_TYPE__23 = 'O_23';
    const OBLIGATION_TYPE__24 = 'O_24';
    const OBLIGATION_TYPE__26 = 'O_26';
    const OBLIGATION_TYPE__32 = 'O_32';
    const OBLIGATION_TYPE__33 = 'O_33';
    const OBLIGATION_TYPE__34 = 'O_34';
    const OBLIGATION_TYPE__35 = 'O_35';
    const OBLIGATION_TYPE__36 = 'O_36';
    const OBLIGATION_TYPE__37 = 'O_37';
    const OBLIGATION_TYPE__38 = 'O_38';
    const OBLIGATION_TYPE__39 = 'O_39';
    const OBLIGATION_TYPE__40 = 'O_40';
    const OBLIGATION_TYPE__41 = 'O_41';
    const OBLIGATION_TYPE__42 = 'O_42';
    const OBLIGATION_TYPE__99 = 'O_99';
    const CUSTOMS_TYPE__01 = 'A_01';
    const CUSTOMS_TYPE__02 = 'A_02';
    const CUSTOMS_TYPE__03 = 'A_03';
    const CUSTOMS_TYPE__04 = 'A_04';
    const CUSTOMS_TYPE__05 = 'A_05';
    const CUSTOMS_TYPE__06 = 'A_06';
    const CUSTOMS_TYPE__07 = 'A_07';
    const CUSTOMS_TYPE__08 = 'A_08';
    const CUSTOMS_TYPE__09 = 'A_09';
    const CUSTOMS_TYPE__10 = 'A_10';
    const CUSTOMS_TYPE__11 = 'A_11';
    const CUSTOMS_TYPE__12 = 'A_12';
    const CUSTOMS_TYPE__13 = 'A_13';
    const CUSTOMS_TYPE__14 = 'A_14';
    const CUSTOMS_TYPE__15 = 'A_15';
    const CUSTOMS_TYPE__16 = 'A_16';
    const CUSTOMS_TYPE__17 = 'A_17';
    const CUSTOMS_TYPE__18 = 'A_18';
    const CUSTOMS_TYPE__19 = 'A_19';
    const CUSTOMS_TYPE__20 = 'A_20';
    const CUSTOMS_TYPE__21 = 'A_21';
    const CUSTOMS_TYPE__22 = 'A_22';
    const CUSTOMS_TYPE__23 = 'A_23';
    const CUSTOMS_TYPE__24 = 'A_24';
    const CUSTOMS_TYPE__25 = 'A_25';
    const CUSTOMS_TYPE__26 = 'A_26';
    const CUSTOMS_TYPE__27 = 'A_27';
    const CUSTOMS_TYPE__28 = 'A_28';
    const CUSTOMS_TYPE__29 = 'A_29';
    const CUSTOMS_TYPE__30 = 'A_30';
    const CUSTOMS_TYPE__32 = 'A_32';
    const CUSTOMS_TYPE__34 = 'A_34';
    const CUSTOMS_TYPE__36 = 'A_36';
    const CUSTOMS_TYPE__37 = 'A_37';
    const CUSTOMS_TYPE__38 = 'A_38';
    const CUSTOMS_TYPE__39 = 'A_39';
    const CUSTOMS_TYPE__40 = 'A_40';
    const CUSTOMS_TYPE__41 = 'A_41';
    const CUSTOMS_TYPE__42 = 'A_42';
    const CUSTOMS_TYPE__43 = 'A_43';
    const CUSTOMS_TYPE__44 = 'A_44';
    const CUSTOMS_TYPE__46 = 'A_46';
    const CUSTOMS_TYPE__47 = 'A_47';
    const CUSTOMS_TYPE__48 = 'A_48';
    const CUSTOMS_TYPE__49 = 'A_49';
    const CUSTOMS_TYPE__50 = 'A_50';
    const CUSTOMS_TYPE__53 = 'A_53';
    const CUSTOMS_TYPE__54 = 'A_54';
    const CUSTOMS_TYPE__55 = 'A_55';
    const CUSTOMS_TYPE__56 = 'A_56';
    const CUSTOMS_TYPE__57 = 'A_57';
    const CUSTOMS_TYPE__58 = 'A_58';
    const CUSTOMS_TYPE__60 = 'A_60';
    const CUSTOMS_TYPE__61 = 'A_61';
    const CUSTOMS_TYPE__62 = 'A_62';
    const CUSTOMS_TYPE__63 = 'A_63';
    const CUSTOMS_TYPE__64 = 'A_64';
    const CUSTOMS_TYPE__99 = 'A_99';
    const LOCATION_TYPE__01 = 'E_01';
    const LOCATION_TYPE__02 = 'E_02';
    const LOCATION_TYPE__03 = 'E_03';
    const LOCATION_TYPE__04 = 'E_04';
    const LOCATION_TYPE__05 = 'E_05';
    const LOCATION_TYPE__06 = 'E_06';
    const LOCATION_TYPE__07 = 'E_07';
    const LOCATION_TYPE__08 = 'E_08';
    const LOCATION_TYPE__09 = 'E_09';
    const LOCATION_TYPE__10 = 'E_10';
    const LOCATION_TYPE__11 = 'E_11';
    const LOCATION_TYPE__12 = 'E_12';
    const LOCATION_TYPE__13 = 'E_13';
    const LOCATION_TYPE__14 = 'E_14';
    const LOCATION_TYPE__15 = 'E_15';
    const LOCATION_TYPE__16 = 'E_16';
    const LOCATION_TYPE__17 = 'E_17';
    const LOCATION_TYPE__18 = 'E_18';
    const LOCATION_TYPE__19 = 'E_19';
    const LOCATION_TYPE__20 = 'E_20';
    const LOCATION_TYPE__21 = 'E_21';
    const LOCATION_TYPE__22 = 'E_22';
    const LOCATION_TYPE__99 = 'E_99';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getRepresentationTypeAllowableValues()
    {
        return [
            self::REPRESENTATION_TYPE__00_PN,
            self::REPRESENTATION_TYPE__01_PN,
            self::REPRESENTATION_TYPE__02_PN,
            self::REPRESENTATION_TYPE__03_PN,
            self::REPRESENTATION_TYPE__04_PN,
            self::REPRESENTATION_TYPE__05_PN,
            self::REPRESENTATION_TYPE__06_PN,
            self::REPRESENTATION_TYPE__07_PN,
            self::REPRESENTATION_TYPE__08_PN,
            self::REPRESENTATION_TYPE__09_PN,
            self::REPRESENTATION_TYPE__10_PN,
            self::REPRESENTATION_TYPE__11_PN,
            self::REPRESENTATION_TYPE__12_PN,
            self::REPRESENTATION_TYPE__14_PN,
            self::REPRESENTATION_TYPE__15_PN,
            self::REPRESENTATION_TYPE__16_PN,
            self::REPRESENTATION_TYPE__17_PN,
            self::REPRESENTATION_TYPE__21_PN,
            self::REPRESENTATION_TYPE__22_PN,
            self::REPRESENTATION_TYPE__23_PN,
            self::REPRESENTATION_TYPE__24_PN,
            self::REPRESENTATION_TYPE__25_PN,
            self::REPRESENTATION_TYPE__28_PN,
            self::REPRESENTATION_TYPE__29_PN,
            self::REPRESENTATION_TYPE__99_PN,
            self::REPRESENTATION_TYPE__01_PJ,
            self::REPRESENTATION_TYPE__02_PJ,
            self::REPRESENTATION_TYPE__03_PJ,
            self::REPRESENTATION_TYPE__06_PJ,
            self::REPRESENTATION_TYPE__07_PJ,
            self::REPRESENTATION_TYPE__09_PJ,
            self::REPRESENTATION_TYPE__12_PJ,
            self::REPRESENTATION_TYPE__13_PJ,
            self::REPRESENTATION_TYPE__15_PJ,
            self::REPRESENTATION_TYPE__16_PJ,
            self::REPRESENTATION_TYPE__18_PJ,
            self::REPRESENTATION_TYPE__19_PJ,
            self::REPRESENTATION_TYPE__20_PJ,
            self::REPRESENTATION_TYPE__22_PJ,
            self::REPRESENTATION_TYPE__23_PJ,
            self::REPRESENTATION_TYPE__24_PJ,
            self::REPRESENTATION_TYPE__25_PJ,
            self::REPRESENTATION_TYPE__26_PJ,
            self::REPRESENTATION_TYPE__27_PJ,
            self::REPRESENTATION_TYPE__99_PJ,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getObligationTypeAllowableValues()
    {
        return [
            self::OBLIGATION_TYPE__01,
            self::OBLIGATION_TYPE__02,
            self::OBLIGATION_TYPE__03,
            self::OBLIGATION_TYPE__04,
            self::OBLIGATION_TYPE__05,
            self::OBLIGATION_TYPE__06,
            self::OBLIGATION_TYPE__07,
            self::OBLIGATION_TYPE__08,
            self::OBLIGATION_TYPE__09,
            self::OBLIGATION_TYPE__10,
            self::OBLIGATION_TYPE__11,
            self::OBLIGATION_TYPE__12,
            self::OBLIGATION_TYPE__13,
            self::OBLIGATION_TYPE__14,
            self::OBLIGATION_TYPE__15,
            self::OBLIGATION_TYPE__16,
            self::OBLIGATION_TYPE__17,
            self::OBLIGATION_TYPE__18,
            self::OBLIGATION_TYPE__19,
            self::OBLIGATION_TYPE__20,
            self::OBLIGATION_TYPE__21,
            self::OBLIGATION_TYPE__22,
            self::OBLIGATION_TYPE__23,
            self::OBLIGATION_TYPE__24,
            self::OBLIGATION_TYPE__26,
            self::OBLIGATION_TYPE__32,
            self::OBLIGATION_TYPE__33,
            self::OBLIGATION_TYPE__34,
            self::OBLIGATION_TYPE__35,
            self::OBLIGATION_TYPE__36,
            self::OBLIGATION_TYPE__37,
            self::OBLIGATION_TYPE__38,
            self::OBLIGATION_TYPE__39,
            self::OBLIGATION_TYPE__40,
            self::OBLIGATION_TYPE__41,
            self::OBLIGATION_TYPE__42,
            self::OBLIGATION_TYPE__99,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getCustomsTypeAllowableValues()
    {
        return [
            self::CUSTOMS_TYPE__01,
            self::CUSTOMS_TYPE__02,
            self::CUSTOMS_TYPE__03,
            self::CUSTOMS_TYPE__04,
            self::CUSTOMS_TYPE__05,
            self::CUSTOMS_TYPE__06,
            self::CUSTOMS_TYPE__07,
            self::CUSTOMS_TYPE__08,
            self::CUSTOMS_TYPE__09,
            self::CUSTOMS_TYPE__10,
            self::CUSTOMS_TYPE__11,
            self::CUSTOMS_TYPE__12,
            self::CUSTOMS_TYPE__13,
            self::CUSTOMS_TYPE__14,
            self::CUSTOMS_TYPE__15,
            self::CUSTOMS_TYPE__16,
            self::CUSTOMS_TYPE__17,
            self::CUSTOMS_TYPE__18,
            self::CUSTOMS_TYPE__19,
            self::CUSTOMS_TYPE__20,
            self::CUSTOMS_TYPE__21,
            self::CUSTOMS_TYPE__22,
            self::CUSTOMS_TYPE__23,
            self::CUSTOMS_TYPE__24,
            self::CUSTOMS_TYPE__25,
            self::CUSTOMS_TYPE__26,
            self::CUSTOMS_TYPE__27,
            self::CUSTOMS_TYPE__28,
            self::CUSTOMS_TYPE__29,
            self::CUSTOMS_TYPE__30,
            self::CUSTOMS_TYPE__32,
            self::CUSTOMS_TYPE__34,
            self::CUSTOMS_TYPE__36,
            self::CUSTOMS_TYPE__37,
            self::CUSTOMS_TYPE__38,
            self::CUSTOMS_TYPE__39,
            self::CUSTOMS_TYPE__40,
            self::CUSTOMS_TYPE__41,
            self::CUSTOMS_TYPE__42,
            self::CUSTOMS_TYPE__43,
            self::CUSTOMS_TYPE__44,
            self::CUSTOMS_TYPE__46,
            self::CUSTOMS_TYPE__47,
            self::CUSTOMS_TYPE__48,
            self::CUSTOMS_TYPE__49,
            self::CUSTOMS_TYPE__50,
            self::CUSTOMS_TYPE__53,
            self::CUSTOMS_TYPE__54,
            self::CUSTOMS_TYPE__55,
            self::CUSTOMS_TYPE__56,
            self::CUSTOMS_TYPE__57,
            self::CUSTOMS_TYPE__58,
            self::CUSTOMS_TYPE__60,
            self::CUSTOMS_TYPE__61,
            self::CUSTOMS_TYPE__62,
            self::CUSTOMS_TYPE__63,
            self::CUSTOMS_TYPE__64,
            self::CUSTOMS_TYPE__99,
        ];
    }
    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getLocationTypeAllowableValues()
    {
        return [
            self::LOCATION_TYPE__01,
            self::LOCATION_TYPE__02,
            self::LOCATION_TYPE__03,
            self::LOCATION_TYPE__04,
            self::LOCATION_TYPE__05,
            self::LOCATION_TYPE__06,
            self::LOCATION_TYPE__07,
            self::LOCATION_TYPE__08,
            self::LOCATION_TYPE__09,
            self::LOCATION_TYPE__10,
            self::LOCATION_TYPE__11,
            self::LOCATION_TYPE__12,
            self::LOCATION_TYPE__13,
            self::LOCATION_TYPE__14,
            self::LOCATION_TYPE__15,
            self::LOCATION_TYPE__16,
            self::LOCATION_TYPE__17,
            self::LOCATION_TYPE__18,
            self::LOCATION_TYPE__19,
            self::LOCATION_TYPE__20,
            self::LOCATION_TYPE__21,
            self::LOCATION_TYPE__22,
            self::LOCATION_TYPE__99,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['owner_company_id'] = isset($data['owner_company_id']) ? $data['owner_company_id'] : null;
        $this->container['settings'] = isset($data['settings']) ? $data['settings'] : null;
        $this->container['integration_settings'] = isset($data['integration_settings']) ? $data['integration_settings'] : null;
        $this->container['representation_type'] = isset($data['representation_type']) ? $data['representation_type'] : null;
        $this->container['obligation_type'] = isset($data['obligation_type']) ? $data['obligation_type'] : null;
        $this->container['customs_type'] = isset($data['customs_type']) ? $data['customs_type'] : null;
        $this->container['location_type'] = isset($data['location_type']) ? $data['location_type'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['telephone'] = isset($data['telephone']) ? $data['telephone'] : null;
        $this->container['legal_type'] = isset($data['legal_type']) ? $data['legal_type'] : null;
        $this->container['identification'] = isset($data['identification']) ? $data['identification'] : null;
        $this->container['website_url'] = isset($data['website_url']) ? $data['website_url'] : null;
        $this->container['email'] = isset($data['email']) ? $data['email'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['address'] = isset($data['address']) ? $data['address'] : null;
        $this->container['tax_scheme'] = isset($data['tax_scheme']) ? $data['tax_scheme'] : null;
        $this->container['person'] = isset($data['person']) ? $data['person'] : null;
        $this->container['industry'] = isset($data['industry']) ? $data['industry'] : null;
        $this->container['language_code'] = isset($data['language_code']) ? $data['language_code'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['owner_company_id'] === null) {
            $invalidProperties[] = "'owner_company_id' can't be null";
        }
        $allowedValues = $this->getRepresentationTypeAllowableValues();
        if (!in_array($this->container['representation_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'representation_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getObligationTypeAllowableValues();
        if (!in_array($this->container['obligation_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'obligation_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getCustomsTypeAllowableValues();
        if (!in_array($this->container['customs_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'customs_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!in_array($this->container['location_type'], $allowedValues)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'location_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        if ($this->container['owner_company_id'] === null) {
            return false;
        }
        $allowedValues = $this->getRepresentationTypeAllowableValues();
        if (!in_array($this->container['representation_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getObligationTypeAllowableValues();
        if (!in_array($this->container['obligation_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getCustomsTypeAllowableValues();
        if (!in_array($this->container['customs_type'], $allowedValues)) {
            return false;
        }
        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!in_array($this->container['location_type'], $allowedValues)) {
            return false;
        }
        return true;
    }


    /**
     * Gets owner_company_id
     *
     * @return string
     */
    public function getOwnerCompanyId()
    {
        return $this->container['owner_company_id'];
    }

    /**
     * Sets owner_company_id
     *
     * @param string $owner_company_id The Id of the Customer's owner company.
     *
     * @return $this
     */
    public function setOwnerCompanyId($owner_company_id)
    {
        $this->container['owner_company_id'] = $owner_company_id;

        return $this;
    }

    /**
     * Gets settings
     *
     * @return \Swagger\Client\Model\CustomerSettingsDTO
     */
    public function getSettings()
    {
        return $this->container['settings'];
    }

    /**
     * Sets settings
     *
     * @param \Swagger\Client\Model\CustomerSettingsDTO $settings Customer settings
     *
     * @return $this
     */
    public function setSettings($settings)
    {
        $this->container['settings'] = $settings;

        return $this;
    }

    /**
     * Gets integration_settings
     *
     * @return \Swagger\Client\Model\CustomerIntegrationSettingDTO[]
     */
    public function getIntegrationSettings()
    {
        return $this->container['integration_settings'];
    }

    /**
     * Sets integration_settings
     *
     * @param \Swagger\Client\Model\CustomerIntegrationSettingDTO[] $integration_settings List of specific settings for customer integration
     *
     * @return $this
     */
    public function setIntegrationSettings($integration_settings)
    {
        $this->container['integration_settings'] = $integration_settings;

        return $this;
    }

    /**
     * Gets representation_type
     *
     * @return string
     */
    public function getRepresentationType()
    {
        return $this->container['representation_type'];
    }

    /**
     * Sets representation_type
     *
     * @param string $representation_type Representation type of customer
     *
     * @return $this
     */
    public function setRepresentationType($representation_type)
    {
        $allowedValues = $this->getRepresentationTypeAllowableValues();
        if (!is_null($representation_type) && !in_array($representation_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'representation_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['representation_type'] = $representation_type;

        return $this;
    }

    /**
     * Gets obligation_type
     *
     * @return string
     */
    public function getObligationType()
    {
        return $this->container['obligation_type'];
    }

    /**
     * Sets obligation_type
     *
     * @param string $obligation_type Obligations type of customer
     *
     * @return $this
     */
    public function setObligationType($obligation_type)
    {
        $allowedValues = $this->getObligationTypeAllowableValues();
        if (!is_null($obligation_type) && !in_array($obligation_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'obligation_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['obligation_type'] = $obligation_type;

        return $this;
    }

    /**
     * Gets customs_type
     *
     * @return string
     */
    public function getCustomsType()
    {
        return $this->container['customs_type'];
    }

    /**
     * Sets customs_type
     *
     * @param string $customs_type Customs type of customer
     *
     * @return $this
     */
    public function setCustomsType($customs_type)
    {
        $allowedValues = $this->getCustomsTypeAllowableValues();
        if (!is_null($customs_type) && !in_array($customs_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'customs_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['customs_type'] = $customs_type;

        return $this;
    }

    /**
     * Gets location_type
     *
     * @return string
     */
    public function getLocationType()
    {
        return $this->container['location_type'];
    }

    /**
     * Sets location_type
     *
     * @param string $location_type Location type of customer
     *
     * @return $this
     */
    public function setLocationType($location_type)
    {
        $allowedValues = $this->getLocationTypeAllowableValues();
        if (!is_null($location_type) && !in_array($location_type, $allowedValues)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'location_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['location_type'] = $location_type;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets telephone
     *
     * @return string
     */
    public function getTelephone()
    {
        return $this->container['telephone'];
    }

    /**
     * Sets telephone
     *
     * @param string $telephone telephone
     *
     * @return $this
     */
    public function setTelephone($telephone)
    {
        $this->container['telephone'] = $telephone;

        return $this;
    }

    /**
     * Gets legal_type
     *
     * @return string
     */
    public function getLegalType()
    {
        return $this->container['legal_type'];
    }

    /**
     * Sets legal_type
     *
     * @param string $legal_type legal_type
     *
     * @return $this
     */
    public function setLegalType($legal_type)
    {
        $this->container['legal_type'] = $legal_type;

        return $this;
    }

    /**
     * Gets identification
     *
     * @return \Swagger\Client\Model\IdentificationDto
     */
    public function getIdentification()
    {
        return $this->container['identification'];
    }

    /**
     * Sets identification
     *
     * @param \Swagger\Client\Model\IdentificationDto $identification identification
     *
     * @return $this
     */
    public function setIdentification($identification)
    {
        $this->container['identification'] = $identification;

        return $this;
    }

    /**
     * Gets website_url
     *
     * @return string
     */
    public function getWebsiteUrl()
    {
        return $this->container['website_url'];
    }

    /**
     * Sets website_url
     *
     * @param string $website_url website_url
     *
     * @return $this
     */
    public function setWebsiteUrl($website_url)
    {
        $this->container['website_url'] = $website_url;

        return $this;
    }

    /**
     * Gets email
     *
     * @return string
     */
    public function getEmail()
    {
        return $this->container['email'];
    }

    /**
     * Sets email
     *
     * @param string $email email
     *
     * @return $this
     */
    public function setEmail($email)
    {
        $this->container['email'] = $email;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets address
     *
     * @return \Swagger\Client\Model\AddressDTO
     */
    public function getAddress()
    {
        return $this->container['address'];
    }

    /**
     * Sets address
     *
     * @param \Swagger\Client\Model\AddressDTO $address address
     *
     * @return $this
     */
    public function setAddress($address)
    {
        $this->container['address'] = $address;

        return $this;
    }

    /**
     * Gets tax_scheme
     *
     * @return string
     */
    public function getTaxScheme()
    {
        return $this->container['tax_scheme'];
    }

    /**
     * Sets tax_scheme
     *
     * @param string $tax_scheme tax_scheme
     *
     * @return $this
     */
    public function setTaxScheme($tax_scheme)
    {
        $this->container['tax_scheme'] = $tax_scheme;

        return $this;
    }

    /**
     * Gets person
     *
     * @return \Swagger\Client\Model\PersonDTO
     */
    public function getPerson()
    {
        return $this->container['person'];
    }

    /**
     * Sets person
     *
     * @param \Swagger\Client\Model\PersonDTO $person person
     *
     * @return $this
     */
    public function setPerson($person)
    {
        $this->container['person'] = $person;

        return $this;
    }

    /**
     * Gets industry
     *
     * @return string
     */
    public function getIndustry()
    {
        return $this->container['industry'];
    }

    /**
     * Sets industry
     *
     * @param string $industry industry
     *
     * @return $this
     */
    public function setIndustry($industry)
    {
        $this->container['industry'] = $industry;

        return $this;
    }

    /**
     * Gets language_code
     *
     * @return string
     */
    public function getLanguageCode()
    {
        return $this->container['language_code'];
    }

    /**
     * Sets language_code
     *
     * @param string $language_code language_code
     *
     * @return $this
     */
    public function setLanguageCode($language_code)
    {
        $this->container['language_code'] = $language_code;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


