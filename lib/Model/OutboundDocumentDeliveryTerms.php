<?php
/**
 * OutboundDocumentDeliveryTerms
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * OutboundDocumentDeliveryTerms Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutboundDocumentDeliveryTerms implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'OutboundDocumentDeliveryTerms';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'special_terms' => 'string',
        'incoterm_code' => 'string',
        'delivery_location_id' => 'string',
        'delivery_location_description' => 'string',
        'document_id' => 'string',
        'id' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'special_terms' => null,
        'incoterm_code' => null,
        'delivery_location_id' => null,
        'delivery_location_description' => null,
        'document_id' => 'uuid',
        'id' => 'uuid'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'special_terms' => 'SpecialTerms',
        'incoterm_code' => 'IncotermCode',
        'delivery_location_id' => 'DeliveryLocationId',
        'delivery_location_description' => 'DeliveryLocationDescription',
        'document_id' => 'DocumentId',
        'id' => 'Id'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'special_terms' => 'setSpecialTerms',
        'incoterm_code' => 'setIncotermCode',
        'delivery_location_id' => 'setDeliveryLocationId',
        'delivery_location_description' => 'setDeliveryLocationDescription',
        'document_id' => 'setDocumentId',
        'id' => 'setId'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'special_terms' => 'getSpecialTerms',
        'incoterm_code' => 'getIncotermCode',
        'delivery_location_id' => 'getDeliveryLocationId',
        'delivery_location_description' => 'getDeliveryLocationDescription',
        'document_id' => 'getDocumentId',
        'id' => 'getId'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['special_terms'] = isset($data['special_terms']) ? $data['special_terms'] : null;
        $this->container['incoterm_code'] = isset($data['incoterm_code']) ? $data['incoterm_code'] : null;
        $this->container['delivery_location_id'] = isset($data['delivery_location_id']) ? $data['delivery_location_id'] : null;
        $this->container['delivery_location_description'] = isset($data['delivery_location_description']) ? $data['delivery_location_description'] : null;
        $this->container['document_id'] = isset($data['document_id']) ? $data['document_id'] : null;
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets special_terms
     *
     * @return string
     */
    public function getSpecialTerms()
    {
        return $this->container['special_terms'];
    }

    /**
     * Sets special_terms
     *
     * @param string $special_terms special_terms
     *
     * @return $this
     */
    public function setSpecialTerms($special_terms)
    {
        $this->container['special_terms'] = $special_terms;

        return $this;
    }

    /**
     * Gets incoterm_code
     *
     * @return string
     */
    public function getIncotermCode()
    {
        return $this->container['incoterm_code'];
    }

    /**
     * Sets incoterm_code
     *
     * @param string $incoterm_code incoterm_code
     *
     * @return $this
     */
    public function setIncotermCode($incoterm_code)
    {
        $this->container['incoterm_code'] = $incoterm_code;

        return $this;
    }

    /**
     * Gets delivery_location_id
     *
     * @return string
     */
    public function getDeliveryLocationId()
    {
        return $this->container['delivery_location_id'];
    }

    /**
     * Sets delivery_location_id
     *
     * @param string $delivery_location_id delivery_location_id
     *
     * @return $this
     */
    public function setDeliveryLocationId($delivery_location_id)
    {
        $this->container['delivery_location_id'] = $delivery_location_id;

        return $this;
    }

    /**
     * Gets delivery_location_description
     *
     * @return string
     */
    public function getDeliveryLocationDescription()
    {
        return $this->container['delivery_location_description'];
    }

    /**
     * Sets delivery_location_description
     *
     * @param string $delivery_location_description delivery_location_description
     *
     * @return $this
     */
    public function setDeliveryLocationDescription($delivery_location_description)
    {
        $this->container['delivery_location_description'] = $delivery_location_description;

        return $this;
    }

    /**
     * Gets document_id
     *
     * @return string
     */
    public function getDocumentId()
    {
        return $this->container['document_id'];
    }

    /**
     * Sets document_id
     *
     * @param string $document_id document_id
     *
     * @return $this
     */
    public function setDocumentId($document_id)
    {
        $this->container['document_id'] = $document_id;

        return $this;
    }

    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


