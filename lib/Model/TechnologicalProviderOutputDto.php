<?php
/**
 * TechnologicalProviderOutputDto
 *
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Model;

use \ArrayAccess;
use \Swagger\Client\ObjectSerializer;

/**
 * TechnologicalProviderOutputDto Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class TechnologicalProviderOutputDto implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $swaggerModelName = 'TechnologicalProviderOutputDto';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerTypes = [
        'id' => 'string',
        'name' => 'string',
        'nit' => 'string',
        'inbound_configuration_username' => 'string',
        'inbound_configuration_password_expiration_date' => '\DateTime',
        'outbound_configuration_sftp_server' => 'string',
        'outbound_configuration_sftp_user' => 'string',
        'outbound_configuration_sftp_password' => 'string',
        'outbound_configuration_sftp_port' => 'int',
        'outbound_configuration_rest_service_base_url' => 'string',
        'outbound_configuration_rest_service_user' => 'string',
        'outbound_configuration_rest_service_password' => 'string',
        'outbound_configuration_contingency_email' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $swaggerFormats = [
        'id' => 'uuid',
        'name' => null,
        'nit' => null,
        'inbound_configuration_username' => null,
        'inbound_configuration_password_expiration_date' => 'date-time',
        'outbound_configuration_sftp_server' => null,
        'outbound_configuration_sftp_user' => null,
        'outbound_configuration_sftp_password' => null,
        'outbound_configuration_sftp_port' => 'int32',
        'outbound_configuration_rest_service_base_url' => null,
        'outbound_configuration_rest_service_user' => null,
        'outbound_configuration_rest_service_password' => null,
        'outbound_configuration_contingency_email' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerTypes()
    {
        return self::$swaggerTypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function swaggerFormats()
    {
        return self::$swaggerFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'Id',
        'name' => 'Name',
        'nit' => 'Nit',
        'inbound_configuration_username' => 'InboundConfigurationUsername',
        'inbound_configuration_password_expiration_date' => 'InboundConfigurationPasswordExpirationDate',
        'outbound_configuration_sftp_server' => 'OutboundConfigurationSftpServer',
        'outbound_configuration_sftp_user' => 'OutboundConfigurationSftpUser',
        'outbound_configuration_sftp_password' => 'OutboundConfigurationSftpPassword',
        'outbound_configuration_sftp_port' => 'OutboundConfigurationSftpPort',
        'outbound_configuration_rest_service_base_url' => 'OutboundConfigurationRestServiceBaseUrl',
        'outbound_configuration_rest_service_user' => 'OutboundConfigurationRestServiceUser',
        'outbound_configuration_rest_service_password' => 'OutboundConfigurationRestServicePassword',
        'outbound_configuration_contingency_email' => 'OutboundConfigurationContingencyEmail'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'name' => 'setName',
        'nit' => 'setNit',
        'inbound_configuration_username' => 'setInboundConfigurationUsername',
        'inbound_configuration_password_expiration_date' => 'setInboundConfigurationPasswordExpirationDate',
        'outbound_configuration_sftp_server' => 'setOutboundConfigurationSftpServer',
        'outbound_configuration_sftp_user' => 'setOutboundConfigurationSftpUser',
        'outbound_configuration_sftp_password' => 'setOutboundConfigurationSftpPassword',
        'outbound_configuration_sftp_port' => 'setOutboundConfigurationSftpPort',
        'outbound_configuration_rest_service_base_url' => 'setOutboundConfigurationRestServiceBaseUrl',
        'outbound_configuration_rest_service_user' => 'setOutboundConfigurationRestServiceUser',
        'outbound_configuration_rest_service_password' => 'setOutboundConfigurationRestServicePassword',
        'outbound_configuration_contingency_email' => 'setOutboundConfigurationContingencyEmail'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'name' => 'getName',
        'nit' => 'getNit',
        'inbound_configuration_username' => 'getInboundConfigurationUsername',
        'inbound_configuration_password_expiration_date' => 'getInboundConfigurationPasswordExpirationDate',
        'outbound_configuration_sftp_server' => 'getOutboundConfigurationSftpServer',
        'outbound_configuration_sftp_user' => 'getOutboundConfigurationSftpUser',
        'outbound_configuration_sftp_password' => 'getOutboundConfigurationSftpPassword',
        'outbound_configuration_sftp_port' => 'getOutboundConfigurationSftpPort',
        'outbound_configuration_rest_service_base_url' => 'getOutboundConfigurationRestServiceBaseUrl',
        'outbound_configuration_rest_service_user' => 'getOutboundConfigurationRestServiceUser',
        'outbound_configuration_rest_service_password' => 'getOutboundConfigurationRestServicePassword',
        'outbound_configuration_contingency_email' => 'getOutboundConfigurationContingencyEmail'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$swaggerModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['nit'] = isset($data['nit']) ? $data['nit'] : null;
        $this->container['inbound_configuration_username'] = isset($data['inbound_configuration_username']) ? $data['inbound_configuration_username'] : null;
        $this->container['inbound_configuration_password_expiration_date'] = isset($data['inbound_configuration_password_expiration_date']) ? $data['inbound_configuration_password_expiration_date'] : null;
        $this->container['outbound_configuration_sftp_server'] = isset($data['outbound_configuration_sftp_server']) ? $data['outbound_configuration_sftp_server'] : null;
        $this->container['outbound_configuration_sftp_user'] = isset($data['outbound_configuration_sftp_user']) ? $data['outbound_configuration_sftp_user'] : null;
        $this->container['outbound_configuration_sftp_password'] = isset($data['outbound_configuration_sftp_password']) ? $data['outbound_configuration_sftp_password'] : null;
        $this->container['outbound_configuration_sftp_port'] = isset($data['outbound_configuration_sftp_port']) ? $data['outbound_configuration_sftp_port'] : null;
        $this->container['outbound_configuration_rest_service_base_url'] = isset($data['outbound_configuration_rest_service_base_url']) ? $data['outbound_configuration_rest_service_base_url'] : null;
        $this->container['outbound_configuration_rest_service_user'] = isset($data['outbound_configuration_rest_service_user']) ? $data['outbound_configuration_rest_service_user'] : null;
        $this->container['outbound_configuration_rest_service_password'] = isset($data['outbound_configuration_rest_service_password']) ? $data['outbound_configuration_rest_service_password'] : null;
        $this->container['outbound_configuration_contingency_email'] = isset($data['outbound_configuration_contingency_email']) ? $data['outbound_configuration_contingency_email'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {

        return true;
    }


    /**
     * Gets id
     *
     * @return string
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param string $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets nit
     *
     * @return string
     */
    public function getNit()
    {
        return $this->container['nit'];
    }

    /**
     * Sets nit
     *
     * @param string $nit nit
     *
     * @return $this
     */
    public function setNit($nit)
    {
        $this->container['nit'] = $nit;

        return $this;
    }

    /**
     * Gets inbound_configuration_username
     *
     * @return string
     */
    public function getInboundConfigurationUsername()
    {
        return $this->container['inbound_configuration_username'];
    }

    /**
     * Sets inbound_configuration_username
     *
     * @param string $inbound_configuration_username inbound_configuration_username
     *
     * @return $this
     */
    public function setInboundConfigurationUsername($inbound_configuration_username)
    {
        $this->container['inbound_configuration_username'] = $inbound_configuration_username;

        return $this;
    }

    /**
     * Gets inbound_configuration_password_expiration_date
     *
     * @return \DateTime
     */
    public function getInboundConfigurationPasswordExpirationDate()
    {
        return $this->container['inbound_configuration_password_expiration_date'];
    }

    /**
     * Sets inbound_configuration_password_expiration_date
     *
     * @param \DateTime $inbound_configuration_password_expiration_date inbound_configuration_password_expiration_date
     *
     * @return $this
     */
    public function setInboundConfigurationPasswordExpirationDate($inbound_configuration_password_expiration_date)
    {
        $this->container['inbound_configuration_password_expiration_date'] = $inbound_configuration_password_expiration_date;

        return $this;
    }

    /**
     * Gets outbound_configuration_sftp_server
     *
     * @return string
     */
    public function getOutboundConfigurationSftpServer()
    {
        return $this->container['outbound_configuration_sftp_server'];
    }

    /**
     * Sets outbound_configuration_sftp_server
     *
     * @param string $outbound_configuration_sftp_server outbound_configuration_sftp_server
     *
     * @return $this
     */
    public function setOutboundConfigurationSftpServer($outbound_configuration_sftp_server)
    {
        $this->container['outbound_configuration_sftp_server'] = $outbound_configuration_sftp_server;

        return $this;
    }

    /**
     * Gets outbound_configuration_sftp_user
     *
     * @return string
     */
    public function getOutboundConfigurationSftpUser()
    {
        return $this->container['outbound_configuration_sftp_user'];
    }

    /**
     * Sets outbound_configuration_sftp_user
     *
     * @param string $outbound_configuration_sftp_user outbound_configuration_sftp_user
     *
     * @return $this
     */
    public function setOutboundConfigurationSftpUser($outbound_configuration_sftp_user)
    {
        $this->container['outbound_configuration_sftp_user'] = $outbound_configuration_sftp_user;

        return $this;
    }

    /**
     * Gets outbound_configuration_sftp_password
     *
     * @return string
     */
    public function getOutboundConfigurationSftpPassword()
    {
        return $this->container['outbound_configuration_sftp_password'];
    }

    /**
     * Sets outbound_configuration_sftp_password
     *
     * @param string $outbound_configuration_sftp_password outbound_configuration_sftp_password
     *
     * @return $this
     */
    public function setOutboundConfigurationSftpPassword($outbound_configuration_sftp_password)
    {
        $this->container['outbound_configuration_sftp_password'] = $outbound_configuration_sftp_password;

        return $this;
    }

    /**
     * Gets outbound_configuration_sftp_port
     *
     * @return int
     */
    public function getOutboundConfigurationSftpPort()
    {
        return $this->container['outbound_configuration_sftp_port'];
    }

    /**
     * Sets outbound_configuration_sftp_port
     *
     * @param int $outbound_configuration_sftp_port outbound_configuration_sftp_port
     *
     * @return $this
     */
    public function setOutboundConfigurationSftpPort($outbound_configuration_sftp_port)
    {
        $this->container['outbound_configuration_sftp_port'] = $outbound_configuration_sftp_port;

        return $this;
    }

    /**
     * Gets outbound_configuration_rest_service_base_url
     *
     * @return string
     */
    public function getOutboundConfigurationRestServiceBaseUrl()
    {
        return $this->container['outbound_configuration_rest_service_base_url'];
    }

    /**
     * Sets outbound_configuration_rest_service_base_url
     *
     * @param string $outbound_configuration_rest_service_base_url outbound_configuration_rest_service_base_url
     *
     * @return $this
     */
    public function setOutboundConfigurationRestServiceBaseUrl($outbound_configuration_rest_service_base_url)
    {
        $this->container['outbound_configuration_rest_service_base_url'] = $outbound_configuration_rest_service_base_url;

        return $this;
    }

    /**
     * Gets outbound_configuration_rest_service_user
     *
     * @return string
     */
    public function getOutboundConfigurationRestServiceUser()
    {
        return $this->container['outbound_configuration_rest_service_user'];
    }

    /**
     * Sets outbound_configuration_rest_service_user
     *
     * @param string $outbound_configuration_rest_service_user outbound_configuration_rest_service_user
     *
     * @return $this
     */
    public function setOutboundConfigurationRestServiceUser($outbound_configuration_rest_service_user)
    {
        $this->container['outbound_configuration_rest_service_user'] = $outbound_configuration_rest_service_user;

        return $this;
    }

    /**
     * Gets outbound_configuration_rest_service_password
     *
     * @return string
     */
    public function getOutboundConfigurationRestServicePassword()
    {
        return $this->container['outbound_configuration_rest_service_password'];
    }

    /**
     * Sets outbound_configuration_rest_service_password
     *
     * @param string $outbound_configuration_rest_service_password outbound_configuration_rest_service_password
     *
     * @return $this
     */
    public function setOutboundConfigurationRestServicePassword($outbound_configuration_rest_service_password)
    {
        $this->container['outbound_configuration_rest_service_password'] = $outbound_configuration_rest_service_password;

        return $this;
    }

    /**
     * Gets outbound_configuration_contingency_email
     *
     * @return string
     */
    public function getOutboundConfigurationContingencyEmail()
    {
        return $this->container['outbound_configuration_contingency_email'];
    }

    /**
     * Sets outbound_configuration_contingency_email
     *
     * @param string $outbound_configuration_contingency_email outbound_configuration_contingency_email
     *
     * @return $this
     */
    public function setOutboundConfigurationContingencyEmail($outbound_configuration_contingency_email)
    {
        $this->container['outbound_configuration_contingency_email'] = $outbound_configuration_contingency_email;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        if (defined('JSON_PRETTY_PRINT')) { // use JSON pretty print
            return json_encode(
                ObjectSerializer::sanitizeForSerialization($this),
                JSON_PRETTY_PRINT
            );
        }

        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


