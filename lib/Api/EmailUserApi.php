<?php
/**
 * EmailUserApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * EmailUserApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class EmailUserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation emailUserAccept
     *
     * Accepts a outboundDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function emailUserAccept($virtual_operator, $id)
    {
        list($response) = $this->emailUserAcceptWithHttpInfo($virtual_operator, $id);
        return $response;
    }

    /**
     * Operation emailUserAcceptWithHttpInfo
     *
     * Accepts a outboundDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserAcceptWithHttpInfo($virtual_operator, $id)
    {
        $returnType = 'object';
        $request = $this->emailUserAcceptRequest($virtual_operator, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserAcceptAsync
     *
     * Accepts a outboundDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserAcceptAsync($virtual_operator, $id)
    {
        return $this->emailUserAcceptAsyncWithHttpInfo($virtual_operator, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserAcceptAsyncWithHttpInfo
     *
     * Accepts a outboundDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserAcceptAsyncWithHttpInfo($virtual_operator, $id)
    {
        $returnType = 'object';
        $request = $this->emailUserAcceptRequest($virtual_operator, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserAccept'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserAcceptRequest($virtual_operator, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserAccept'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserAccept, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling emailUserAccept'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/outbounddocuments/{id}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserAcceptEmailUserRegisterToken
     *
     * Accepts a previously invitation sent to a email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $token  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageBoolean
     */
    public function emailUserAcceptEmailUserRegisterToken($virtual_operator, $token)
    {
        list($response) = $this->emailUserAcceptEmailUserRegisterTokenWithHttpInfo($virtual_operator, $token);
        return $response;
    }

    /**
     * Operation emailUserAcceptEmailUserRegisterTokenWithHttpInfo
     *
     * Accepts a previously invitation sent to a email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $token  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageBoolean, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserAcceptEmailUserRegisterTokenWithHttpInfo($virtual_operator, $token)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageBoolean';
        $request = $this->emailUserAcceptEmailUserRegisterTokenRequest($virtual_operator, $token);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageBoolean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserAcceptEmailUserRegisterTokenAsync
     *
     * Accepts a previously invitation sent to a email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserAcceptEmailUserRegisterTokenAsync($virtual_operator, $token)
    {
        return $this->emailUserAcceptEmailUserRegisterTokenAsyncWithHttpInfo($virtual_operator, $token)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserAcceptEmailUserRegisterTokenAsyncWithHttpInfo
     *
     * Accepts a previously invitation sent to a email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserAcceptEmailUserRegisterTokenAsyncWithHttpInfo($virtual_operator, $token)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageBoolean';
        $request = $this->emailUserAcceptEmailUserRegisterTokenRequest($virtual_operator, $token);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserAcceptEmailUserRegisterToken'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $token  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserAcceptEmailUserRegisterTokenRequest($virtual_operator, $token)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserAcceptEmailUserRegisterToken'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserAcceptEmailUserRegisterToken, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling emailUserAcceptEmailUserRegisterToken'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/accepttoken/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserConfirmRecoveryPassword
     *
     * Change an email user password
     *
     * @param  string $token  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function emailUserConfirmRecoveryPassword($token, $virtual_operator, $user)
    {
        list($response) = $this->emailUserConfirmRecoveryPasswordWithHttpInfo($token, $virtual_operator, $user);
        return $response;
    }

    /**
     * Operation emailUserConfirmRecoveryPasswordWithHttpInfo
     *
     * Change an email user password
     *
     * @param  string $token  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserConfirmRecoveryPasswordWithHttpInfo($token, $virtual_operator, $user)
    {
        $returnType = 'bool';
        $request = $this->emailUserConfirmRecoveryPasswordRequest($token, $virtual_operator, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserConfirmRecoveryPasswordAsync
     *
     * Change an email user password
     *
     * @param  string $token  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserConfirmRecoveryPasswordAsync($token, $virtual_operator, $user)
    {
        return $this->emailUserConfirmRecoveryPasswordAsyncWithHttpInfo($token, $virtual_operator, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserConfirmRecoveryPasswordAsyncWithHttpInfo
     *
     * Change an email user password
     *
     * @param  string $token  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserConfirmRecoveryPasswordAsyncWithHttpInfo($token, $virtual_operator, $user)
    {
        $returnType = 'bool';
        $request = $this->emailUserConfirmRecoveryPasswordRequest($token, $virtual_operator, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserConfirmRecoveryPassword'
     *
     * @param  string $token  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserConfirmRecoveryPasswordRequest($token, $virtual_operator, $user)
    {
        // verify the required parameter 'token' is set
        if ($token === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $token when calling emailUserConfirmRecoveryPassword'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserConfirmRecoveryPassword'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserConfirmRecoveryPassword, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling emailUserConfirmRecoveryPassword'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/newpassword/{token}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($token !== null) {
            $resourcePath = str_replace(
                '{' . 'token' . '}',
                ObjectSerializer::toPathValue($token),
                $resourcePath
            );
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserCountDocuments
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field search_criteria_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function emailUserCountDocuments($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->emailUserCountDocumentsWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation emailUserCountDocumentsWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserCountDocumentsWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->emailUserCountDocumentsRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserCountDocumentsAsync
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserCountDocumentsAsync($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->emailUserCountDocumentsAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserCountDocumentsAsyncWithHttpInfo
     *
     * 
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserCountDocumentsAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->emailUserCountDocumentsRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserCountDocuments'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserCountDocumentsRequest($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserCountDocuments'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserCountDocuments, must be smaller than or equal to 60.');
        }

        if ($search_criteria_dto_document_number !== null && strlen($search_criteria_dto_document_number) > 20) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_dto_document_number" when calling EmailUserApi.emailUserCountDocuments, must be smaller than or equal to 20.');
        }

        if ($search_criteria_dto_currency !== null && strlen($search_criteria_dto_currency) > 50) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_dto_currency" when calling EmailUserApi.emailUserCountDocuments, must be smaller than or equal to 50.');
        }


        $resourcePath = '/api/{virtualOperator}/emailuser/outbounddocuments/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_document_number !== null) {
            $queryParams['searchCriteriaDto.documentNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_number);
        }
        // query params
        if ($search_criteria_dto_currency !== null) {
            $queryParams['searchCriteriaDto.currency'] = ObjectSerializer::toQueryValue($search_criteria_dto_currency);
        }
        // query params
        if (is_array($search_criteria_dto_company_ids)) {
            $search_criteria_dto_company_ids = ObjectSerializer::serializeCollection($search_criteria_dto_company_ids, 'multi', true);
        }
        if ($search_criteria_dto_company_ids !== null) {
            $queryParams['searchCriteriaDto.companyIds'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_ids);
        }
        // query params
        if (is_array($search_criteria_dto_issuers)) {
            $search_criteria_dto_issuers = ObjectSerializer::serializeCollection($search_criteria_dto_issuers, 'multi', true);
        }
        if ($search_criteria_dto_issuers !== null) {
            $queryParams['searchCriteriaDto.issuers'] = ObjectSerializer::toQueryValue($search_criteria_dto_issuers);
        }
        // query params
        if (is_array($search_criteria_dto_customers)) {
            $search_criteria_dto_customers = ObjectSerializer::serializeCollection($search_criteria_dto_customers, 'multi', true);
        }
        if ($search_criteria_dto_customers !== null) {
            $queryParams['searchCriteriaDto.customers'] = ObjectSerializer::toQueryValue($search_criteria_dto_customers);
        }
        // query params
        if ($search_criteria_dto_include_files !== null) {
            $queryParams['searchCriteriaDto.includeFiles'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_files);
        }
        // query params
        if ($search_criteria_dto_include_attachments !== null) {
            $queryParams['searchCriteriaDto.includeAttachments'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_attachments);
        }
        // query params
        if (is_array($search_criteria_dto_document_types)) {
            $search_criteria_dto_document_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_types, 'multi', true);
        }
        if ($search_criteria_dto_document_types !== null) {
            $queryParams['searchCriteriaDto.documentTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_types);
        }
        // query params
        if (is_array($search_criteria_dto_document_sub_types)) {
            $search_criteria_dto_document_sub_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_sub_types, 'multi', true);
        }
        if ($search_criteria_dto_document_sub_types !== null) {
            $queryParams['searchCriteriaDto.documentSubTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_sub_types);
        }
        // query params
        if (is_array($search_criteria_dto_business_status)) {
            $search_criteria_dto_business_status = ObjectSerializer::serializeCollection($search_criteria_dto_business_status, 'multi', true);
        }
        if ($search_criteria_dto_business_status !== null) {
            $queryParams['searchCriteriaDto.businessStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_business_status);
        }
        // query params
        if (is_array($search_criteria_dto_communication_status)) {
            $search_criteria_dto_communication_status = ObjectSerializer::serializeCollection($search_criteria_dto_communication_status, 'multi', true);
        }
        if ($search_criteria_dto_communication_status !== null) {
            $queryParams['searchCriteriaDto.communicationStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_communication_status);
        }
        // query params
        if ($search_criteria_dto_creation_date_start !== null) {
            $queryParams['searchCriteriaDto.creationDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_start);
        }
        // query params
        if ($search_criteria_dto_creation_date_end !== null) {
            $queryParams['searchCriteriaDto.creationDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_end);
        }
        // query params
        if ($search_criteria_dto_document_date_start !== null) {
            $queryParams['searchCriteriaDto.documentDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_start);
        }
        // query params
        if ($search_criteria_dto_document_date_end !== null) {
            $queryParams['searchCriteriaDto.documentDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_end);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserGet
     *
     * Gets an email user by email
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\EmailUserSummary
     */
    public function emailUserGet($virtual_operator)
    {
        list($response) = $this->emailUserGetWithHttpInfo($virtual_operator);
        return $response;
    }

    /**
     * Operation emailUserGetWithHttpInfo
     *
     * Gets an email user by email
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\EmailUserSummary, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserGetWithHttpInfo($virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\EmailUserSummary';
        $request = $this->emailUserGetRequest($virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\EmailUserSummary',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserGetAsync
     *
     * Gets an email user by email
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetAsync($virtual_operator)
    {
        return $this->emailUserGetAsyncWithHttpInfo($virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserGetAsyncWithHttpInfo
     *
     * Gets an email user by email
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetAsyncWithHttpInfo($virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\EmailUserSummary';
        $request = $this->emailUserGetRequest($virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserGet'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserGetRequest($virtual_operator)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserGet'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserGet, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/{virtualOperator}/emailuser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserGetDocumentWithAllDetails
     *
     * Gets a outboundDocument with all associated details
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  bool $data_get_pdf Get Pdf? (required)
     * @param  bool $data_get_ubl Get UBL? (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentDTO
     */
    public function emailUserGetDocumentWithAllDetails($virtual_operator, $id, $data_get_pdf, $data_get_ubl)
    {
        list($response) = $this->emailUserGetDocumentWithAllDetailsWithHttpInfo($virtual_operator, $id, $data_get_pdf, $data_get_ubl);
        return $response;
    }

    /**
     * Operation emailUserGetDocumentWithAllDetailsWithHttpInfo
     *
     * Gets a outboundDocument with all associated details
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  bool $data_get_pdf Get Pdf? (required)
     * @param  bool $data_get_ubl Get UBL? (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserGetDocumentWithAllDetailsWithHttpInfo($virtual_operator, $id, $data_get_pdf, $data_get_ubl)
    {
        $returnType = '\Swagger\Client\Model\DocumentDTO';
        $request = $this->emailUserGetDocumentWithAllDetailsRequest($virtual_operator, $id, $data_get_pdf, $data_get_ubl);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentDTO',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserGetDocumentWithAllDetailsAsync
     *
     * Gets a outboundDocument with all associated details
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  bool $data_get_pdf Get Pdf? (required)
     * @param  bool $data_get_ubl Get UBL? (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetDocumentWithAllDetailsAsync($virtual_operator, $id, $data_get_pdf, $data_get_ubl)
    {
        return $this->emailUserGetDocumentWithAllDetailsAsyncWithHttpInfo($virtual_operator, $id, $data_get_pdf, $data_get_ubl)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserGetDocumentWithAllDetailsAsyncWithHttpInfo
     *
     * Gets a outboundDocument with all associated details
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  bool $data_get_pdf Get Pdf? (required)
     * @param  bool $data_get_ubl Get UBL? (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetDocumentWithAllDetailsAsyncWithHttpInfo($virtual_operator, $id, $data_get_pdf, $data_get_ubl)
    {
        $returnType = '\Swagger\Client\Model\DocumentDTO';
        $request = $this->emailUserGetDocumentWithAllDetailsRequest($virtual_operator, $id, $data_get_pdf, $data_get_ubl);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserGetDocumentWithAllDetails'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  bool $data_get_pdf Get Pdf? (required)
     * @param  bool $data_get_ubl Get UBL? (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserGetDocumentWithAllDetailsRequest($virtual_operator, $id, $data_get_pdf, $data_get_ubl)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserGetDocumentWithAllDetails'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserGetDocumentWithAllDetails, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling emailUserGetDocumentWithAllDetails'
            );
        }
        // verify the required parameter 'data_get_pdf' is set
        if ($data_get_pdf === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_get_pdf when calling emailUserGetDocumentWithAllDetails'
            );
        }
        // verify the required parameter 'data_get_ubl' is set
        if ($data_get_ubl === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data_get_ubl when calling emailUserGetDocumentWithAllDetails'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/outbounddocuments/{id}/files';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($data_get_pdf !== null) {
            $queryParams['data.getPdf'] = ObjectSerializer::toQueryValue($data_get_pdf);
        }
        // query params
        if ($data_get_ubl !== null) {
            $queryParams['data.getUBL'] = ObjectSerializer::toQueryValue($data_get_ubl);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserGetEmailUserDocumentAttachmentContent
     *
     * Gets an email user outboundDocument attachment content
     *
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     * @param  string $virtual_operator virtual_operator (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function emailUserGetEmailUserDocumentAttachmentContent($id, $attachment_id, $virtual_operator)
    {
        list($response) = $this->emailUserGetEmailUserDocumentAttachmentContentWithHttpInfo($id, $attachment_id, $virtual_operator);
        return $response;
    }

    /**
     * Operation emailUserGetEmailUserDocumentAttachmentContentWithHttpInfo
     *
     * Gets an email user outboundDocument attachment content
     *
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     * @param  string $virtual_operator (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserGetEmailUserDocumentAttachmentContentWithHttpInfo($id, $attachment_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->emailUserGetEmailUserDocumentAttachmentContentRequest($id, $attachment_id, $virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserGetEmailUserDocumentAttachmentContentAsync
     *
     * Gets an email user outboundDocument attachment content
     *
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     * @param  string $virtual_operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetEmailUserDocumentAttachmentContentAsync($id, $attachment_id, $virtual_operator)
    {
        return $this->emailUserGetEmailUserDocumentAttachmentContentAsyncWithHttpInfo($id, $attachment_id, $virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserGetEmailUserDocumentAttachmentContentAsyncWithHttpInfo
     *
     * Gets an email user outboundDocument attachment content
     *
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     * @param  string $virtual_operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetEmailUserDocumentAttachmentContentAsyncWithHttpInfo($id, $attachment_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->emailUserGetEmailUserDocumentAttachmentContentRequest($id, $attachment_id, $virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserGetEmailUserDocumentAttachmentContent'
     *
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     * @param  string $virtual_operator (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserGetEmailUserDocumentAttachmentContentRequest($id, $attachment_id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling emailUserGetEmailUserDocumentAttachmentContent'
            );
        }
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling emailUserGetEmailUserDocumentAttachmentContent'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserGetEmailUserDocumentAttachmentContent'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/outbounddocuments/{id}/attachment/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserGetEmailUserDocumentAttachments
     *
     * Gets a outboundDocument attachment for an email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentAttachmentDto
     */
    public function emailUserGetEmailUserDocumentAttachments($virtual_operator, $id)
    {
        list($response) = $this->emailUserGetEmailUserDocumentAttachmentsWithHttpInfo($virtual_operator, $id);
        return $response;
    }

    /**
     * Operation emailUserGetEmailUserDocumentAttachmentsWithHttpInfo
     *
     * Gets a outboundDocument attachment for an email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentAttachmentDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserGetEmailUserDocumentAttachmentsWithHttpInfo($virtual_operator, $id)
    {
        $returnType = '\Swagger\Client\Model\DocumentAttachmentDto';
        $request = $this->emailUserGetEmailUserDocumentAttachmentsRequest($virtual_operator, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentAttachmentDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserGetEmailUserDocumentAttachmentsAsync
     *
     * Gets a outboundDocument attachment for an email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetEmailUserDocumentAttachmentsAsync($virtual_operator, $id)
    {
        return $this->emailUserGetEmailUserDocumentAttachmentsAsyncWithHttpInfo($virtual_operator, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserGetEmailUserDocumentAttachmentsAsyncWithHttpInfo
     *
     * Gets a outboundDocument attachment for an email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetEmailUserDocumentAttachmentsAsyncWithHttpInfo($virtual_operator, $id)
    {
        $returnType = '\Swagger\Client\Model\DocumentAttachmentDto';
        $request = $this->emailUserGetEmailUserDocumentAttachmentsRequest($virtual_operator, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserGetEmailUserDocumentAttachments'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserGetEmailUserDocumentAttachmentsRequest($virtual_operator, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserGetEmailUserDocumentAttachments'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserGetEmailUserDocumentAttachments, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling emailUserGetEmailUserDocumentAttachments'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/outbounddocuments/{id}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserGetEmailUserFileContent
     *
     * Gets a file content for an email user
     *
     * @param  string $id  (required)
     * @param  string $file_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function emailUserGetEmailUserFileContent($id, $file_id, $virtual_operator)
    {
        list($response) = $this->emailUserGetEmailUserFileContentWithHttpInfo($id, $file_id, $virtual_operator);
        return $response;
    }

    /**
     * Operation emailUserGetEmailUserFileContentWithHttpInfo
     *
     * Gets a file content for an email user
     *
     * @param  string $id  (required)
     * @param  string $file_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserGetEmailUserFileContentWithHttpInfo($id, $file_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->emailUserGetEmailUserFileContentRequest($id, $file_id, $virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserGetEmailUserFileContentAsync
     *
     * Gets a file content for an email user
     *
     * @param  string $id  (required)
     * @param  string $file_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetEmailUserFileContentAsync($id, $file_id, $virtual_operator)
    {
        return $this->emailUserGetEmailUserFileContentAsyncWithHttpInfo($id, $file_id, $virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserGetEmailUserFileContentAsyncWithHttpInfo
     *
     * Gets a file content for an email user
     *
     * @param  string $id  (required)
     * @param  string $file_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserGetEmailUserFileContentAsyncWithHttpInfo($id, $file_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->emailUserGetEmailUserFileContentRequest($id, $file_id, $virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserGetEmailUserFileContent'
     *
     * @param  string $id  (required)
     * @param  string $file_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserGetEmailUserFileContentRequest($id, $file_id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling emailUserGetEmailUserFileContent'
            );
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling emailUserGetEmailUserFileContent'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserGetEmailUserFileContent'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserGetEmailUserFileContent, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/{virtualOperator}/emailuser/outbounddocuments/{id}/files/{fileId}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserReject
     *
     * Rejects a outboundDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function emailUserReject($virtual_operator, $id, $data)
    {
        list($response) = $this->emailUserRejectWithHttpInfo($virtual_operator, $id, $data);
        return $response;
    }

    /**
     * Operation emailUserRejectWithHttpInfo
     *
     * Rejects a outboundDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserRejectWithHttpInfo($virtual_operator, $id, $data)
    {
        $returnType = 'object';
        $request = $this->emailUserRejectRequest($virtual_operator, $id, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserRejectAsync
     *
     * Rejects a outboundDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserRejectAsync($virtual_operator, $id, $data)
    {
        return $this->emailUserRejectAsyncWithHttpInfo($virtual_operator, $id, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserRejectAsyncWithHttpInfo
     *
     * Rejects a outboundDocument
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserRejectAsyncWithHttpInfo($virtual_operator, $id, $data)
    {
        $returnType = 'object';
        $request = $this->emailUserRejectRequest($virtual_operator, $id, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserReject'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserRejectRequest($virtual_operator, $id, $data)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserReject'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserReject, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling emailUserReject'
            );
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling emailUserReject'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/outbounddocuments/{id}/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserRequestEmailUser
     *
     * Gets an email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserInputDto $email_user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageBoolean
     */
    public function emailUserRequestEmailUser($virtual_operator, $email_user)
    {
        list($response) = $this->emailUserRequestEmailUserWithHttpInfo($virtual_operator, $email_user);
        return $response;
    }

    /**
     * Operation emailUserRequestEmailUserWithHttpInfo
     *
     * Gets an email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserInputDto $email_user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageBoolean, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserRequestEmailUserWithHttpInfo($virtual_operator, $email_user)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageBoolean';
        $request = $this->emailUserRequestEmailUserRequest($virtual_operator, $email_user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageBoolean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserRequestEmailUserAsync
     *
     * Gets an email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserInputDto $email_user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserRequestEmailUserAsync($virtual_operator, $email_user)
    {
        return $this->emailUserRequestEmailUserAsyncWithHttpInfo($virtual_operator, $email_user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserRequestEmailUserAsyncWithHttpInfo
     *
     * Gets an email user
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserInputDto $email_user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserRequestEmailUserAsyncWithHttpInfo($virtual_operator, $email_user)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageBoolean';
        $request = $this->emailUserRequestEmailUserRequest($virtual_operator, $email_user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserRequestEmailUser'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserInputDto $email_user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserRequestEmailUserRequest($virtual_operator, $email_user)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserRequestEmailUser'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserRequestEmailUser, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'email_user' is set
        if ($email_user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $email_user when calling emailUserRequestEmailUser'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/request';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($email_user)) {
            $_tempBody = $email_user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserRequestRecoveryPassword
     *
     * Resets an email user password
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function emailUserRequestRecoveryPassword($virtual_operator, $user)
    {
        list($response) = $this->emailUserRequestRecoveryPasswordWithHttpInfo($virtual_operator, $user);
        return $response;
    }

    /**
     * Operation emailUserRequestRecoveryPasswordWithHttpInfo
     *
     * Resets an email user password
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserRequestRecoveryPasswordWithHttpInfo($virtual_operator, $user)
    {
        $returnType = 'bool';
        $request = $this->emailUserRequestRecoveryPasswordRequest($virtual_operator, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserRequestRecoveryPasswordAsync
     *
     * Resets an email user password
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserRequestRecoveryPasswordAsync($virtual_operator, $user)
    {
        return $this->emailUserRequestRecoveryPasswordAsyncWithHttpInfo($virtual_operator, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserRequestRecoveryPasswordAsyncWithHttpInfo
     *
     * Resets an email user password
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserRequestRecoveryPasswordAsyncWithHttpInfo($virtual_operator, $user)
    {
        $returnType = 'bool';
        $request = $this->emailUserRequestRecoveryPasswordRequest($virtual_operator, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserRequestRecoveryPassword'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserDTO $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserRequestRecoveryPasswordRequest($virtual_operator, $user)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserRequestRecoveryPassword'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserRequestRecoveryPassword, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling emailUserRequestRecoveryPassword'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/resetpassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserSearchCompanies
     *
     * Search companies using search criterias  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CompanyDTO[]
     */
    public function emailUserSearchCompanies($virtual_operator)
    {
        list($response) = $this->emailUserSearchCompaniesWithHttpInfo($virtual_operator);
        return $response;
    }

    /**
     * Operation emailUserSearchCompaniesWithHttpInfo
     *
     * Search companies using search criterias  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CompanyDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserSearchCompaniesWithHttpInfo($virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\CompanyDTO[]';
        $request = $this->emailUserSearchCompaniesRequest($virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CompanyDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserSearchCompaniesAsync
     *
     * Search companies using search criterias  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserSearchCompaniesAsync($virtual_operator)
    {
        return $this->emailUserSearchCompaniesAsyncWithHttpInfo($virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserSearchCompaniesAsyncWithHttpInfo
     *
     * Search companies using search criterias  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserSearchCompaniesAsyncWithHttpInfo($virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\CompanyDTO[]';
        $request = $this->emailUserSearchCompaniesRequest($virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserSearchCompanies'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserSearchCompaniesRequest($virtual_operator)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserSearchCompanies'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserSearchCompanies, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/{virtualOperator}/emailuser/companies';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserSearchCustomers
     *
     * Gets selected company's Customers.  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\CustomerSummaryDTO[]
     */
    public function emailUserSearchCustomers($virtual_operator, $company_id)
    {
        list($response) = $this->emailUserSearchCustomersWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation emailUserSearchCustomersWithHttpInfo
     *
     * Gets selected company's Customers.  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\CustomerSummaryDTO[], HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserSearchCustomersWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerSummaryDTO[]';
        $request = $this->emailUserSearchCustomersRequest($virtual_operator, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\CustomerSummaryDTO[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserSearchCustomersAsync
     *
     * Gets selected company's Customers.  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserSearchCustomersAsync($virtual_operator, $company_id)
    {
        return $this->emailUserSearchCustomersAsyncWithHttpInfo($virtual_operator, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserSearchCustomersAsyncWithHttpInfo
     *
     * Gets selected company's Customers.  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserSearchCustomersAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\CustomerSummaryDTO[]';
        $request = $this->emailUserSearchCustomersRequest($virtual_operator, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserSearchCustomers'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserSearchCustomersRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserSearchCustomers'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserSearchCustomers, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling emailUserSearchCustomers'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/companies/{companyId}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserSearchDocuments
     *
     * Search documents
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field search_criteria_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\OutboundDocument[]
     */
    public function emailUserSearchDocuments($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->emailUserSearchDocumentsWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation emailUserSearchDocumentsWithHttpInfo
     *
     * Search documents
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\OutboundDocument[], HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserSearchDocumentsWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\OutboundDocument[]';
        $request = $this->emailUserSearchDocumentsRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\OutboundDocument[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserSearchDocumentsAsync
     *
     * Search documents
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserSearchDocumentsAsync($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->emailUserSearchDocumentsAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserSearchDocumentsAsyncWithHttpInfo
     *
     * Search documents
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserSearchDocumentsAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\OutboundDocument[]';
        $request = $this->emailUserSearchDocumentsRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserSearchDocuments'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_files (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserSearchDocumentsRequest($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserSearchDocuments'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserSearchDocuments, must be smaller than or equal to 60.');
        }

        if ($search_criteria_dto_document_number !== null && strlen($search_criteria_dto_document_number) > 20) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_dto_document_number" when calling EmailUserApi.emailUserSearchDocuments, must be smaller than or equal to 20.');
        }

        if ($search_criteria_dto_currency !== null && strlen($search_criteria_dto_currency) > 50) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_dto_currency" when calling EmailUserApi.emailUserSearchDocuments, must be smaller than or equal to 50.');
        }


        $resourcePath = '/api/{virtualOperator}/emailuser/outbounddocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_document_number !== null) {
            $queryParams['searchCriteriaDto.documentNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_number);
        }
        // query params
        if ($search_criteria_dto_currency !== null) {
            $queryParams['searchCriteriaDto.currency'] = ObjectSerializer::toQueryValue($search_criteria_dto_currency);
        }
        // query params
        if (is_array($search_criteria_dto_company_ids)) {
            $search_criteria_dto_company_ids = ObjectSerializer::serializeCollection($search_criteria_dto_company_ids, 'multi', true);
        }
        if ($search_criteria_dto_company_ids !== null) {
            $queryParams['searchCriteriaDto.companyIds'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_ids);
        }
        // query params
        if (is_array($search_criteria_dto_issuers)) {
            $search_criteria_dto_issuers = ObjectSerializer::serializeCollection($search_criteria_dto_issuers, 'multi', true);
        }
        if ($search_criteria_dto_issuers !== null) {
            $queryParams['searchCriteriaDto.issuers'] = ObjectSerializer::toQueryValue($search_criteria_dto_issuers);
        }
        // query params
        if (is_array($search_criteria_dto_customers)) {
            $search_criteria_dto_customers = ObjectSerializer::serializeCollection($search_criteria_dto_customers, 'multi', true);
        }
        if ($search_criteria_dto_customers !== null) {
            $queryParams['searchCriteriaDto.customers'] = ObjectSerializer::toQueryValue($search_criteria_dto_customers);
        }
        // query params
        if ($search_criteria_dto_include_files !== null) {
            $queryParams['searchCriteriaDto.includeFiles'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_files);
        }
        // query params
        if ($search_criteria_dto_include_attachments !== null) {
            $queryParams['searchCriteriaDto.includeAttachments'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_attachments);
        }
        // query params
        if (is_array($search_criteria_dto_document_types)) {
            $search_criteria_dto_document_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_types, 'multi', true);
        }
        if ($search_criteria_dto_document_types !== null) {
            $queryParams['searchCriteriaDto.documentTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_types);
        }
        // query params
        if (is_array($search_criteria_dto_document_sub_types)) {
            $search_criteria_dto_document_sub_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_sub_types, 'multi', true);
        }
        if ($search_criteria_dto_document_sub_types !== null) {
            $queryParams['searchCriteriaDto.documentSubTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_sub_types);
        }
        // query params
        if (is_array($search_criteria_dto_business_status)) {
            $search_criteria_dto_business_status = ObjectSerializer::serializeCollection($search_criteria_dto_business_status, 'multi', true);
        }
        if ($search_criteria_dto_business_status !== null) {
            $queryParams['searchCriteriaDto.businessStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_business_status);
        }
        // query params
        if (is_array($search_criteria_dto_communication_status)) {
            $search_criteria_dto_communication_status = ObjectSerializer::serializeCollection($search_criteria_dto_communication_status, 'multi', true);
        }
        if ($search_criteria_dto_communication_status !== null) {
            $queryParams['searchCriteriaDto.communicationStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_communication_status);
        }
        // query params
        if ($search_criteria_dto_creation_date_start !== null) {
            $queryParams['searchCriteriaDto.creationDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_start);
        }
        // query params
        if ($search_criteria_dto_creation_date_end !== null) {
            $queryParams['searchCriteriaDto.creationDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_end);
        }
        // query params
        if ($search_criteria_dto_document_date_start !== null) {
            $queryParams['searchCriteriaDto.documentDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_start);
        }
        // query params
        if ($search_criteria_dto_document_date_end !== null) {
            $queryParams['searchCriteriaDto.documentDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_end);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserUpdate
     *
     * Updates the email user info
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserUpdateInputDto $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function emailUserUpdate($user_id, $virtual_operator, $user)
    {
        list($response) = $this->emailUserUpdateWithHttpInfo($user_id, $virtual_operator, $user);
        return $response;
    }

    /**
     * Operation emailUserUpdateWithHttpInfo
     *
     * Updates the email user info
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserUpdateInputDto $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserUpdateWithHttpInfo($user_id, $virtual_operator, $user)
    {
        $returnType = 'string';
        $request = $this->emailUserUpdateRequest($user_id, $virtual_operator, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserUpdateAsync
     *
     * Updates the email user info
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserUpdateInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserUpdateAsync($user_id, $virtual_operator, $user)
    {
        return $this->emailUserUpdateAsyncWithHttpInfo($user_id, $virtual_operator, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserUpdateAsyncWithHttpInfo
     *
     * Updates the email user info
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserUpdateInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserUpdateAsyncWithHttpInfo($user_id, $virtual_operator, $user)
    {
        $returnType = 'string';
        $request = $this->emailUserUpdateRequest($user_id, $virtual_operator, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserUpdate'
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserUpdateInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserUpdateRequest($user_id, $virtual_operator, $user)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling emailUserUpdate'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserUpdate'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserUpdate, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling emailUserUpdate'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation emailUserUpdatePassword
     *
     * Updates the email user info
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserAccountUpdatePasswordInputDto $account_update_password  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function emailUserUpdatePassword($user_id, $virtual_operator, $account_update_password)
    {
        list($response) = $this->emailUserUpdatePasswordWithHttpInfo($user_id, $virtual_operator, $account_update_password);
        return $response;
    }

    /**
     * Operation emailUserUpdatePasswordWithHttpInfo
     *
     * Updates the email user info
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserAccountUpdatePasswordInputDto $account_update_password  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function emailUserUpdatePasswordWithHttpInfo($user_id, $virtual_operator, $account_update_password)
    {
        $returnType = 'string';
        $request = $this->emailUserUpdatePasswordRequest($user_id, $virtual_operator, $account_update_password);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation emailUserUpdatePasswordAsync
     *
     * Updates the email user info
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserAccountUpdatePasswordInputDto $account_update_password  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserUpdatePasswordAsync($user_id, $virtual_operator, $account_update_password)
    {
        return $this->emailUserUpdatePasswordAsyncWithHttpInfo($user_id, $virtual_operator, $account_update_password)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation emailUserUpdatePasswordAsyncWithHttpInfo
     *
     * Updates the email user info
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserAccountUpdatePasswordInputDto $account_update_password  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function emailUserUpdatePasswordAsyncWithHttpInfo($user_id, $virtual_operator, $account_update_password)
    {
        $returnType = 'string';
        $request = $this->emailUserUpdatePasswordRequest($user_id, $virtual_operator, $account_update_password);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'emailUserUpdatePassword'
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\EmailUserAccountUpdatePasswordInputDto $account_update_password  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function emailUserUpdatePasswordRequest($user_id, $virtual_operator, $account_update_password)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling emailUserUpdatePassword'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling emailUserUpdatePassword'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling EmailUserApi.emailUserUpdatePassword, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'account_update_password' is set
        if ($account_update_password === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $account_update_password when calling emailUserUpdatePassword'
            );
        }

        $resourcePath = '/api/{virtualOperator}/emailuser/password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($account_update_password)) {
            $_tempBody = $account_update_password;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
