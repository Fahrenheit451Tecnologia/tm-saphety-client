<?php
/**
 * PublicOutboundDocumentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * PublicOutboundDocumentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class PublicOutboundDocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation publicOutboundDocumentAccepted
     *
     * Accepts a outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function publicOutboundDocumentAccepted($id, $virtual_operator)
    {
        list($response) = $this->publicOutboundDocumentAcceptedWithHttpInfo($id, $virtual_operator);
        return $response;
    }

    /**
     * Operation publicOutboundDocumentAcceptedWithHttpInfo
     *
     * Accepts a outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicOutboundDocumentAcceptedWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentAcceptedRequest($id, $virtual_operator);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicOutboundDocumentAcceptedAsync
     *
     * Accepts a outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentAcceptedAsync($id, $virtual_operator)
    {
        return $this->publicOutboundDocumentAcceptedAsyncWithHttpInfo($id, $virtual_operator)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation publicOutboundDocumentAcceptedAsyncWithHttpInfo
     *
     * Accepts a outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentAcceptedAsyncWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentAcceptedRequest($id, $virtual_operator);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'publicOutboundDocumentAccepted'
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicOutboundDocumentAcceptedRequest($id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling publicOutboundDocumentAccepted');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling publicOutboundDocumentAccepted');
        }

        $resourcePath = '/api/{virtualOperator}/public/outbounddocuments/{id}/accepted';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicOutboundDocumentFileDownload
     *
     * Downloads the selected file
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function publicOutboundDocumentFileDownload($id, $file_id, $virtual_operator)
    {
        list($response) = $this->publicOutboundDocumentFileDownloadWithHttpInfo($id, $file_id, $virtual_operator);
        return $response;
    }

    /**
     * Operation publicOutboundDocumentFileDownloadWithHttpInfo
     *
     * Downloads the selected file
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicOutboundDocumentFileDownloadWithHttpInfo($id, $file_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentFileDownloadRequest($id, $file_id, $virtual_operator);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicOutboundDocumentFileDownloadAsync
     *
     * Downloads the selected file
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentFileDownloadAsync($id, $file_id, $virtual_operator)
    {
        return $this->publicOutboundDocumentFileDownloadAsyncWithHttpInfo($id, $file_id, $virtual_operator)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation publicOutboundDocumentFileDownloadAsyncWithHttpInfo
     *
     * Downloads the selected file
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentFileDownloadAsyncWithHttpInfo($id, $file_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentFileDownloadRequest($id, $file_id, $virtual_operator);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'publicOutboundDocumentFileDownload'
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicOutboundDocumentFileDownloadRequest($id, $file_id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling publicOutboundDocumentFileDownload');
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling publicOutboundDocumentFileDownload');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling publicOutboundDocumentFileDownload');
        }

        $resourcePath = '/api/{virtualOperator}/public/outbounddocuments/{id}/files/{fileId}/download';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace('{' . 'fileId' . '}', ObjectSerializer::toPathValue($file_id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicOutboundDocumentGet
     *
     * Gets a public outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function publicOutboundDocumentGet($id, $virtual_operator)
    {
        list($response) = $this->publicOutboundDocumentGetWithHttpInfo($id, $virtual_operator);
        return $response;
    }

    /**
     * Operation publicOutboundDocumentGetWithHttpInfo
     *
     * Gets a public outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicOutboundDocumentGetWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentGetRequest($id, $virtual_operator);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicOutboundDocumentGetAsync
     *
     * Gets a public outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentGetAsync($id, $virtual_operator)
    {
        return $this->publicOutboundDocumentGetAsyncWithHttpInfo($id, $virtual_operator)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation publicOutboundDocumentGetAsyncWithHttpInfo
     *
     * Gets a public outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentGetAsyncWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentGetRequest($id, $virtual_operator);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'publicOutboundDocumentGet'
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicOutboundDocumentGetRequest($id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling publicOutboundDocumentGet');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling publicOutboundDocumentGet');
        }

        $resourcePath = '/api/{virtualOperator}/public/outbounddocuments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicOutboundDocumentGetPublicDocumentAttachmentContent
     *
     * Gets the content of a outboundDocument attachment
     *
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function publicOutboundDocumentGetPublicDocumentAttachmentContent($id, $attachment_id, $virtual_operator)
    {
        list($response) = $this->publicOutboundDocumentGetPublicDocumentAttachmentContentWithHttpInfo($id, $attachment_id, $virtual_operator);
        return $response;
    }

    /**
     * Operation publicOutboundDocumentGetPublicDocumentAttachmentContentWithHttpInfo
     *
     * Gets the content of a outboundDocument attachment
     *
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicOutboundDocumentGetPublicDocumentAttachmentContentWithHttpInfo($id, $attachment_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentGetPublicDocumentAttachmentContentRequest($id, $attachment_id, $virtual_operator);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicOutboundDocumentGetPublicDocumentAttachmentContentAsync
     *
     * Gets the content of a outboundDocument attachment
     *
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentGetPublicDocumentAttachmentContentAsync($id, $attachment_id, $virtual_operator)
    {
        return $this->publicOutboundDocumentGetPublicDocumentAttachmentContentAsyncWithHttpInfo($id, $attachment_id, $virtual_operator)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation publicOutboundDocumentGetPublicDocumentAttachmentContentAsyncWithHttpInfo
     *
     * Gets the content of a outboundDocument attachment
     *
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentGetPublicDocumentAttachmentContentAsyncWithHttpInfo($id, $attachment_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentGetPublicDocumentAttachmentContentRequest($id, $attachment_id, $virtual_operator);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'publicOutboundDocumentGetPublicDocumentAttachmentContent'
     *
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicOutboundDocumentGetPublicDocumentAttachmentContentRequest($id, $attachment_id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling publicOutboundDocumentGetPublicDocumentAttachmentContent');
        }
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attachment_id when calling publicOutboundDocumentGetPublicDocumentAttachmentContent');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling publicOutboundDocumentGetPublicDocumentAttachmentContent');
        }

        $resourcePath = '/api/{virtualOperator}/public/outbounddocuments/{id}/attachment/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace('{' . 'attachmentId' . '}', ObjectSerializer::toPathValue($attachment_id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicOutboundDocumentGetPublicDocumentAttachments
     *
     * Gets the public outboundDocument attachments
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function publicOutboundDocumentGetPublicDocumentAttachments($id, $virtual_operator)
    {
        list($response) = $this->publicOutboundDocumentGetPublicDocumentAttachmentsWithHttpInfo($id, $virtual_operator);
        return $response;
    }

    /**
     * Operation publicOutboundDocumentGetPublicDocumentAttachmentsWithHttpInfo
     *
     * Gets the public outboundDocument attachments
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicOutboundDocumentGetPublicDocumentAttachmentsWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentGetPublicDocumentAttachmentsRequest($id, $virtual_operator);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicOutboundDocumentGetPublicDocumentAttachmentsAsync
     *
     * Gets the public outboundDocument attachments
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentGetPublicDocumentAttachmentsAsync($id, $virtual_operator)
    {
        return $this->publicOutboundDocumentGetPublicDocumentAttachmentsAsyncWithHttpInfo($id, $virtual_operator)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation publicOutboundDocumentGetPublicDocumentAttachmentsAsyncWithHttpInfo
     *
     * Gets the public outboundDocument attachments
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentGetPublicDocumentAttachmentsAsyncWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentGetPublicDocumentAttachmentsRequest($id, $virtual_operator);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'publicOutboundDocumentGetPublicDocumentAttachments'
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicOutboundDocumentGetPublicDocumentAttachmentsRequest($id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling publicOutboundDocumentGetPublicDocumentAttachments');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling publicOutboundDocumentGetPublicDocumentAttachments');
        }

        $resourcePath = '/api/{virtualOperator}/public/outbounddocuments/{id}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicOutboundDocumentPublicDocumentShowPDF
     *
     * Gets the pdf for the public outboundDocument presentation
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function publicOutboundDocumentPublicDocumentShowPDF($id, $file_id, $virtual_operator)
    {
        list($response) = $this->publicOutboundDocumentPublicDocumentShowPDFWithHttpInfo($id, $file_id, $virtual_operator);
        return $response;
    }

    /**
     * Operation publicOutboundDocumentPublicDocumentShowPDFWithHttpInfo
     *
     * Gets the pdf for the public outboundDocument presentation
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicOutboundDocumentPublicDocumentShowPDFWithHttpInfo($id, $file_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentPublicDocumentShowPDFRequest($id, $file_id, $virtual_operator);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicOutboundDocumentPublicDocumentShowPDFAsync
     *
     * Gets the pdf for the public outboundDocument presentation
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentPublicDocumentShowPDFAsync($id, $file_id, $virtual_operator)
    {
        return $this->publicOutboundDocumentPublicDocumentShowPDFAsyncWithHttpInfo($id, $file_id, $virtual_operator)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation publicOutboundDocumentPublicDocumentShowPDFAsyncWithHttpInfo
     *
     * Gets the pdf for the public outboundDocument presentation
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentPublicDocumentShowPDFAsyncWithHttpInfo($id, $file_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentPublicDocumentShowPDFRequest($id, $file_id, $virtual_operator);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'publicOutboundDocumentPublicDocumentShowPDF'
     *
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicOutboundDocumentPublicDocumentShowPDFRequest($id, $file_id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling publicOutboundDocumentPublicDocumentShowPDF');
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling publicOutboundDocumentPublicDocumentShowPDF');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling publicOutboundDocumentPublicDocumentShowPDF');
        }

        $resourcePath = '/api/{virtualOperator}/public/outbounddocuments/{id}/files/{fileId}/getpdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace('{' . 'fileId' . '}', ObjectSerializer::toPathValue($file_id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicOutboundDocumentRejected
     *
     * Rejects a outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function publicOutboundDocumentRejected($id, $virtual_operator, $data)
    {
        list($response) = $this->publicOutboundDocumentRejectedWithHttpInfo($id, $virtual_operator, $data);
        return $response;
    }

    /**
     * Operation publicOutboundDocumentRejectedWithHttpInfo
     *
     * Rejects a outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicOutboundDocumentRejectedWithHttpInfo($id, $virtual_operator, $data)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentRejectedRequest($id, $virtual_operator, $data);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicOutboundDocumentRejectedAsync
     *
     * Rejects a outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentRejectedAsync($id, $virtual_operator, $data)
    {
        return $this->publicOutboundDocumentRejectedAsyncWithHttpInfo($id, $virtual_operator, $data)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation publicOutboundDocumentRejectedAsyncWithHttpInfo
     *
     * Rejects a outboundDocument
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentRejectedAsyncWithHttpInfo($id, $virtual_operator, $data)
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentRejectedRequest($id, $virtual_operator, $data);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'publicOutboundDocumentRejected'
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicOutboundDocumentRejectedRequest($id, $virtual_operator, $data)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling publicOutboundDocumentRejected');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling publicOutboundDocumentRejected');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling publicOutboundDocumentRejected');
        }

        $resourcePath = '/api/{virtualOperator}/public/outbounddocuments/{id}/rejected';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation publicOutboundDocumentTriggerTacitlyAcceptance
     *
     * Trigger tacit acceptance validations
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function publicOutboundDocumentTriggerTacitlyAcceptance()
    {
        list($response) = $this->publicOutboundDocumentTriggerTacitlyAcceptanceWithHttpInfo();
        return $response;
    }

    /**
     * Operation publicOutboundDocumentTriggerTacitlyAcceptanceWithHttpInfo
     *
     * Trigger tacit acceptance validations
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function publicOutboundDocumentTriggerTacitlyAcceptanceWithHttpInfo()
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentTriggerTacitlyAcceptanceRequest();

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation publicOutboundDocumentTriggerTacitlyAcceptanceAsync
     *
     * Trigger tacit acceptance validations
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentTriggerTacitlyAcceptanceAsync()
    {
        return $this->publicOutboundDocumentTriggerTacitlyAcceptanceAsyncWithHttpInfo()->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation publicOutboundDocumentTriggerTacitlyAcceptanceAsyncWithHttpInfo
     *
     * Trigger tacit acceptance validations
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function publicOutboundDocumentTriggerTacitlyAcceptanceAsyncWithHttpInfo()
    {
        $returnType = 'object';
        $request = $this->publicOutboundDocumentTriggerTacitlyAcceptanceRequest();

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'publicOutboundDocumentTriggerTacitlyAcceptance'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function publicOutboundDocumentTriggerTacitlyAcceptanceRequest()
    {

        $resourcePath = '/api/public/outbounddocuments/triggerTacitlyAcceptance';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

}
