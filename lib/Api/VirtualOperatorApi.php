<?php
/**
 * VirtualOperatorApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * VirtualOperatorApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class VirtualOperatorApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation virtualOperatorAddCertificate
     *
     * Adds a new virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorCertificateCreateDto $certificate  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function virtualOperatorAddCertificate($virtual_operator_id, $certificate)
    {
        list($response) = $this->virtualOperatorAddCertificateWithHttpInfo($virtual_operator_id, $certificate);
        return $response;
    }

    /**
     * Operation virtualOperatorAddCertificateWithHttpInfo
     *
     * Adds a new virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorCertificateCreateDto $certificate  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorAddCertificateWithHttpInfo($virtual_operator_id, $certificate)
    {
        $returnType = 'string';
        $request = $this->virtualOperatorAddCertificateRequest($virtual_operator_id, $certificate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorAddCertificateAsync
     *
     * Adds a new virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorCertificateCreateDto $certificate  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorAddCertificateAsync($virtual_operator_id, $certificate)
    {
        return $this->virtualOperatorAddCertificateAsyncWithHttpInfo($virtual_operator_id, $certificate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorAddCertificateAsyncWithHttpInfo
     *
     * Adds a new virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorCertificateCreateDto $certificate  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorAddCertificateAsyncWithHttpInfo($virtual_operator_id, $certificate)
    {
        $returnType = 'string';
        $request = $this->virtualOperatorAddCertificateRequest($virtual_operator_id, $certificate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorAddCertificate'
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorCertificateCreateDto $certificate  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorAddCertificateRequest($virtual_operator_id, $certificate)
    {
        // verify the required parameter 'virtual_operator_id' is set
        if ($virtual_operator_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator_id when calling virtualOperatorAddCertificate'
            );
        }
        // verify the required parameter 'certificate' is set
        if ($certificate === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $certificate when calling virtualOperatorAddCertificate'
            );
        }

        $resourcePath = '/api/virtualOperators/{virtualOperatorId}/certificate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperatorId' . '}',
                ObjectSerializer::toPathValue($virtual_operator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($certificate)) {
            $_tempBody = $certificate;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorCount
     *
     * Counts the number of results that match the search criteria
     *
     * @param  string $search_criteria_id search_criteria_id (optional)
     * @param  string $search_criteria_email search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field search_criteria_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function virtualOperatorCount($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        list($response) = $this->virtualOperatorCountWithHttpInfo($search_criteria_id, $search_criteria_email, $search_criteria_alias, $search_criteria_name, $search_criteria_include_settings, $search_criteria_include_medias, $search_criteria_offset, $search_criteria_number_of_records, $search_criteria_sort_field);
        return $response;
    }

    /**
     * Operation virtualOperatorCountWithHttpInfo
     *
     * Counts the number of results that match the search criteria
     *
     * @param  string $search_criteria_id (optional)
     * @param  string $search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorCountWithHttpInfo($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->virtualOperatorCountRequest($search_criteria_id, $search_criteria_email, $search_criteria_alias, $search_criteria_name, $search_criteria_include_settings, $search_criteria_include_medias, $search_criteria_offset, $search_criteria_number_of_records, $search_criteria_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorCountAsync
     *
     * Counts the number of results that match the search criteria
     *
     * @param  string $search_criteria_id (optional)
     * @param  string $search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorCountAsync($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        return $this->virtualOperatorCountAsyncWithHttpInfo($search_criteria_id, $search_criteria_email, $search_criteria_alias, $search_criteria_name, $search_criteria_include_settings, $search_criteria_include_medias, $search_criteria_offset, $search_criteria_number_of_records, $search_criteria_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorCountAsyncWithHttpInfo
     *
     * Counts the number of results that match the search criteria
     *
     * @param  string $search_criteria_id (optional)
     * @param  string $search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorCountAsyncWithHttpInfo($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->virtualOperatorCountRequest($search_criteria_id, $search_criteria_email, $search_criteria_alias, $search_criteria_name, $search_criteria_include_settings, $search_criteria_include_medias, $search_criteria_offset, $search_criteria_number_of_records, $search_criteria_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorCount'
     *
     * @param  string $search_criteria_id (optional)
     * @param  string $search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorCountRequest($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        if ($search_criteria_alias !== null && strlen($search_criteria_alias) > 60) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_alias" when calling VirtualOperatorApi.virtualOperatorCount, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/virtualOperators/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_id !== null) {
            $queryParams['searchCriteria.id'] = ObjectSerializer::toQueryValue($search_criteria_id);
        }
        // query params
        if ($search_criteria_email !== null) {
            $queryParams['searchCriteria.email'] = ObjectSerializer::toQueryValue($search_criteria_email);
        }
        // query params
        if ($search_criteria_alias !== null) {
            $queryParams['searchCriteria.alias'] = ObjectSerializer::toQueryValue($search_criteria_alias);
        }
        // query params
        if ($search_criteria_name !== null) {
            $queryParams['searchCriteria.name'] = ObjectSerializer::toQueryValue($search_criteria_name);
        }
        // query params
        if ($search_criteria_include_settings !== null) {
            $queryParams['searchCriteria.includeSettings'] = ObjectSerializer::toQueryValue($search_criteria_include_settings);
        }
        // query params
        if ($search_criteria_include_medias !== null) {
            $queryParams['searchCriteria.includeMedias'] = ObjectSerializer::toQueryValue($search_criteria_include_medias);
        }
        // query params
        if ($search_criteria_offset !== null) {
            $queryParams['searchCriteria.offset'] = ObjectSerializer::toQueryValue($search_criteria_offset);
        }
        // query params
        if ($search_criteria_number_of_records !== null) {
            $queryParams['searchCriteria.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_number_of_records);
        }
        // query params
        if ($search_criteria_sort_field !== null) {
            $queryParams['searchCriteria.sortField'] = ObjectSerializer::toQueryValue($search_criteria_sort_field);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorCreate
     *
     * Creates a new Virtual Operator
     *
     * @param  \Swagger\Client\Model\VirtualOperatorCreateDto $virtual_operator  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function virtualOperatorCreate($virtual_operator)
    {
        list($response) = $this->virtualOperatorCreateWithHttpInfo($virtual_operator);
        return $response;
    }

    /**
     * Operation virtualOperatorCreateWithHttpInfo
     *
     * Creates a new Virtual Operator
     *
     * @param  \Swagger\Client\Model\VirtualOperatorCreateDto $virtual_operator  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorCreateWithHttpInfo($virtual_operator)
    {
        $returnType = 'string';
        $request = $this->virtualOperatorCreateRequest($virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorCreateAsync
     *
     * Creates a new Virtual Operator
     *
     * @param  \Swagger\Client\Model\VirtualOperatorCreateDto $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorCreateAsync($virtual_operator)
    {
        return $this->virtualOperatorCreateAsyncWithHttpInfo($virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorCreateAsyncWithHttpInfo
     *
     * Creates a new Virtual Operator
     *
     * @param  \Swagger\Client\Model\VirtualOperatorCreateDto $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorCreateAsyncWithHttpInfo($virtual_operator)
    {
        $returnType = 'string';
        $request = $this->virtualOperatorCreateRequest($virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorCreate'
     *
     * @param  \Swagger\Client\Model\VirtualOperatorCreateDto $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorCreateRequest($virtual_operator)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling virtualOperatorCreate'
            );
        }

        $resourcePath = '/api/virtualOperators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($virtual_operator)) {
            $_tempBody = $virtual_operator;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorDetails
     *
     * Gets a specific virtual operator
     *
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VirtualOperatorDetailsDto
     */
    public function virtualOperatorDetails($id)
    {
        list($response) = $this->virtualOperatorDetailsWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation virtualOperatorDetailsWithHttpInfo
     *
     * Gets a specific virtual operator
     *
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VirtualOperatorDetailsDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorDetailsWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorDetailsDto';
        $request = $this->virtualOperatorDetailsRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VirtualOperatorDetailsDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorDetailsAsync
     *
     * Gets a specific virtual operator
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorDetailsAsync($id)
    {
        return $this->virtualOperatorDetailsAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorDetailsAsyncWithHttpInfo
     *
     * Gets a specific virtual operator
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorDetailsAsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorDetailsDto';
        $request = $this->virtualOperatorDetailsRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorDetails'
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorDetailsRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling virtualOperatorDetails'
            );
        }

        $resourcePath = '/api/virtualOperators/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorGetByCompanyIdentification
     *
     * Gets the Virtual Operators by Company
     *
     * @param  bool $include_medias  (optional)
     * @param  bool $include_settings  (optional)
     * @param  string $identification_dto_document_number Tax identification number; MaxLength: 50 (optional)
     * @param  string $identification_dto_document_type Tax identification type (In Colombia NIT).   The value must be one of this [&#39;CivilRegistry&#39;, &#39;IdentityCard&#39;, &#39;CitizenshipCard&#39;, &#39;ForeignerCard&#39;, &#39;ForeignerIdentification&#39;, &#39;NIT&#39;, &#39;Passport&#39;, &#39;ForeignIdentificationDocument&#39; ] (optional)
     * @param  string $identification_dto_country_code Country Code: In Colombia &#39;CO&#39; (optional)
     * @param  string $identification_dto_code Read only field. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VirtualOperatorDetailsDto[]
     */
    public function virtualOperatorGetByCompanyIdentification($include_medias = null, $include_settings = null, $identification_dto_document_number = null, $identification_dto_document_type = null, $identification_dto_country_code = null, $identification_dto_code = null)
    {
        list($response) = $this->virtualOperatorGetByCompanyIdentificationWithHttpInfo($include_medias, $include_settings, $identification_dto_document_number, $identification_dto_document_type, $identification_dto_country_code, $identification_dto_code);
        return $response;
    }

    /**
     * Operation virtualOperatorGetByCompanyIdentificationWithHttpInfo
     *
     * Gets the Virtual Operators by Company
     *
     * @param  bool $include_medias  (optional)
     * @param  bool $include_settings  (optional)
     * @param  string $identification_dto_document_number Tax identification number; MaxLength: 50 (optional)
     * @param  string $identification_dto_document_type Tax identification type (In Colombia NIT).   The value must be one of this [&#39;CivilRegistry&#39;, &#39;IdentityCard&#39;, &#39;CitizenshipCard&#39;, &#39;ForeignerCard&#39;, &#39;ForeignerIdentification&#39;, &#39;NIT&#39;, &#39;Passport&#39;, &#39;ForeignIdentificationDocument&#39; ] (optional)
     * @param  string $identification_dto_country_code Country Code: In Colombia &#39;CO&#39; (optional)
     * @param  string $identification_dto_code Read only field. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VirtualOperatorDetailsDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorGetByCompanyIdentificationWithHttpInfo($include_medias = null, $include_settings = null, $identification_dto_document_number = null, $identification_dto_document_type = null, $identification_dto_country_code = null, $identification_dto_code = null)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorDetailsDto[]';
        $request = $this->virtualOperatorGetByCompanyIdentificationRequest($include_medias, $include_settings, $identification_dto_document_number, $identification_dto_document_type, $identification_dto_country_code, $identification_dto_code);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VirtualOperatorDetailsDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorGetByCompanyIdentificationAsync
     *
     * Gets the Virtual Operators by Company
     *
     * @param  bool $include_medias  (optional)
     * @param  bool $include_settings  (optional)
     * @param  string $identification_dto_document_number Tax identification number; MaxLength: 50 (optional)
     * @param  string $identification_dto_document_type Tax identification type (In Colombia NIT).   The value must be one of this [&#39;CivilRegistry&#39;, &#39;IdentityCard&#39;, &#39;CitizenshipCard&#39;, &#39;ForeignerCard&#39;, &#39;ForeignerIdentification&#39;, &#39;NIT&#39;, &#39;Passport&#39;, &#39;ForeignIdentificationDocument&#39; ] (optional)
     * @param  string $identification_dto_country_code Country Code: In Colombia &#39;CO&#39; (optional)
     * @param  string $identification_dto_code Read only field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetByCompanyIdentificationAsync($include_medias = null, $include_settings = null, $identification_dto_document_number = null, $identification_dto_document_type = null, $identification_dto_country_code = null, $identification_dto_code = null)
    {
        return $this->virtualOperatorGetByCompanyIdentificationAsyncWithHttpInfo($include_medias, $include_settings, $identification_dto_document_number, $identification_dto_document_type, $identification_dto_country_code, $identification_dto_code)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorGetByCompanyIdentificationAsyncWithHttpInfo
     *
     * Gets the Virtual Operators by Company
     *
     * @param  bool $include_medias  (optional)
     * @param  bool $include_settings  (optional)
     * @param  string $identification_dto_document_number Tax identification number; MaxLength: 50 (optional)
     * @param  string $identification_dto_document_type Tax identification type (In Colombia NIT).   The value must be one of this [&#39;CivilRegistry&#39;, &#39;IdentityCard&#39;, &#39;CitizenshipCard&#39;, &#39;ForeignerCard&#39;, &#39;ForeignerIdentification&#39;, &#39;NIT&#39;, &#39;Passport&#39;, &#39;ForeignIdentificationDocument&#39; ] (optional)
     * @param  string $identification_dto_country_code Country Code: In Colombia &#39;CO&#39; (optional)
     * @param  string $identification_dto_code Read only field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetByCompanyIdentificationAsyncWithHttpInfo($include_medias = null, $include_settings = null, $identification_dto_document_number = null, $identification_dto_document_type = null, $identification_dto_country_code = null, $identification_dto_code = null)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorDetailsDto[]';
        $request = $this->virtualOperatorGetByCompanyIdentificationRequest($include_medias, $include_settings, $identification_dto_document_number, $identification_dto_document_type, $identification_dto_country_code, $identification_dto_code);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorGetByCompanyIdentification'
     *
     * @param  bool $include_medias  (optional)
     * @param  bool $include_settings  (optional)
     * @param  string $identification_dto_document_number Tax identification number; MaxLength: 50 (optional)
     * @param  string $identification_dto_document_type Tax identification type (In Colombia NIT).   The value must be one of this [&#39;CivilRegistry&#39;, &#39;IdentityCard&#39;, &#39;CitizenshipCard&#39;, &#39;ForeignerCard&#39;, &#39;ForeignerIdentification&#39;, &#39;NIT&#39;, &#39;Passport&#39;, &#39;ForeignIdentificationDocument&#39; ] (optional)
     * @param  string $identification_dto_country_code Country Code: In Colombia &#39;CO&#39; (optional)
     * @param  string $identification_dto_code Read only field. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorGetByCompanyIdentificationRequest($include_medias = null, $include_settings = null, $identification_dto_document_number = null, $identification_dto_document_type = null, $identification_dto_country_code = null, $identification_dto_code = null)
    {
        if ($identification_dto_document_number !== null && strlen($identification_dto_document_number) > 50) {
            throw new \InvalidArgumentException('invalid length for "$identification_dto_document_number" when calling VirtualOperatorApi.virtualOperatorGetByCompanyIdentification, must be smaller than or equal to 50.');
        }


        $resourcePath = '/api/virtualOperators/getbycompany';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_medias !== null) {
            $queryParams['includeMedias'] = ObjectSerializer::toQueryValue($include_medias);
        }
        // query params
        if ($include_settings !== null) {
            $queryParams['includeSettings'] = ObjectSerializer::toQueryValue($include_settings);
        }
        // query params
        if ($identification_dto_document_number !== null) {
            $queryParams['identificationDto.documentNumber'] = ObjectSerializer::toQueryValue($identification_dto_document_number);
        }
        // query params
        if ($identification_dto_document_type !== null) {
            $queryParams['identificationDto.documentType'] = ObjectSerializer::toQueryValue($identification_dto_document_type);
        }
        // query params
        if ($identification_dto_country_code !== null) {
            $queryParams['identificationDto.countryCode'] = ObjectSerializer::toQueryValue($identification_dto_country_code);
        }
        // query params
        if ($identification_dto_code !== null) {
            $queryParams['identificationDto.code'] = ObjectSerializer::toQueryValue($identification_dto_code);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorGetCertificate
     *
     * Gets the virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VirtualOperatorCertificateSummaryDto
     */
    public function virtualOperatorGetCertificate($virtual_operator_id)
    {
        list($response) = $this->virtualOperatorGetCertificateWithHttpInfo($virtual_operator_id);
        return $response;
    }

    /**
     * Operation virtualOperatorGetCertificateWithHttpInfo
     *
     * Gets the virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VirtualOperatorCertificateSummaryDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorGetCertificateWithHttpInfo($virtual_operator_id)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorCertificateSummaryDto';
        $request = $this->virtualOperatorGetCertificateRequest($virtual_operator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VirtualOperatorCertificateSummaryDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorGetCertificateAsync
     *
     * Gets the virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetCertificateAsync($virtual_operator_id)
    {
        return $this->virtualOperatorGetCertificateAsyncWithHttpInfo($virtual_operator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorGetCertificateAsyncWithHttpInfo
     *
     * Gets the virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetCertificateAsyncWithHttpInfo($virtual_operator_id)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorCertificateSummaryDto';
        $request = $this->virtualOperatorGetCertificateRequest($virtual_operator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorGetCertificate'
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorGetCertificateRequest($virtual_operator_id)
    {
        // verify the required parameter 'virtual_operator_id' is set
        if ($virtual_operator_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator_id when calling virtualOperatorGetCertificate'
            );
        }

        $resourcePath = '/api/virtualOperators/{virtualOperatorId}/certificate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperatorId' . '}',
                ObjectSerializer::toPathValue($virtual_operator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorGetLogo
     *
     * Gets Logo from virtual operator
     *
     * @param  string $alias MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VirtualOperatorMediaDto
     */
    public function virtualOperatorGetLogo($alias)
    {
        list($response) = $this->virtualOperatorGetLogoWithHttpInfo($alias);
        return $response;
    }

    /**
     * Operation virtualOperatorGetLogoWithHttpInfo
     *
     * Gets Logo from virtual operator
     *
     * @param  string $alias MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VirtualOperatorMediaDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorGetLogoWithHttpInfo($alias)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorMediaDto';
        $request = $this->virtualOperatorGetLogoRequest($alias);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VirtualOperatorMediaDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorGetLogoAsync
     *
     * Gets Logo from virtual operator
     *
     * @param  string $alias MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetLogoAsync($alias)
    {
        return $this->virtualOperatorGetLogoAsyncWithHttpInfo($alias)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorGetLogoAsyncWithHttpInfo
     *
     * Gets Logo from virtual operator
     *
     * @param  string $alias MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetLogoAsyncWithHttpInfo($alias)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorMediaDto';
        $request = $this->virtualOperatorGetLogoRequest($alias);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorGetLogo'
     *
     * @param  string $alias MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorGetLogoRequest($alias)
    {
        // verify the required parameter 'alias' is set
        if ($alias === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $alias when calling virtualOperatorGetLogo'
            );
        }
        if (strlen($alias) > 60) {
            throw new \InvalidArgumentException('invalid length for "$alias" when calling VirtualOperatorApi.virtualOperatorGetLogo, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/virtualOperators/{alias}/getlogo';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($alias !== null) {
            $resourcePath = str_replace(
                '{' . 'alias' . '}',
                ObjectSerializer::toPathValue($alias),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorGetSettings
     *
     * Gets settings for a especific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VirtualOperatorSettingsDto[]
     */
    public function virtualOperatorGetSettings($virtual_operator_id)
    {
        list($response) = $this->virtualOperatorGetSettingsWithHttpInfo($virtual_operator_id);
        return $response;
    }

    /**
     * Operation virtualOperatorGetSettingsWithHttpInfo
     *
     * Gets settings for a especific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VirtualOperatorSettingsDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorGetSettingsWithHttpInfo($virtual_operator_id)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorSettingsDto[]';
        $request = $this->virtualOperatorGetSettingsRequest($virtual_operator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VirtualOperatorSettingsDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorGetSettingsAsync
     *
     * Gets settings for a especific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetSettingsAsync($virtual_operator_id)
    {
        return $this->virtualOperatorGetSettingsAsyncWithHttpInfo($virtual_operator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorGetSettingsAsyncWithHttpInfo
     *
     * Gets settings for a especific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetSettingsAsyncWithHttpInfo($virtual_operator_id)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorSettingsDto[]';
        $request = $this->virtualOperatorGetSettingsRequest($virtual_operator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorGetSettings'
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorGetSettingsRequest($virtual_operator_id)
    {
        // verify the required parameter 'virtual_operator_id' is set
        if ($virtual_operator_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator_id when calling virtualOperatorGetSettings'
            );
        }

        $resourcePath = '/api/virtualOperators/{virtualOperatorId}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperatorId' . '}',
                ObjectSerializer::toPathValue($virtual_operator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorGetSettingsByKey
     *
     * Gets settings for a specific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     * @param  string $key  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function virtualOperatorGetSettingsByKey($virtual_operator_id, $key)
    {
        list($response) = $this->virtualOperatorGetSettingsByKeyWithHttpInfo($virtual_operator_id, $key);
        return $response;
    }

    /**
     * Operation virtualOperatorGetSettingsByKeyWithHttpInfo
     *
     * Gets settings for a specific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     * @param  string $key  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorGetSettingsByKeyWithHttpInfo($virtual_operator_id, $key)
    {
        $returnType = 'string';
        $request = $this->virtualOperatorGetSettingsByKeyRequest($virtual_operator_id, $key);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorGetSettingsByKeyAsync
     *
     * Gets settings for a specific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     * @param  string $key  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetSettingsByKeyAsync($virtual_operator_id, $key)
    {
        return $this->virtualOperatorGetSettingsByKeyAsyncWithHttpInfo($virtual_operator_id, $key)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorGetSettingsByKeyAsyncWithHttpInfo
     *
     * Gets settings for a specific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     * @param  string $key  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorGetSettingsByKeyAsyncWithHttpInfo($virtual_operator_id, $key)
    {
        $returnType = 'string';
        $request = $this->virtualOperatorGetSettingsByKeyRequest($virtual_operator_id, $key);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorGetSettingsByKey'
     *
     * @param  string $virtual_operator_id  (required)
     * @param  string $key  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorGetSettingsByKeyRequest($virtual_operator_id, $key)
    {
        // verify the required parameter 'virtual_operator_id' is set
        if ($virtual_operator_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator_id when calling virtualOperatorGetSettingsByKey'
            );
        }
        // verify the required parameter 'key' is set
        if ($key === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $key when calling virtualOperatorGetSettingsByKey'
            );
        }

        $resourcePath = '/api/virtualOperators/{virtualOperatorId}/settings/{key}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperatorId' . '}',
                ObjectSerializer::toPathValue($virtual_operator_id),
                $resourcePath
            );
        }
        // path params
        if ($key !== null) {
            $resourcePath = str_replace(
                '{' . 'key' . '}',
                ObjectSerializer::toPathValue($key),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorRemove
     *
     * Removes a virtual Operator
     *
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function virtualOperatorRemove($id)
    {
        list($response) = $this->virtualOperatorRemoveWithHttpInfo($id);
        return $response;
    }

    /**
     * Operation virtualOperatorRemoveWithHttpInfo
     *
     * Removes a virtual Operator
     *
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorRemoveWithHttpInfo($id)
    {
        $returnType = 'bool';
        $request = $this->virtualOperatorRemoveRequest($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorRemoveAsync
     *
     * Removes a virtual Operator
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorRemoveAsync($id)
    {
        return $this->virtualOperatorRemoveAsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorRemoveAsyncWithHttpInfo
     *
     * Removes a virtual Operator
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorRemoveAsyncWithHttpInfo($id)
    {
        $returnType = 'bool';
        $request = $this->virtualOperatorRemoveRequest($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorRemove'
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorRemoveRequest($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling virtualOperatorRemove'
            );
        }

        $resourcePath = '/api/virtualOperators/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorRemoveCertificate
     *
     * Adds a new virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function virtualOperatorRemoveCertificate($virtual_operator_id)
    {
        list($response) = $this->virtualOperatorRemoveCertificateWithHttpInfo($virtual_operator_id);
        return $response;
    }

    /**
     * Operation virtualOperatorRemoveCertificateWithHttpInfo
     *
     * Adds a new virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorRemoveCertificateWithHttpInfo($virtual_operator_id)
    {
        $returnType = 'bool';
        $request = $this->virtualOperatorRemoveCertificateRequest($virtual_operator_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorRemoveCertificateAsync
     *
     * Adds a new virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorRemoveCertificateAsync($virtual_operator_id)
    {
        return $this->virtualOperatorRemoveCertificateAsyncWithHttpInfo($virtual_operator_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorRemoveCertificateAsyncWithHttpInfo
     *
     * Adds a new virtual operator outboundDocument certificate
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorRemoveCertificateAsyncWithHttpInfo($virtual_operator_id)
    {
        $returnType = 'bool';
        $request = $this->virtualOperatorRemoveCertificateRequest($virtual_operator_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorRemoveCertificate'
     *
     * @param  string $virtual_operator_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorRemoveCertificateRequest($virtual_operator_id)
    {
        // verify the required parameter 'virtual_operator_id' is set
        if ($virtual_operator_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator_id when calling virtualOperatorRemoveCertificate'
            );
        }

        $resourcePath = '/api/virtualOperators/{virtualOperatorId}/certificate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperatorId' . '}',
                ObjectSerializer::toPathValue($virtual_operator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorSearch
     *
     * Gets the Virtual Operators that match a given criteria  Default NumberOfRecords=25
     *
     * @param  string $search_criteria_id search_criteria_id (optional)
     * @param  string $search_criteria_email search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field search_criteria_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\VirtualOperatorDetailsDto[]
     */
    public function virtualOperatorSearch($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        list($response) = $this->virtualOperatorSearchWithHttpInfo($search_criteria_id, $search_criteria_email, $search_criteria_alias, $search_criteria_name, $search_criteria_include_settings, $search_criteria_include_medias, $search_criteria_offset, $search_criteria_number_of_records, $search_criteria_sort_field);
        return $response;
    }

    /**
     * Operation virtualOperatorSearchWithHttpInfo
     *
     * Gets the Virtual Operators that match a given criteria  Default NumberOfRecords=25
     *
     * @param  string $search_criteria_id (optional)
     * @param  string $search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\VirtualOperatorDetailsDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorSearchWithHttpInfo($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorDetailsDto[]';
        $request = $this->virtualOperatorSearchRequest($search_criteria_id, $search_criteria_email, $search_criteria_alias, $search_criteria_name, $search_criteria_include_settings, $search_criteria_include_medias, $search_criteria_offset, $search_criteria_number_of_records, $search_criteria_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\VirtualOperatorDetailsDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorSearchAsync
     *
     * Gets the Virtual Operators that match a given criteria  Default NumberOfRecords=25
     *
     * @param  string $search_criteria_id (optional)
     * @param  string $search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorSearchAsync($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        return $this->virtualOperatorSearchAsyncWithHttpInfo($search_criteria_id, $search_criteria_email, $search_criteria_alias, $search_criteria_name, $search_criteria_include_settings, $search_criteria_include_medias, $search_criteria_offset, $search_criteria_number_of_records, $search_criteria_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorSearchAsyncWithHttpInfo
     *
     * Gets the Virtual Operators that match a given criteria  Default NumberOfRecords=25
     *
     * @param  string $search_criteria_id (optional)
     * @param  string $search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorSearchAsyncWithHttpInfo($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\VirtualOperatorDetailsDto[]';
        $request = $this->virtualOperatorSearchRequest($search_criteria_id, $search_criteria_email, $search_criteria_alias, $search_criteria_name, $search_criteria_include_settings, $search_criteria_include_medias, $search_criteria_offset, $search_criteria_number_of_records, $search_criteria_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorSearch'
     *
     * @param  string $search_criteria_id (optional)
     * @param  string $search_criteria_email (optional)
     * @param  string $search_criteria_alias MaxLength: 60 (optional)
     * @param  string $search_criteria_name (optional)
     * @param  bool $search_criteria_include_settings (optional)
     * @param  bool $search_criteria_include_medias (optional)
     * @param  int $search_criteria_offset (optional)
     * @param  int $search_criteria_number_of_records (optional)
     * @param  string $search_criteria_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorSearchRequest($search_criteria_id = null, $search_criteria_email = null, $search_criteria_alias = null, $search_criteria_name = null, $search_criteria_include_settings = null, $search_criteria_include_medias = null, $search_criteria_offset = null, $search_criteria_number_of_records = null, $search_criteria_sort_field = null)
    {
        if ($search_criteria_alias !== null && strlen($search_criteria_alias) > 60) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_alias" when calling VirtualOperatorApi.virtualOperatorSearch, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/virtualOperators';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_id !== null) {
            $queryParams['searchCriteria.id'] = ObjectSerializer::toQueryValue($search_criteria_id);
        }
        // query params
        if ($search_criteria_email !== null) {
            $queryParams['searchCriteria.email'] = ObjectSerializer::toQueryValue($search_criteria_email);
        }
        // query params
        if ($search_criteria_alias !== null) {
            $queryParams['searchCriteria.alias'] = ObjectSerializer::toQueryValue($search_criteria_alias);
        }
        // query params
        if ($search_criteria_name !== null) {
            $queryParams['searchCriteria.name'] = ObjectSerializer::toQueryValue($search_criteria_name);
        }
        // query params
        if ($search_criteria_include_settings !== null) {
            $queryParams['searchCriteria.includeSettings'] = ObjectSerializer::toQueryValue($search_criteria_include_settings);
        }
        // query params
        if ($search_criteria_include_medias !== null) {
            $queryParams['searchCriteria.includeMedias'] = ObjectSerializer::toQueryValue($search_criteria_include_medias);
        }
        // query params
        if ($search_criteria_offset !== null) {
            $queryParams['searchCriteria.offset'] = ObjectSerializer::toQueryValue($search_criteria_offset);
        }
        // query params
        if ($search_criteria_number_of_records !== null) {
            $queryParams['searchCriteria.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_number_of_records);
        }
        // query params
        if ($search_criteria_sort_field !== null) {
            $queryParams['searchCriteria.sortField'] = ObjectSerializer::toQueryValue($search_criteria_sort_field);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorUpdate
     *
     * Updates a virtual operator
     *
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorUpdateDto $virtual_operator  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function virtualOperatorUpdate($id, $virtual_operator)
    {
        list($response) = $this->virtualOperatorUpdateWithHttpInfo($id, $virtual_operator);
        return $response;
    }

    /**
     * Operation virtualOperatorUpdateWithHttpInfo
     *
     * Updates a virtual operator
     *
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorUpdateDto $virtual_operator  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorUpdateWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'string';
        $request = $this->virtualOperatorUpdateRequest($id, $virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorUpdateAsync
     *
     * Updates a virtual operator
     *
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorUpdateDto $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorUpdateAsync($id, $virtual_operator)
    {
        return $this->virtualOperatorUpdateAsyncWithHttpInfo($id, $virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorUpdateAsyncWithHttpInfo
     *
     * Updates a virtual operator
     *
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorUpdateDto $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorUpdateAsyncWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'string';
        $request = $this->virtualOperatorUpdateRequest($id, $virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorUpdate'
     *
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorUpdateDto $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorUpdateRequest($id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling virtualOperatorUpdate'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling virtualOperatorUpdate'
            );
        }

        $resourcePath = '/api/virtualOperators/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($virtual_operator)) {
            $_tempBody = $virtual_operator;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation virtualOperatorUpdateSettingsValue
     *
     * Updates settings for a especific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorSettingsDto $settings_dto  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function virtualOperatorUpdateSettingsValue($virtual_operator_id, $settings_dto)
    {
        list($response) = $this->virtualOperatorUpdateSettingsValueWithHttpInfo($virtual_operator_id, $settings_dto);
        return $response;
    }

    /**
     * Operation virtualOperatorUpdateSettingsValueWithHttpInfo
     *
     * Updates settings for a especific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorSettingsDto $settings_dto  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function virtualOperatorUpdateSettingsValueWithHttpInfo($virtual_operator_id, $settings_dto)
    {
        $returnType = 'bool';
        $request = $this->virtualOperatorUpdateSettingsValueRequest($virtual_operator_id, $settings_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation virtualOperatorUpdateSettingsValueAsync
     *
     * Updates settings for a especific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorSettingsDto $settings_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorUpdateSettingsValueAsync($virtual_operator_id, $settings_dto)
    {
        return $this->virtualOperatorUpdateSettingsValueAsyncWithHttpInfo($virtual_operator_id, $settings_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation virtualOperatorUpdateSettingsValueAsyncWithHttpInfo
     *
     * Updates settings for a especific virtual operator
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorSettingsDto $settings_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function virtualOperatorUpdateSettingsValueAsyncWithHttpInfo($virtual_operator_id, $settings_dto)
    {
        $returnType = 'bool';
        $request = $this->virtualOperatorUpdateSettingsValueRequest($virtual_operator_id, $settings_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'virtualOperatorUpdateSettingsValue'
     *
     * @param  string $virtual_operator_id  (required)
     * @param  \Swagger\Client\Model\VirtualOperatorSettingsDto $settings_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function virtualOperatorUpdateSettingsValueRequest($virtual_operator_id, $settings_dto)
    {
        // verify the required parameter 'virtual_operator_id' is set
        if ($virtual_operator_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator_id when calling virtualOperatorUpdateSettingsValue'
            );
        }
        // verify the required parameter 'settings_dto' is set
        if ($settings_dto === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $settings_dto when calling virtualOperatorUpdateSettingsValue'
            );
        }

        $resourcePath = '/api/virtualOperators/{virtualOperatorId}/settings';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator_id !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperatorId' . '}',
                ObjectSerializer::toPathValue($virtual_operator_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($settings_dto)) {
            $_tempBody = $settings_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
