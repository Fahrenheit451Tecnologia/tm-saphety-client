<?php
/**
 * OutboundDocumentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * OutboundDocumentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class OutboundDocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation outboundDocumentAddAttachment
     *
     * Adds an attachment to a outboundDocument
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DocumentAttachmentDTO $document_attachment  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function outboundDocumentAddAttachment($virtual_operator, $document_attachment, $id)
    {
        list($response) = $this->outboundDocumentAddAttachmentWithHttpInfo($virtual_operator, $document_attachment, $id);
        return $response;
    }

    /**
     * Operation outboundDocumentAddAttachmentWithHttpInfo
     *
     * Adds an attachment to a outboundDocument
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DocumentAttachmentDTO $document_attachment  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentAddAttachmentWithHttpInfo($virtual_operator, $document_attachment, $id)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentAddAttachmentRequest($virtual_operator, $document_attachment, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentAddAttachmentAsync
     *
     * Adds an attachment to a outboundDocument
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DocumentAttachmentDTO $document_attachment  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentAddAttachmentAsync($virtual_operator, $document_attachment, $id)
    {
        return $this->outboundDocumentAddAttachmentAsyncWithHttpInfo($virtual_operator, $document_attachment, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentAddAttachmentAsyncWithHttpInfo
     *
     * Adds an attachment to a outboundDocument
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DocumentAttachmentDTO $document_attachment  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentAddAttachmentAsyncWithHttpInfo($virtual_operator, $document_attachment, $id)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentAddAttachmentRequest($virtual_operator, $document_attachment, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentAddAttachment'
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DocumentAttachmentDTO $document_attachment  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentAddAttachmentRequest($virtual_operator, $document_attachment, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentAddAttachment');
        }
        // verify the required parameter 'document_attachment' is set
        if ($document_attachment === null) {
            throw new \InvalidArgumentException('Missing the required parameter $document_attachment when calling outboundDocumentAddAttachment');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling outboundDocumentAddAttachment');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/{id}/attachments/add';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($document_attachment)) {
            $_tempBody = $document_attachment;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentCount
     *
     * Counts the requested search result elements
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function outboundDocumentCount($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->outboundDocumentCountWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation outboundDocumentCountWithHttpInfo
     *
     * Counts the requested search result elements
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentCountWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentCountRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentCountAsync
     *
     * Counts the requested search result elements
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCountAsync($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->outboundDocumentCountAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentCountAsyncWithHttpInfo
     *
     * Counts the requested search result elements
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCountAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentCountRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentCount'
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentCountRequest($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentCount');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_document_number !== null) {
            $queryParams['searchCriteriaDto.documentNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_number);
        }
        // query params
        if ($search_criteria_dto_currency !== null) {
            $queryParams['searchCriteriaDto.currency'] = ObjectSerializer::toQueryValue($search_criteria_dto_currency);
        }
        // query params
        if (is_array($search_criteria_dto_company_ids)) {
            $search_criteria_dto_company_ids = ObjectSerializer::serializeCollection($search_criteria_dto_company_ids, 'multi', true);
        }
        if ($search_criteria_dto_company_ids !== null) {
            $queryParams['searchCriteriaDto.companyIds'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_ids);
        }
        // query params
        if (is_array($search_criteria_dto_issuers)) {
            $search_criteria_dto_issuers = ObjectSerializer::serializeCollection($search_criteria_dto_issuers, 'multi', true);
        }
        if ($search_criteria_dto_issuers !== null) {
            $queryParams['searchCriteriaDto.issuers'] = ObjectSerializer::toQueryValue($search_criteria_dto_issuers);
        }
        // query params
        if (is_array($search_criteria_dto_customers)) {
            $search_criteria_dto_customers = ObjectSerializer::serializeCollection($search_criteria_dto_customers, 'multi', true);
        }
        if ($search_criteria_dto_customers !== null) {
            $queryParams['searchCriteriaDto.customers'] = ObjectSerializer::toQueryValue($search_criteria_dto_customers);
        }
        // query params
        if ($search_criteria_dto_include_files !== null) {
            $queryParams['searchCriteriaDto.includeFiles'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_files);
        }
        // query params
        if ($search_criteria_dto_include_attachments !== null) {
            $queryParams['searchCriteriaDto.includeAttachments'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_attachments);
        }
        // query params
        if (is_array($search_criteria_dto_document_types)) {
            $search_criteria_dto_document_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_types, 'multi', true);
        }
        if ($search_criteria_dto_document_types !== null) {
            $queryParams['searchCriteriaDto.documentTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_types);
        }
        // query params
        if (is_array($search_criteria_dto_document_sub_types)) {
            $search_criteria_dto_document_sub_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_sub_types, 'multi', true);
        }
        if ($search_criteria_dto_document_sub_types !== null) {
            $queryParams['searchCriteriaDto.documentSubTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_sub_types);
        }
        // query params
        if (is_array($search_criteria_dto_business_status)) {
            $search_criteria_dto_business_status = ObjectSerializer::serializeCollection($search_criteria_dto_business_status, 'multi', true);
        }
        if ($search_criteria_dto_business_status !== null) {
            $queryParams['searchCriteriaDto.businessStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_business_status);
        }
        // query params
        if (is_array($search_criteria_dto_communication_status)) {
            $search_criteria_dto_communication_status = ObjectSerializer::serializeCollection($search_criteria_dto_communication_status, 'multi', true);
        }
        if ($search_criteria_dto_communication_status !== null) {
            $queryParams['searchCriteriaDto.communicationStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_communication_status);
        }
        // query params
        if ($search_criteria_dto_creation_date_start !== null) {
            $queryParams['searchCriteriaDto.creationDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_start);
        }
        // query params
        if ($search_criteria_dto_creation_date_end !== null) {
            $queryParams['searchCriteriaDto.creationDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_end);
        }
        // query params
        if ($search_criteria_dto_document_date_start !== null) {
            $queryParams['searchCriteriaDto.documentDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_start);
        }
        // query params
        if ($search_criteria_dto_document_date_end !== null) {
            $queryParams['searchCriteriaDto.documentDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_end);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentCreateContingencyInvoice
     *
     * Creates a Contingency Invoice
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\ContingencyInvoiceDTO $contingency_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageDocumentResult
     */
    public function outboundDocumentCreateContingencyInvoice($virtual_operator, $contingency_invoice, $in_transport_document_id = null)
    {
        list($response) = $this->outboundDocumentCreateContingencyInvoiceWithHttpInfo($virtual_operator, $contingency_invoice, $in_transport_document_id);
        return $response;
    }

    /**
     * Operation outboundDocumentCreateContingencyInvoiceWithHttpInfo
     *
     * Creates a Contingency Invoice
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\ContingencyInvoiceDTO $contingency_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageDocumentResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentCreateContingencyInvoiceWithHttpInfo($virtual_operator, $contingency_invoice, $in_transport_document_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentCreateContingencyInvoiceRequest($virtual_operator, $contingency_invoice, $in_transport_document_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultMessageDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentCreateContingencyInvoiceAsync
     *
     * Creates a Contingency Invoice
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\ContingencyInvoiceDTO $contingency_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCreateContingencyInvoiceAsync($virtual_operator, $contingency_invoice, $in_transport_document_id = null)
    {
        return $this->outboundDocumentCreateContingencyInvoiceAsyncWithHttpInfo($virtual_operator, $contingency_invoice, $in_transport_document_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentCreateContingencyInvoiceAsyncWithHttpInfo
     *
     * Creates a Contingency Invoice
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\ContingencyInvoiceDTO $contingency_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCreateContingencyInvoiceAsyncWithHttpInfo($virtual_operator, $contingency_invoice, $in_transport_document_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentCreateContingencyInvoiceRequest($virtual_operator, $contingency_invoice, $in_transport_document_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentCreateContingencyInvoice'
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\ContingencyInvoiceDTO $contingency_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentCreateContingencyInvoiceRequest($virtual_operator, $contingency_invoice, $in_transport_document_id = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentCreateContingencyInvoice');
        }
        // verify the required parameter 'contingency_invoice' is set
        if ($contingency_invoice === null) {
            throw new \InvalidArgumentException('Missing the required parameter $contingency_invoice when calling outboundDocumentCreateContingencyInvoice');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/contingencyinvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($in_transport_document_id !== null) {
            $queryParams['inTransportDocumentId'] = ObjectSerializer::toQueryValue($in_transport_document_id);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($contingency_invoice)) {
            $_tempBody = $contingency_invoice;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentCreateCreditNote
     *
     * Creates a Credit Note
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\CreditNoteDTO $credit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageDocumentResult
     */
    public function outboundDocumentCreateCreditNote($virtual_operator, $credit_note, $in_transport_document_id = null)
    {
        list($response) = $this->outboundDocumentCreateCreditNoteWithHttpInfo($virtual_operator, $credit_note, $in_transport_document_id);
        return $response;
    }

    /**
     * Operation outboundDocumentCreateCreditNoteWithHttpInfo
     *
     * Creates a Credit Note
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\CreditNoteDTO $credit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageDocumentResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentCreateCreditNoteWithHttpInfo($virtual_operator, $credit_note, $in_transport_document_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentCreateCreditNoteRequest($virtual_operator, $credit_note, $in_transport_document_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultMessageDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentCreateCreditNoteAsync
     *
     * Creates a Credit Note
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\CreditNoteDTO $credit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCreateCreditNoteAsync($virtual_operator, $credit_note, $in_transport_document_id = null)
    {
        return $this->outboundDocumentCreateCreditNoteAsyncWithHttpInfo($virtual_operator, $credit_note, $in_transport_document_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentCreateCreditNoteAsyncWithHttpInfo
     *
     * Creates a Credit Note
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\CreditNoteDTO $credit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCreateCreditNoteAsyncWithHttpInfo($virtual_operator, $credit_note, $in_transport_document_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentCreateCreditNoteRequest($virtual_operator, $credit_note, $in_transport_document_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentCreateCreditNote'
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\CreditNoteDTO $credit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentCreateCreditNoteRequest($virtual_operator, $credit_note, $in_transport_document_id = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentCreateCreditNote');
        }
        // verify the required parameter 'credit_note' is set
        if ($credit_note === null) {
            throw new \InvalidArgumentException('Missing the required parameter $credit_note when calling outboundDocumentCreateCreditNote');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/creditnote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($in_transport_document_id !== null) {
            $queryParams['inTransportDocumentId'] = ObjectSerializer::toQueryValue($in_transport_document_id);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($credit_note)) {
            $_tempBody = $credit_note;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentCreateDebitNote
     *
     * Creates a Debit Note
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DebitNoteDTO $debit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageDocumentResult
     */
    public function outboundDocumentCreateDebitNote($virtual_operator, $debit_note, $in_transport_document_id = null)
    {
        list($response) = $this->outboundDocumentCreateDebitNoteWithHttpInfo($virtual_operator, $debit_note, $in_transport_document_id);
        return $response;
    }

    /**
     * Operation outboundDocumentCreateDebitNoteWithHttpInfo
     *
     * Creates a Debit Note
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DebitNoteDTO $debit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageDocumentResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentCreateDebitNoteWithHttpInfo($virtual_operator, $debit_note, $in_transport_document_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentCreateDebitNoteRequest($virtual_operator, $debit_note, $in_transport_document_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultMessageDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentCreateDebitNoteAsync
     *
     * Creates a Debit Note
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DebitNoteDTO $debit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCreateDebitNoteAsync($virtual_operator, $debit_note, $in_transport_document_id = null)
    {
        return $this->outboundDocumentCreateDebitNoteAsyncWithHttpInfo($virtual_operator, $debit_note, $in_transport_document_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentCreateDebitNoteAsyncWithHttpInfo
     *
     * Creates a Debit Note
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DebitNoteDTO $debit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCreateDebitNoteAsyncWithHttpInfo($virtual_operator, $debit_note, $in_transport_document_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentCreateDebitNoteRequest($virtual_operator, $debit_note, $in_transport_document_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentCreateDebitNote'
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\DebitNoteDTO $debit_note  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentCreateDebitNoteRequest($virtual_operator, $debit_note, $in_transport_document_id = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentCreateDebitNote');
        }
        // verify the required parameter 'debit_note' is set
        if ($debit_note === null) {
            throw new \InvalidArgumentException('Missing the required parameter $debit_note when calling outboundDocumentCreateDebitNote');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/debitnote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($in_transport_document_id !== null) {
            $queryParams['inTransportDocumentId'] = ObjectSerializer::toQueryValue($in_transport_document_id);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($debit_note)) {
            $_tempBody = $debit_note;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentCreateSalesInvoice
     *
     * Creates a Invoice
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SalesInvoiceDTO $sales_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageDocumentResult
     */
    public function outboundDocumentCreateSalesInvoice($virtual_operator, $sales_invoice, $in_transport_document_id = null)
    {
        list($response) = $this->outboundDocumentCreateSalesInvoiceWithHttpInfo($virtual_operator, $sales_invoice, $in_transport_document_id);
        return $response;
    }

    /**
     * Operation outboundDocumentCreateSalesInvoiceWithHttpInfo
     *
     * Creates a Invoice
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SalesInvoiceDTO $sales_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageDocumentResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentCreateSalesInvoiceWithHttpInfo($virtual_operator, $sales_invoice, $in_transport_document_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentCreateSalesInvoiceRequest($virtual_operator, $sales_invoice, $in_transport_document_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultMessageDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentCreateSalesInvoiceAsync
     *
     * Creates a Invoice
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SalesInvoiceDTO $sales_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCreateSalesInvoiceAsync($virtual_operator, $sales_invoice, $in_transport_document_id = null)
    {
        return $this->outboundDocumentCreateSalesInvoiceAsyncWithHttpInfo($virtual_operator, $sales_invoice, $in_transport_document_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentCreateSalesInvoiceAsyncWithHttpInfo
     *
     * Creates a Invoice
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SalesInvoiceDTO $sales_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentCreateSalesInvoiceAsyncWithHttpInfo($virtual_operator, $sales_invoice, $in_transport_document_id = null)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentCreateSalesInvoiceRequest($virtual_operator, $sales_invoice, $in_transport_document_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentCreateSalesInvoice'
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SalesInvoiceDTO $sales_invoice  (required)
     * @param string $in_transport_document_id  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentCreateSalesInvoiceRequest($virtual_operator, $sales_invoice, $in_transport_document_id = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentCreateSalesInvoice');
        }
        // verify the required parameter 'sales_invoice' is set
        if ($sales_invoice === null) {
            throw new \InvalidArgumentException('Missing the required parameter $sales_invoice when calling outboundDocumentCreateSalesInvoice');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/salesinvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($in_transport_document_id !== null) {
            $queryParams['inTransportDocumentId'] = ObjectSerializer::toQueryValue($in_transport_document_id);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($sales_invoice)) {
            $_tempBody = $sales_invoice;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentGet
     *
     * Get single sales invoice by specific company
     *
     * @param string $virtual_operator  (required)
     * @param string $id The unique identifier of sales invoice (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentSummaryDTO
     */
    public function outboundDocumentGet($virtual_operator, $id)
    {
        list($response) = $this->outboundDocumentGetWithHttpInfo($virtual_operator, $id);
        return $response;
    }

    /**
     * Operation outboundDocumentGetWithHttpInfo
     *
     * Get single sales invoice by specific company
     *
     * @param string $virtual_operator  (required)
     * @param string $id The unique identifier of sales invoice (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentSummaryDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentGetWithHttpInfo($virtual_operator, $id)
    {
        $returnType = '\Swagger\Client\Model\DocumentSummaryDTO';
        $request = $this->outboundDocumentGetRequest($virtual_operator, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\DocumentSummaryDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentGetAsync
     *
     * Get single sales invoice by specific company
     *
     * @param string $virtual_operator  (required)
     * @param string $id The unique identifier of sales invoice (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetAsync($virtual_operator, $id)
    {
        return $this->outboundDocumentGetAsyncWithHttpInfo($virtual_operator, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentGetAsyncWithHttpInfo
     *
     * Get single sales invoice by specific company
     *
     * @param string $virtual_operator  (required)
     * @param string $id The unique identifier of sales invoice (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetAsyncWithHttpInfo($virtual_operator, $id)
    {
        $returnType = '\Swagger\Client\Model\DocumentSummaryDTO';
        $request = $this->outboundDocumentGetRequest($virtual_operator, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentGet'
     *
     * @param string $virtual_operator  (required)
     * @param string $id The unique identifier of sales invoice (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentGetRequest($virtual_operator, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentGet');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling outboundDocumentGet');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentGetAttachments
     *
     * Gets a outboundDocument Attatchment
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentSummaryDTO
     */
    public function outboundDocumentGetAttachments($virtual_operator, $id)
    {
        list($response) = $this->outboundDocumentGetAttachmentsWithHttpInfo($virtual_operator, $id);
        return $response;
    }

    /**
     * Operation outboundDocumentGetAttachmentsWithHttpInfo
     *
     * Gets a outboundDocument Attatchment
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentSummaryDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentGetAttachmentsWithHttpInfo($virtual_operator, $id)
    {
        $returnType = '\Swagger\Client\Model\DocumentSummaryDTO';
        $request = $this->outboundDocumentGetAttachmentsRequest($virtual_operator, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\DocumentSummaryDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentGetAttachmentsAsync
     *
     * Gets a outboundDocument Attatchment
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetAttachmentsAsync($virtual_operator, $id)
    {
        return $this->outboundDocumentGetAttachmentsAsyncWithHttpInfo($virtual_operator, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentGetAttachmentsAsyncWithHttpInfo
     *
     * Gets a outboundDocument Attatchment
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetAttachmentsAsyncWithHttpInfo($virtual_operator, $id)
    {
        $returnType = '\Swagger\Client\Model\DocumentSummaryDTO';
        $request = $this->outboundDocumentGetAttachmentsRequest($virtual_operator, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentGetAttachments'
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentGetAttachmentsRequest($virtual_operator, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentGetAttachments');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling outboundDocumentGetAttachments');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/{id}/attachments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentGetDocumentAttachmentContent
     *
     * Gets a outboundDocument attachment content
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentSummaryDTO
     */
    public function outboundDocumentGetDocumentAttachmentContent($virtual_operator, $id, $attachment_id)
    {
        list($response) = $this->outboundDocumentGetDocumentAttachmentContentWithHttpInfo($virtual_operator, $id, $attachment_id);
        return $response;
    }

    /**
     * Operation outboundDocumentGetDocumentAttachmentContentWithHttpInfo
     *
     * Gets a outboundDocument attachment content
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentSummaryDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentGetDocumentAttachmentContentWithHttpInfo($virtual_operator, $id, $attachment_id)
    {
        $returnType = '\Swagger\Client\Model\DocumentSummaryDTO';
        $request = $this->outboundDocumentGetDocumentAttachmentContentRequest($virtual_operator, $id, $attachment_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\DocumentSummaryDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentGetDocumentAttachmentContentAsync
     *
     * Gets a outboundDocument attachment content
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetDocumentAttachmentContentAsync($virtual_operator, $id, $attachment_id)
    {
        return $this->outboundDocumentGetDocumentAttachmentContentAsyncWithHttpInfo($virtual_operator, $id, $attachment_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentGetDocumentAttachmentContentAsyncWithHttpInfo
     *
     * Gets a outboundDocument attachment content
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetDocumentAttachmentContentAsyncWithHttpInfo($virtual_operator, $id, $attachment_id)
    {
        $returnType = '\Swagger\Client\Model\DocumentSummaryDTO';
        $request = $this->outboundDocumentGetDocumentAttachmentContentRequest($virtual_operator, $id, $attachment_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentGetDocumentAttachmentContent'
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $attachment_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentGetDocumentAttachmentContentRequest($virtual_operator, $id, $attachment_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentGetDocumentAttachmentContent');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling outboundDocumentGetDocumentAttachmentContent');
        }
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $attachment_id when calling outboundDocumentGetDocumentAttachmentContent');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/{id}/attachment/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace('{' . 'attachmentId' . '}', ObjectSerializer::toPathValue($attachment_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentGetFileContent
     *
     * Gets a file content
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function outboundDocumentGetFileContent($virtual_operator, $id, $file_id)
    {
        list($response) = $this->outboundDocumentGetFileContentWithHttpInfo($virtual_operator, $id, $file_id);
        return $response;
    }

    /**
     * Operation outboundDocumentGetFileContentWithHttpInfo
     *
     * Gets a file content
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentGetFileContentWithHttpInfo($virtual_operator, $id, $file_id)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentGetFileContentRequest($virtual_operator, $id, $file_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentGetFileContentAsync
     *
     * Gets a file content
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetFileContentAsync($virtual_operator, $id, $file_id)
    {
        return $this->outboundDocumentGetFileContentAsyncWithHttpInfo($virtual_operator, $id, $file_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentGetFileContentAsyncWithHttpInfo
     *
     * Gets a file content
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetFileContentAsyncWithHttpInfo($virtual_operator, $id, $file_id)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentGetFileContentRequest($virtual_operator, $id, $file_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentGetFileContent'
     *
     * @param string $virtual_operator  (required)
     * @param string $id  (required)
     * @param string $file_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentGetFileContentRequest($virtual_operator, $id, $file_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentGetFileContent');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling outboundDocumentGetFileContent');
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling outboundDocumentGetFileContent');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/{id}/files/{fileId}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace('{' . 'fileId' . '}', ObjectSerializer::toPathValue($file_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentGetPDF
     *
     * Gets a pdf content
     *
     * @param string $virtual_operator  (required)
     * @param string $file_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function outboundDocumentGetPDF($virtual_operator, $file_id)
    {
        list($response) = $this->outboundDocumentGetPDFWithHttpInfo($virtual_operator, $file_id);
        return $response;
    }

    /**
     * Operation outboundDocumentGetPDFWithHttpInfo
     *
     * Gets a pdf content
     *
     * @param string $virtual_operator  (required)
     * @param string $file_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentGetPDFWithHttpInfo($virtual_operator, $file_id)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentGetPDFRequest($virtual_operator, $file_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentGetPDFAsync
     *
     * Gets a pdf content
     *
     * @param string $virtual_operator  (required)
     * @param string $file_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetPDFAsync($virtual_operator, $file_id)
    {
        return $this->outboundDocumentGetPDFAsyncWithHttpInfo($virtual_operator, $file_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentGetPDFAsyncWithHttpInfo
     *
     * Gets a pdf content
     *
     * @param string $virtual_operator  (required)
     * @param string $file_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentGetPDFAsyncWithHttpInfo($virtual_operator, $file_id)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentGetPDFRequest($virtual_operator, $file_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentGetPDF'
     *
     * @param string $virtual_operator  (required)
     * @param string $file_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentGetPDFRequest($virtual_operator, $file_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentGetPDF');
        }
        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $file_id when calling outboundDocumentGetPDF');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/files/{fileId}/getpdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace('{' . 'fileId' . '}', ObjectSerializer::toPathValue($file_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentRetryDianSubmitDocuments
     *
     * Trigger tacit acceptance validations
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function outboundDocumentRetryDianSubmitDocuments()
    {
        list($response) = $this->outboundDocumentRetryDianSubmitDocumentsWithHttpInfo();
        return $response;
    }

    /**
     * Operation outboundDocumentRetryDianSubmitDocumentsWithHttpInfo
     *
     * Trigger tacit acceptance validations
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentRetryDianSubmitDocumentsWithHttpInfo()
    {
        $returnType = 'object';
        $request = $this->outboundDocumentRetryDianSubmitDocumentsRequest();

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentRetryDianSubmitDocumentsAsync
     *
     * Trigger tacit acceptance validations
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentRetryDianSubmitDocumentsAsync()
    {
        return $this->outboundDocumentRetryDianSubmitDocumentsAsyncWithHttpInfo()->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentRetryDianSubmitDocumentsAsyncWithHttpInfo
     *
     * Trigger tacit acceptance validations
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentRetryDianSubmitDocumentsAsyncWithHttpInfo()
    {
        $returnType = 'object';
        $request = $this->outboundDocumentRetryDianSubmitDocumentsRequest();

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentRetryDianSubmitDocuments'
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentRetryDianSubmitDocumentsRequest()
    {

        $resourcePath = '/api/documents/retryDianSubmitDocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentSearch
     *
     * Search documents using search criterias  Default NumberOfRecords=25
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function outboundDocumentSearch($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->outboundDocumentSearchWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation outboundDocumentSearchWithHttpInfo
     *
     * Search documents using search criterias  Default NumberOfRecords=25
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentSearchWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentSearchRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentSearchAsync
     *
     * Search documents using search criterias  Default NumberOfRecords=25
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentSearchAsync($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->outboundDocumentSearchAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentSearchAsyncWithHttpInfo
     *
     * Search documents using search criterias  Default NumberOfRecords=25
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentSearchAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->outboundDocumentSearchRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_files, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentSearch'
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_document_number  (optional)
     * @param string $search_criteria_dto_currency  (optional)
     * @param string[] $search_criteria_dto_company_ids  (optional)
     * @param string[] $search_criteria_dto_issuers  (optional)
     * @param string[] $search_criteria_dto_customers  (optional)
     * @param bool $search_criteria_dto_include_files  (optional)
     * @param bool $search_criteria_dto_include_attachments  (optional)
     * @param string[] $search_criteria_dto_document_types  (optional)
     * @param string[] $search_criteria_dto_document_sub_types  (optional)
     * @param string[] $search_criteria_dto_business_status  (optional)
     * @param string[] $search_criteria_dto_communication_status  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_start  (optional)
     * @param \DateTime $search_criteria_dto_creation_date_end  (optional)
     * @param \DateTime $search_criteria_dto_document_date_start  (optional)
     * @param \DateTime $search_criteria_dto_document_date_end  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentSearchRequest($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_files = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentSearch');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_document_number !== null) {
            $queryParams['searchCriteriaDto.documentNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_number);
        }
        // query params
        if ($search_criteria_dto_currency !== null) {
            $queryParams['searchCriteriaDto.currency'] = ObjectSerializer::toQueryValue($search_criteria_dto_currency);
        }
        // query params
        if (is_array($search_criteria_dto_company_ids)) {
            $search_criteria_dto_company_ids = ObjectSerializer::serializeCollection($search_criteria_dto_company_ids, 'multi', true);
        }
        if ($search_criteria_dto_company_ids !== null) {
            $queryParams['searchCriteriaDto.companyIds'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_ids);
        }
        // query params
        if (is_array($search_criteria_dto_issuers)) {
            $search_criteria_dto_issuers = ObjectSerializer::serializeCollection($search_criteria_dto_issuers, 'multi', true);
        }
        if ($search_criteria_dto_issuers !== null) {
            $queryParams['searchCriteriaDto.issuers'] = ObjectSerializer::toQueryValue($search_criteria_dto_issuers);
        }
        // query params
        if (is_array($search_criteria_dto_customers)) {
            $search_criteria_dto_customers = ObjectSerializer::serializeCollection($search_criteria_dto_customers, 'multi', true);
        }
        if ($search_criteria_dto_customers !== null) {
            $queryParams['searchCriteriaDto.customers'] = ObjectSerializer::toQueryValue($search_criteria_dto_customers);
        }
        // query params
        if ($search_criteria_dto_include_files !== null) {
            $queryParams['searchCriteriaDto.includeFiles'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_files);
        }
        // query params
        if ($search_criteria_dto_include_attachments !== null) {
            $queryParams['searchCriteriaDto.includeAttachments'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_attachments);
        }
        // query params
        if (is_array($search_criteria_dto_document_types)) {
            $search_criteria_dto_document_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_types, 'multi', true);
        }
        if ($search_criteria_dto_document_types !== null) {
            $queryParams['searchCriteriaDto.documentTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_types);
        }
        // query params
        if (is_array($search_criteria_dto_document_sub_types)) {
            $search_criteria_dto_document_sub_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_sub_types, 'multi', true);
        }
        if ($search_criteria_dto_document_sub_types !== null) {
            $queryParams['searchCriteriaDto.documentSubTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_sub_types);
        }
        // query params
        if (is_array($search_criteria_dto_business_status)) {
            $search_criteria_dto_business_status = ObjectSerializer::serializeCollection($search_criteria_dto_business_status, 'multi', true);
        }
        if ($search_criteria_dto_business_status !== null) {
            $queryParams['searchCriteriaDto.businessStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_business_status);
        }
        // query params
        if (is_array($search_criteria_dto_communication_status)) {
            $search_criteria_dto_communication_status = ObjectSerializer::serializeCollection($search_criteria_dto_communication_status, 'multi', true);
        }
        if ($search_criteria_dto_communication_status !== null) {
            $queryParams['searchCriteriaDto.communicationStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_communication_status);
        }
        // query params
        if ($search_criteria_dto_creation_date_start !== null) {
            $queryParams['searchCriteriaDto.creationDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_start);
        }
        // query params
        if ($search_criteria_dto_creation_date_end !== null) {
            $queryParams['searchCriteriaDto.creationDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_end);
        }
        // query params
        if ($search_criteria_dto_document_date_start !== null) {
            $queryParams['searchCriteriaDto.documentDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_start);
        }
        // query params
        if ($search_criteria_dto_document_date_end !== null) {
            $queryParams['searchCriteriaDto.documentDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_end);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation outboundDocumentSendEmailNotificationForDocument
     *
     * Send email notification for outboundDocument
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SendEmailNotificationDTO $data the email data agreed in the SendEmailNotificationDTO object specification (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageDocumentResult
     */
    public function outboundDocumentSendEmailNotificationForDocument($virtual_operator, $data)
    {
        list($response) = $this->outboundDocumentSendEmailNotificationForDocumentWithHttpInfo($virtual_operator, $data);
        return $response;
    }

    /**
     * Operation outboundDocumentSendEmailNotificationForDocumentWithHttpInfo
     *
     * Send email notification for outboundDocument
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SendEmailNotificationDTO $data the email data agreed in the SendEmailNotificationDTO object specification (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageDocumentResult, HTTP status code, HTTP response headers (array of strings)
     */
    public function outboundDocumentSendEmailNotificationForDocumentWithHttpInfo($virtual_operator, $data)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentSendEmailNotificationForDocumentRequest($virtual_operator, $data);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultMessageDocumentResult', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation outboundDocumentSendEmailNotificationForDocumentAsync
     *
     * Send email notification for outboundDocument
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SendEmailNotificationDTO $data the email data agreed in the SendEmailNotificationDTO object specification (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentSendEmailNotificationForDocumentAsync($virtual_operator, $data)
    {
        return $this->outboundDocumentSendEmailNotificationForDocumentAsyncWithHttpInfo($virtual_operator, $data)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation outboundDocumentSendEmailNotificationForDocumentAsyncWithHttpInfo
     *
     * Send email notification for outboundDocument
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SendEmailNotificationDTO $data the email data agreed in the SendEmailNotificationDTO object specification (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function outboundDocumentSendEmailNotificationForDocumentAsyncWithHttpInfo($virtual_operator, $data)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageDocumentResult';
        $request = $this->outboundDocumentSendEmailNotificationForDocumentRequest($virtual_operator, $data);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'outboundDocumentSendEmailNotificationForDocument'
     *
     * @param string $virtual_operator  (required)
     * @param \Swagger\Client\Model\SendEmailNotificationDTO $data the email data agreed in the SendEmailNotificationDTO object specification (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function outboundDocumentSendEmailNotificationForDocumentRequest($virtual_operator, $data)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling outboundDocumentSendEmailNotificationForDocument');
        }
        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException('Missing the required parameter $data when calling outboundDocumentSendEmailNotificationForDocument');
        }

        $resourcePath = '/api/{virtualOperator}/outbounddocuments/sendemail';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

}
