<?php
/**
 * CustomerApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * CustomerApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class CustomerApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation customerCount
     *
     * Gets company's Customers results count.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerCount($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->customerCountWithHttpInfo($virtual_operator, $company_id, $search_criteria_dto_id, $search_criteria_dto_owner_company_id, $search_criteria_dto_country_code, $search_criteria_dto_vat_number, $search_criteria_dto_code, $search_criteria_dto_name, $search_criteria_dto_identification_document_number, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation customerCountWithHttpInfo
     *
     * Gets company's Customers results count.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCountWithHttpInfo($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->customerCountRequest($virtual_operator, $company_id, $search_criteria_dto_id, $search_criteria_dto_owner_company_id, $search_criteria_dto_country_code, $search_criteria_dto_vat_number, $search_criteria_dto_code, $search_criteria_dto_name, $search_criteria_dto_identification_document_number, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCountAsync
     *
     * Gets company's Customers results count.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCountAsync($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->customerCountAsyncWithHttpInfo($virtual_operator, $company_id, $search_criteria_dto_id, $search_criteria_dto_owner_company_id, $search_criteria_dto_country_code, $search_criteria_dto_vat_number, $search_criteria_dto_code, $search_criteria_dto_name, $search_criteria_dto_identification_document_number, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation customerCountAsyncWithHttpInfo
     *
     * Gets company's Customers results count.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCountAsyncWithHttpInfo($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->customerCountRequest($virtual_operator, $company_id, $search_criteria_dto_id, $search_criteria_dto_owner_company_id, $search_criteria_dto_country_code, $search_criteria_dto_vat_number, $search_criteria_dto_code, $search_criteria_dto_name, $search_criteria_dto_identification_document_number, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'customerCount'
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCountRequest($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling customerCount');
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling customerCount');
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/customers/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDTO.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_owner_company_id !== null) {
            $queryParams['searchCriteriaDTO.ownerCompanyId'] = ObjectSerializer::toQueryValue($search_criteria_dto_owner_company_id);
        }
        // query params
        if ($search_criteria_dto_country_code !== null) {
            $queryParams['searchCriteriaDTO.countryCode'] = ObjectSerializer::toQueryValue($search_criteria_dto_country_code);
        }
        // query params
        if ($search_criteria_dto_vat_number !== null) {
            $queryParams['searchCriteriaDTO.vatNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_vat_number);
        }
        // query params
        if ($search_criteria_dto_code !== null) {
            $queryParams['searchCriteriaDTO.code'] = ObjectSerializer::toQueryValue($search_criteria_dto_code);
        }
        // query params
        if ($search_criteria_dto_name !== null) {
            $queryParams['searchCriteriaDTO.name'] = ObjectSerializer::toQueryValue($search_criteria_dto_name);
        }
        // query params
        if ($search_criteria_dto_identification_document_number !== null) {
            $queryParams['searchCriteriaDTO.identificationDocumentNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_identification_document_number);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDTO.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDTO.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDTO.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace('{' . 'companyId' . '}', ObjectSerializer::toPathValue($company_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerCreate
     *
     * Creates a Customer for a Company.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerCreate($virtual_operator, $company_id, $customer_dto)
    {
        list($response) = $this->customerCreateWithHttpInfo($virtual_operator, $company_id, $customer_dto);
        return $response;
    }

    /**
     * Operation customerCreateWithHttpInfo
     *
     * Creates a Customer for a Company.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerCreateWithHttpInfo($virtual_operator, $company_id, $customer_dto)
    {
        $returnType = 'object';
        $request = $this->customerCreateRequest($virtual_operator, $company_id, $customer_dto);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerCreateAsync
     *
     * Creates a Customer for a Company.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreateAsync($virtual_operator, $company_id, $customer_dto)
    {
        return $this->customerCreateAsyncWithHttpInfo($virtual_operator, $company_id, $customer_dto)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation customerCreateAsyncWithHttpInfo
     *
     * Creates a Customer for a Company.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerCreateAsyncWithHttpInfo($virtual_operator, $company_id, $customer_dto)
    {
        $returnType = 'object';
        $request = $this->customerCreateRequest($virtual_operator, $company_id, $customer_dto);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'customerCreate'
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerCreateRequest($virtual_operator, $company_id, $customer_dto)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling customerCreate');
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling customerCreate');
        }
        // verify the required parameter 'customer_dto' is set
        if ($customer_dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_dto when calling customerCreate');
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace('{' . 'companyId' . '}', ObjectSerializer::toPathValue($company_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($customer_dto)) {
            $_tempBody = $customer_dto;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerDetails
     *
     * Gets the selected Company's Customer details.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerDetails($virtual_operator, $company_id, $id)
    {
        list($response) = $this->customerDetailsWithHttpInfo($virtual_operator, $company_id, $id);
        return $response;
    }

    /**
     * Operation customerDetailsWithHttpInfo
     *
     * Gets the selected Company's Customer details.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerDetailsWithHttpInfo($virtual_operator, $company_id, $id)
    {
        $returnType = 'object';
        $request = $this->customerDetailsRequest($virtual_operator, $company_id, $id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerDetailsAsync
     *
     * Gets the selected Company's Customer details.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerDetailsAsync($virtual_operator, $company_id, $id)
    {
        return $this->customerDetailsAsyncWithHttpInfo($virtual_operator, $company_id, $id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation customerDetailsAsyncWithHttpInfo
     *
     * Gets the selected Company's Customer details.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerDetailsAsyncWithHttpInfo($virtual_operator, $company_id, $id)
    {
        $returnType = 'object';
        $request = $this->customerDetailsRequest($virtual_operator, $company_id, $id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'customerDetails'
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerDetailsRequest($virtual_operator, $company_id, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling customerDetails');
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling customerDetails');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customerDetails');
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace('{' . 'companyId' . '}', ObjectSerializer::toPathValue($company_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerRemove
     *
     * Removes a Customer from a Company.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $customer_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerRemove($virtual_operator, $company_id, $customer_id)
    {
        list($response) = $this->customerRemoveWithHttpInfo($virtual_operator, $company_id, $customer_id);
        return $response;
    }

    /**
     * Operation customerRemoveWithHttpInfo
     *
     * Removes a Customer from a Company.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $customer_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerRemoveWithHttpInfo($virtual_operator, $company_id, $customer_id)
    {
        $returnType = 'object';
        $request = $this->customerRemoveRequest($virtual_operator, $company_id, $customer_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerRemoveAsync
     *
     * Removes a Customer from a Company.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $customer_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerRemoveAsync($virtual_operator, $company_id, $customer_id)
    {
        return $this->customerRemoveAsyncWithHttpInfo($virtual_operator, $company_id, $customer_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation customerRemoveAsyncWithHttpInfo
     *
     * Removes a Customer from a Company.
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $customer_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerRemoveAsyncWithHttpInfo($virtual_operator, $company_id, $customer_id)
    {
        $returnType = 'object';
        $request = $this->customerRemoveRequest($virtual_operator, $company_id, $customer_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'customerRemove'
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $customer_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerRemoveRequest($virtual_operator, $company_id, $customer_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling customerRemove');
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling customerRemove');
        }
        // verify the required parameter 'customer_id' is set
        if ($customer_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_id when calling customerRemove');
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/customers/{customerId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace('{' . 'companyId' . '}', ObjectSerializer::toPathValue($company_id), $resourcePath);
        }
        // path params
        if ($customer_id !== null) {
            $resourcePath = str_replace('{' . 'customerId' . '}', ObjectSerializer::toPathValue($customer_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerSearch
     *
     * Gets selected company's Customer.  Default NumberOfRecords=25
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerSearch($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->customerSearchWithHttpInfo($virtual_operator, $company_id, $search_criteria_dto_id, $search_criteria_dto_owner_company_id, $search_criteria_dto_country_code, $search_criteria_dto_vat_number, $search_criteria_dto_code, $search_criteria_dto_name, $search_criteria_dto_identification_document_number, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation customerSearchWithHttpInfo
     *
     * Gets selected company's Customer.  Default NumberOfRecords=25
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerSearchWithHttpInfo($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->customerSearchRequest($virtual_operator, $company_id, $search_criteria_dto_id, $search_criteria_dto_owner_company_id, $search_criteria_dto_country_code, $search_criteria_dto_vat_number, $search_criteria_dto_code, $search_criteria_dto_name, $search_criteria_dto_identification_document_number, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerSearchAsync
     *
     * Gets selected company's Customer.  Default NumberOfRecords=25
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchAsync($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->customerSearchAsyncWithHttpInfo($virtual_operator, $company_id, $search_criteria_dto_id, $search_criteria_dto_owner_company_id, $search_criteria_dto_country_code, $search_criteria_dto_vat_number, $search_criteria_dto_code, $search_criteria_dto_name, $search_criteria_dto_identification_document_number, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation customerSearchAsyncWithHttpInfo
     *
     * Gets selected company's Customer.  Default NumberOfRecords=25
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerSearchAsyncWithHttpInfo($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->customerSearchRequest($virtual_operator, $company_id, $search_criteria_dto_id, $search_criteria_dto_owner_company_id, $search_criteria_dto_country_code, $search_criteria_dto_vat_number, $search_criteria_dto_code, $search_criteria_dto_name, $search_criteria_dto_identification_document_number, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'customerSearch'
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_owner_company_id  (optional)
     * @param string $search_criteria_dto_country_code  (optional)
     * @param string $search_criteria_dto_vat_number  (optional)
     * @param string $search_criteria_dto_code  (optional)
     * @param string $search_criteria_dto_name  (optional)
     * @param string $search_criteria_dto_identification_document_number  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerSearchRequest($virtual_operator, $company_id, $search_criteria_dto_id = null, $search_criteria_dto_owner_company_id = null, $search_criteria_dto_country_code = null, $search_criteria_dto_vat_number = null, $search_criteria_dto_code = null, $search_criteria_dto_name = null, $search_criteria_dto_identification_document_number = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling customerSearch');
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling customerSearch');
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/customers';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDTO.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_owner_company_id !== null) {
            $queryParams['searchCriteriaDTO.ownerCompanyId'] = ObjectSerializer::toQueryValue($search_criteria_dto_owner_company_id);
        }
        // query params
        if ($search_criteria_dto_country_code !== null) {
            $queryParams['searchCriteriaDTO.countryCode'] = ObjectSerializer::toQueryValue($search_criteria_dto_country_code);
        }
        // query params
        if ($search_criteria_dto_vat_number !== null) {
            $queryParams['searchCriteriaDTO.vatNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_vat_number);
        }
        // query params
        if ($search_criteria_dto_code !== null) {
            $queryParams['searchCriteriaDTO.code'] = ObjectSerializer::toQueryValue($search_criteria_dto_code);
        }
        // query params
        if ($search_criteria_dto_name !== null) {
            $queryParams['searchCriteriaDTO.name'] = ObjectSerializer::toQueryValue($search_criteria_dto_name);
        }
        // query params
        if ($search_criteria_dto_identification_document_number !== null) {
            $queryParams['searchCriteriaDTO.identificationDocumentNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_identification_document_number);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDTO.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDTO.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDTO.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace('{' . 'companyId' . '}', ObjectSerializer::toPathValue($company_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation customerUpdate
     *
     * Updates a Company's Customer
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function customerUpdate($virtual_operator, $company_id, $id, $customer_dto)
    {
        list($response) = $this->customerUpdateWithHttpInfo($virtual_operator, $company_id, $id, $customer_dto);
        return $response;
    }

    /**
     * Operation customerUpdateWithHttpInfo
     *
     * Updates a Company's Customer
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function customerUpdateWithHttpInfo($virtual_operator, $company_id, $id, $customer_dto)
    {
        $returnType = 'object';
        $request = $this->customerUpdateRequest($virtual_operator, $company_id, $id, $customer_dto);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation customerUpdateAsync
     *
     * Updates a Company's Customer
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerUpdateAsync($virtual_operator, $company_id, $id, $customer_dto)
    {
        return $this->customerUpdateAsyncWithHttpInfo($virtual_operator, $company_id, $id, $customer_dto)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation customerUpdateAsyncWithHttpInfo
     *
     * Updates a Company's Customer
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function customerUpdateAsyncWithHttpInfo($virtual_operator, $company_id, $id, $customer_dto)
    {
        $returnType = 'object';
        $request = $this->customerUpdateRequest($virtual_operator, $company_id, $id, $customer_dto);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'customerUpdate'
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @param string $id  (required)
     * @param \Swagger\Client\Model\CustomerDTO $customer_dto  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function customerUpdateRequest($virtual_operator, $company_id, $id, $customer_dto)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling customerUpdate');
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling customerUpdate');
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling customerUpdate');
        }
        // verify the required parameter 'customer_dto' is set
        if ($customer_dto === null) {
            throw new \InvalidArgumentException('Missing the required parameter $customer_dto when calling customerUpdate');
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/customers/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace('{' . 'companyId' . '}', ObjectSerializer::toPathValue($company_id), $resourcePath);
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($customer_dto)) {
            $_tempBody = $customer_dto;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

}
