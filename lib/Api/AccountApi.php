<?php
/**
 * AccountApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * AccountApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class AccountApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation accountAcceptInvitation
     *
     * Accept company invitation from url
     *
     * @param string $virtual_operator  (required)
     * @param string $user_invitation_token_id  (required)
     * @param \Swagger\Client\Model\AcceptUserInvitationDTO $accept_user_invitation  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountAcceptInvitation($virtual_operator, $user_invitation_token_id, $accept_user_invitation)
    {
        list($response) = $this->accountAcceptInvitationWithHttpInfo($virtual_operator, $user_invitation_token_id, $accept_user_invitation);
        return $response;
    }

    /**
     * Operation accountAcceptInvitationWithHttpInfo
     *
     * Accept company invitation from url
     *
     * @param string $virtual_operator  (required)
     * @param string $user_invitation_token_id  (required)
     * @param \Swagger\Client\Model\AcceptUserInvitationDTO $accept_user_invitation  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountAcceptInvitationWithHttpInfo($virtual_operator, $user_invitation_token_id, $accept_user_invitation)
    {
        $returnType = 'object';
        $request = $this->accountAcceptInvitationRequest($virtual_operator, $user_invitation_token_id, $accept_user_invitation);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountAcceptInvitationAsync
     *
     * Accept company invitation from url
     *
     * @param string $virtual_operator  (required)
     * @param string $user_invitation_token_id  (required)
     * @param \Swagger\Client\Model\AcceptUserInvitationDTO $accept_user_invitation  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountAcceptInvitationAsync($virtual_operator, $user_invitation_token_id, $accept_user_invitation)
    {
        return $this->accountAcceptInvitationAsyncWithHttpInfo($virtual_operator, $user_invitation_token_id, $accept_user_invitation)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountAcceptInvitationAsyncWithHttpInfo
     *
     * Accept company invitation from url
     *
     * @param string $virtual_operator  (required)
     * @param string $user_invitation_token_id  (required)
     * @param \Swagger\Client\Model\AcceptUserInvitationDTO $accept_user_invitation  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountAcceptInvitationAsyncWithHttpInfo($virtual_operator, $user_invitation_token_id, $accept_user_invitation)
    {
        $returnType = 'object';
        $request = $this->accountAcceptInvitationRequest($virtual_operator, $user_invitation_token_id, $accept_user_invitation);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountAcceptInvitation'
     *
     * @param string $virtual_operator  (required)
     * @param string $user_invitation_token_id  (required)
     * @param \Swagger\Client\Model\AcceptUserInvitationDTO $accept_user_invitation  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountAcceptInvitationRequest($virtual_operator, $user_invitation_token_id, $accept_user_invitation)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling accountAcceptInvitation');
        }
        // verify the required parameter 'user_invitation_token_id' is set
        if ($user_invitation_token_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_invitation_token_id when calling accountAcceptInvitation');
        }
        // verify the required parameter 'accept_user_invitation' is set
        if ($accept_user_invitation === null) {
            throw new \InvalidArgumentException('Missing the required parameter $accept_user_invitation when calling accountAcceptInvitation');
        }

        $resourcePath = '/api/{virtualOperator}/account/acceptinvitation/{userInvitationTokenId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($user_invitation_token_id !== null) {
            $resourcePath = str_replace('{' . 'userInvitationTokenId' . '}', ObjectSerializer::toPathValue($user_invitation_token_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($accept_user_invitation)) {
            $_tempBody = $accept_user_invitation;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountConfirmRecoveryPassword
     *
     * Second step on request recovery password
     *
     * @param string $user_request_recovery_password_id  (required)
     * @param \Swagger\Client\Model\UserConfirmRecoveryPasswordDTO $user_confirm_recovery_password  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountConfirmRecoveryPassword($user_request_recovery_password_id, $user_confirm_recovery_password)
    {
        list($response) = $this->accountConfirmRecoveryPasswordWithHttpInfo($user_request_recovery_password_id, $user_confirm_recovery_password);
        return $response;
    }

    /**
     * Operation accountConfirmRecoveryPasswordWithHttpInfo
     *
     * Second step on request recovery password
     *
     * @param string $user_request_recovery_password_id  (required)
     * @param \Swagger\Client\Model\UserConfirmRecoveryPasswordDTO $user_confirm_recovery_password  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountConfirmRecoveryPasswordWithHttpInfo($user_request_recovery_password_id, $user_confirm_recovery_password)
    {
        $returnType = 'object';
        $request = $this->accountConfirmRecoveryPasswordRequest($user_request_recovery_password_id, $user_confirm_recovery_password);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountConfirmRecoveryPasswordAsync
     *
     * Second step on request recovery password
     *
     * @param string $user_request_recovery_password_id  (required)
     * @param \Swagger\Client\Model\UserConfirmRecoveryPasswordDTO $user_confirm_recovery_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountConfirmRecoveryPasswordAsync($user_request_recovery_password_id, $user_confirm_recovery_password)
    {
        return $this->accountConfirmRecoveryPasswordAsyncWithHttpInfo($user_request_recovery_password_id, $user_confirm_recovery_password)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountConfirmRecoveryPasswordAsyncWithHttpInfo
     *
     * Second step on request recovery password
     *
     * @param string $user_request_recovery_password_id  (required)
     * @param \Swagger\Client\Model\UserConfirmRecoveryPasswordDTO $user_confirm_recovery_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountConfirmRecoveryPasswordAsyncWithHttpInfo($user_request_recovery_password_id, $user_confirm_recovery_password)
    {
        $returnType = 'object';
        $request = $this->accountConfirmRecoveryPasswordRequest($user_request_recovery_password_id, $user_confirm_recovery_password);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountConfirmRecoveryPassword'
     *
     * @param string $user_request_recovery_password_id  (required)
     * @param \Swagger\Client\Model\UserConfirmRecoveryPasswordDTO $user_confirm_recovery_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountConfirmRecoveryPasswordRequest($user_request_recovery_password_id, $user_confirm_recovery_password)
    {
        // verify the required parameter 'user_request_recovery_password_id' is set
        if ($user_request_recovery_password_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_request_recovery_password_id when calling accountConfirmRecoveryPassword');
        }
        // verify the required parameter 'user_confirm_recovery_password' is set
        if ($user_confirm_recovery_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_confirm_recovery_password when calling accountConfirmRecoveryPassword');
        }

        $resourcePath = '/api/account/confirmrecoverypassword/{userRequestRecoveryPasswordId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_request_recovery_password_id !== null) {
            $resourcePath = str_replace('{' . 'userRequestRecoveryPasswordId' . '}', ObjectSerializer::toPathValue($user_request_recovery_password_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($user_confirm_recovery_password)) {
            $_tempBody = $user_confirm_recovery_password;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGet
     *
     * Gets the account information of the currently authenticated user
     *
     * @param string $user_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountGet($user_id)
    {
        list($response) = $this->accountGetWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation accountGetWithHttpInfo
     *
     * Gets the account information of the currently authenticated user
     *
     * @param string $user_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetWithHttpInfo($user_id)
    {
        $returnType = 'object';
        $request = $this->accountGetRequest($user_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetAsync
     *
     * Gets the account information of the currently authenticated user
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetAsync($user_id)
    {
        return $this->accountGetAsyncWithHttpInfo($user_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountGetAsyncWithHttpInfo
     *
     * Gets the account information of the currently authenticated user
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetAsyncWithHttpInfo($user_id)
    {
        $returnType = 'object';
        $request = $this->accountGetRequest($user_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountGet'
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountGetRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling accountGet');
        }

        $resourcePath = '/api/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_id !== null) {
            $queryParams['userId'] = ObjectSerializer::toQueryValue($user_id);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountGetMembershipRoles
     *
     * For the authenticated user, gets the roles from a specific company
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageRoleDTO
     */
    public function accountGetMembershipRoles($virtual_operator, $company_id)
    {
        list($response) = $this->accountGetMembershipRolesWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation accountGetMembershipRolesWithHttpInfo
     *
     * For the authenticated user, gets the roles from a specific company
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageRoleDTO, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountGetMembershipRolesWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageRoleDTO';
        $request = $this->accountGetMembershipRolesRequest($virtual_operator, $company_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), '\Swagger\Client\Model\ResultMessageRoleDTO', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountGetMembershipRolesAsync
     *
     * For the authenticated user, gets the roles from a specific company
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetMembershipRolesAsync($virtual_operator, $company_id)
    {
        return $this->accountGetMembershipRolesAsyncWithHttpInfo($virtual_operator, $company_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountGetMembershipRolesAsyncWithHttpInfo
     *
     * For the authenticated user, gets the roles from a specific company
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountGetMembershipRolesAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageRoleDTO';
        $request = $this->accountGetMembershipRolesRequest($virtual_operator, $company_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountGetMembershipRoles'
     *
     * @param string $virtual_operator  (required)
     * @param string $company_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountGetMembershipRolesRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling accountGetMembershipRoles');
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $company_id when calling accountGetMembershipRoles');
        }

        $resourcePath = '/api/{virtualOperator}/account/membership/{companyId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace('{' . 'companyId' . '}', ObjectSerializer::toPathValue($company_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountRequestRecoveryPassword
     *
     * Requests a password recovery for an existing user
     *
     * @param \Swagger\Client\Model\UserRequestRecoveryPasswordDTO $user_request_recovery_password  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountRequestRecoveryPassword($user_request_recovery_password)
    {
        list($response) = $this->accountRequestRecoveryPasswordWithHttpInfo($user_request_recovery_password);
        return $response;
    }

    /**
     * Operation accountRequestRecoveryPasswordWithHttpInfo
     *
     * Requests a password recovery for an existing user
     *
     * @param \Swagger\Client\Model\UserRequestRecoveryPasswordDTO $user_request_recovery_password  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountRequestRecoveryPasswordWithHttpInfo($user_request_recovery_password)
    {
        $returnType = 'object';
        $request = $this->accountRequestRecoveryPasswordRequest($user_request_recovery_password);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountRequestRecoveryPasswordAsync
     *
     * Requests a password recovery for an existing user
     *
     * @param \Swagger\Client\Model\UserRequestRecoveryPasswordDTO $user_request_recovery_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRequestRecoveryPasswordAsync($user_request_recovery_password)
    {
        return $this->accountRequestRecoveryPasswordAsyncWithHttpInfo($user_request_recovery_password)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountRequestRecoveryPasswordAsyncWithHttpInfo
     *
     * Requests a password recovery for an existing user
     *
     * @param \Swagger\Client\Model\UserRequestRecoveryPasswordDTO $user_request_recovery_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountRequestRecoveryPasswordAsyncWithHttpInfo($user_request_recovery_password)
    {
        $returnType = 'object';
        $request = $this->accountRequestRecoveryPasswordRequest($user_request_recovery_password);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountRequestRecoveryPassword'
     *
     * @param \Swagger\Client\Model\UserRequestRecoveryPasswordDTO $user_request_recovery_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountRequestRecoveryPasswordRequest($user_request_recovery_password)
    {
        // verify the required parameter 'user_request_recovery_password' is set
        if ($user_request_recovery_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_request_recovery_password when calling accountRequestRecoveryPassword');
        }

        $resourcePath = '/api/account/requestrecoverypassword';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($user_request_recovery_password)) {
            $_tempBody = $user_request_recovery_password;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountUpdate
     *
     * Update the authenticated user's profile
     *
     * @param \Swagger\Client\Model\AccountUpdateDTO $account_update  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountUpdate($account_update)
    {
        list($response) = $this->accountUpdateWithHttpInfo($account_update);
        return $response;
    }

    /**
     * Operation accountUpdateWithHttpInfo
     *
     * Update the authenticated user's profile
     *
     * @param \Swagger\Client\Model\AccountUpdateDTO $account_update  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountUpdateWithHttpInfo($account_update)
    {
        $returnType = 'object';
        $request = $this->accountUpdateRequest($account_update);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountUpdateAsync
     *
     * Update the authenticated user's profile
     *
     * @param \Swagger\Client\Model\AccountUpdateDTO $account_update  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUpdateAsync($account_update)
    {
        return $this->accountUpdateAsyncWithHttpInfo($account_update)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountUpdateAsyncWithHttpInfo
     *
     * Update the authenticated user's profile
     *
     * @param \Swagger\Client\Model\AccountUpdateDTO $account_update  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUpdateAsyncWithHttpInfo($account_update)
    {
        $returnType = 'object';
        $request = $this->accountUpdateRequest($account_update);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountUpdate'
     *
     * @param \Swagger\Client\Model\AccountUpdateDTO $account_update  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountUpdateRequest($account_update)
    {
        // verify the required parameter 'account_update' is set
        if ($account_update === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_update when calling accountUpdate');
        }

        $resourcePath = '/api/account';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($account_update)) {
            $_tempBody = $account_update;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation accountUpdatePassword
     *
     * Updates the authenticated user's password
     *
     * @param \Swagger\Client\Model\AccountUpdatePasswordDTO $account_update_password  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function accountUpdatePassword($account_update_password)
    {
        list($response) = $this->accountUpdatePasswordWithHttpInfo($account_update_password);
        return $response;
    }

    /**
     * Operation accountUpdatePasswordWithHttpInfo
     *
     * Updates the authenticated user's password
     *
     * @param \Swagger\Client\Model\AccountUpdatePasswordDTO $account_update_password  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function accountUpdatePasswordWithHttpInfo($account_update_password)
    {
        $returnType = 'object';
        $request = $this->accountUpdatePasswordRequest($account_update_password);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation accountUpdatePasswordAsync
     *
     * Updates the authenticated user's password
     *
     * @param \Swagger\Client\Model\AccountUpdatePasswordDTO $account_update_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUpdatePasswordAsync($account_update_password)
    {
        return $this->accountUpdatePasswordAsyncWithHttpInfo($account_update_password)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation accountUpdatePasswordAsyncWithHttpInfo
     *
     * Updates the authenticated user's password
     *
     * @param \Swagger\Client\Model\AccountUpdatePasswordDTO $account_update_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function accountUpdatePasswordAsyncWithHttpInfo($account_update_password)
    {
        $returnType = 'object';
        $request = $this->accountUpdatePasswordRequest($account_update_password);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'accountUpdatePassword'
     *
     * @param \Swagger\Client\Model\AccountUpdatePasswordDTO $account_update_password  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function accountUpdatePasswordRequest($account_update_password)
    {
        // verify the required parameter 'account_update_password' is set
        if ($account_update_password === null) {
            throw new \InvalidArgumentException('Missing the required parameter $account_update_password when calling accountUpdatePassword');
        }

        $resourcePath = '/api/account/password';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($account_update_password)) {
            $_tempBody = $account_update_password;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

}
