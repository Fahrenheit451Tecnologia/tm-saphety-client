<?php
/**
 * SerieApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * SerieApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class SerieApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation serieActivate
     *
     * Activate serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function serieActivate($virtual_operator, $company_id, $id)
    {
        list($response) = $this->serieActivateWithHttpInfo($virtual_operator, $company_id, $id);
        return $response;
    }

    /**
     * Operation serieActivateWithHttpInfo
     *
     * Activate serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieActivateWithHttpInfo($virtual_operator, $company_id, $id)
    {
        $returnType = 'object';
        $request = $this->serieActivateRequest($virtual_operator, $company_id, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieActivateAsync
     *
     * Activate serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieActivateAsync($virtual_operator, $company_id, $id)
    {
        return $this->serieActivateAsyncWithHttpInfo($virtual_operator, $company_id, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieActivateAsyncWithHttpInfo
     *
     * Activate serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieActivateAsyncWithHttpInfo($virtual_operator, $company_id, $id)
    {
        $returnType = 'object';
        $request = $this->serieActivateRequest($virtual_operator, $company_id, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieActivate'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieActivateRequest($virtual_operator, $company_id, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieActivate'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieActivate, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieActivate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serieActivate'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/{id}/activate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieCreate
     *
     * Create a new serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  \Swagger\Client\Model\SerieInputDto $serie_dto  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function serieCreate($virtual_operator, $company_id, $serie_dto)
    {
        list($response) = $this->serieCreateWithHttpInfo($virtual_operator, $company_id, $serie_dto);
        return $response;
    }

    /**
     * Operation serieCreateWithHttpInfo
     *
     * Create a new serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  \Swagger\Client\Model\SerieInputDto $serie_dto  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieCreateWithHttpInfo($virtual_operator, $company_id, $serie_dto)
    {
        $returnType = 'string';
        $request = $this->serieCreateRequest($virtual_operator, $company_id, $serie_dto);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieCreateAsync
     *
     * Create a new serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  \Swagger\Client\Model\SerieInputDto $serie_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieCreateAsync($virtual_operator, $company_id, $serie_dto)
    {
        return $this->serieCreateAsyncWithHttpInfo($virtual_operator, $company_id, $serie_dto)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieCreateAsyncWithHttpInfo
     *
     * Create a new serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  \Swagger\Client\Model\SerieInputDto $serie_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieCreateAsyncWithHttpInfo($virtual_operator, $company_id, $serie_dto)
    {
        $returnType = 'string';
        $request = $this->serieCreateRequest($virtual_operator, $company_id, $serie_dto);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieCreate'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  \Swagger\Client\Model\SerieInputDto $serie_dto  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieCreateRequest($virtual_operator, $company_id, $serie_dto)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieCreate'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieCreate, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieCreate'
            );
        }
        // verify the required parameter 'serie_dto' is set
        if ($serie_dto === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serie_dto when calling serieCreate'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($serie_dto)) {
            $_tempBody = $serie_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieDetails
     *
     * Get specific serie by companyId and serieId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto
     */
    public function serieDetails($virtual_operator, $company_id, $id)
    {
        list($response) = $this->serieDetailsWithHttpInfo($virtual_operator, $company_id, $id);
        return $response;
    }

    /**
     * Operation serieDetailsWithHttpInfo
     *
     * Get specific serie by companyId and serieId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieDetailsWithHttpInfo($virtual_operator, $company_id, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieDetailsRequest($virtual_operator, $company_id, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieDetailsAsync
     *
     * Get specific serie by companyId and serieId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieDetailsAsync($virtual_operator, $company_id, $id)
    {
        return $this->serieDetailsAsyncWithHttpInfo($virtual_operator, $company_id, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieDetailsAsyncWithHttpInfo
     *
     * Get specific serie by companyId and serieId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieDetailsAsyncWithHttpInfo($virtual_operator, $company_id, $id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieDetailsRequest($virtual_operator, $company_id, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieDetails'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieDetailsRequest($virtual_operator, $company_id, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieDetails'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieDetails, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieDetails'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serieDetails'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieGetAll
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageListSerieOutputDto
     */
    public function serieGetAll($virtual_operator, $company_id)
    {
        list($response) = $this->serieGetAllWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation serieGetAllWithHttpInfo
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageListSerieOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieGetAllWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageListSerieOutputDto';
        $request = $this->serieGetAllRequest($virtual_operator, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageListSerieOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieGetAllAsync
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllAsync($virtual_operator, $company_id)
    {
        return $this->serieGetAllAsyncWithHttpInfo($virtual_operator, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieGetAllAsyncWithHttpInfo
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageListSerieOutputDto';
        $request = $this->serieGetAllRequest($virtual_operator, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieGetAll'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieGetAllRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieGetAll'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieGetAll, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieGetAll'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieGetAllForContingencyInvoice
     *
     * Get a list of all contingency series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto
     */
    public function serieGetAllForContingencyInvoice($virtual_operator, $company_id)
    {
        list($response) = $this->serieGetAllForContingencyInvoiceWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation serieGetAllForContingencyInvoiceWithHttpInfo
     *
     * Get a list of all contingency series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieGetAllForContingencyInvoiceWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieGetAllForContingencyInvoiceRequest($virtual_operator, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieGetAllForContingencyInvoiceAsync
     *
     * Get a list of all contingency series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllForContingencyInvoiceAsync($virtual_operator, $company_id)
    {
        return $this->serieGetAllForContingencyInvoiceAsyncWithHttpInfo($virtual_operator, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieGetAllForContingencyInvoiceAsyncWithHttpInfo
     *
     * Get a list of all contingency series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllForContingencyInvoiceAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieGetAllForContingencyInvoiceRequest($virtual_operator, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieGetAllForContingencyInvoice'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieGetAllForContingencyInvoiceRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieGetAllForContingencyInvoice'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieGetAllForContingencyInvoice, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieGetAllForContingencyInvoice'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/contingency';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieGetAllForCreditNote
     *
     * Get a list of all credit note series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto
     */
    public function serieGetAllForCreditNote($virtual_operator, $company_id)
    {
        list($response) = $this->serieGetAllForCreditNoteWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation serieGetAllForCreditNoteWithHttpInfo
     *
     * Get a list of all credit note series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieGetAllForCreditNoteWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieGetAllForCreditNoteRequest($virtual_operator, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieGetAllForCreditNoteAsync
     *
     * Get a list of all credit note series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllForCreditNoteAsync($virtual_operator, $company_id)
    {
        return $this->serieGetAllForCreditNoteAsyncWithHttpInfo($virtual_operator, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieGetAllForCreditNoteAsyncWithHttpInfo
     *
     * Get a list of all credit note series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllForCreditNoteAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieGetAllForCreditNoteRequest($virtual_operator, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieGetAllForCreditNote'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieGetAllForCreditNoteRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieGetAllForCreditNote'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieGetAllForCreditNote, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieGetAllForCreditNote'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/creditnote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieGetAllForDebitNote
     *
     * Get a list of all debit note series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto
     */
    public function serieGetAllForDebitNote($virtual_operator, $company_id)
    {
        list($response) = $this->serieGetAllForDebitNoteWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation serieGetAllForDebitNoteWithHttpInfo
     *
     * Get a list of all debit note series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieGetAllForDebitNoteWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieGetAllForDebitNoteRequest($virtual_operator, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieGetAllForDebitNoteAsync
     *
     * Get a list of all debit note series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllForDebitNoteAsync($virtual_operator, $company_id)
    {
        return $this->serieGetAllForDebitNoteAsyncWithHttpInfo($virtual_operator, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieGetAllForDebitNoteAsyncWithHttpInfo
     *
     * Get a list of all debit note series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllForDebitNoteAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieGetAllForDebitNoteRequest($virtual_operator, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieGetAllForDebitNote'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieGetAllForDebitNoteRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieGetAllForDebitNote'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieGetAllForDebitNote, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieGetAllForDebitNote'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/debitnote';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieGetAllForSalesInvoice
     *
     * Get a list of all sales invoice series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto
     */
    public function serieGetAllForSalesInvoice($virtual_operator, $company_id)
    {
        list($response) = $this->serieGetAllForSalesInvoiceWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation serieGetAllForSalesInvoiceWithHttpInfo
     *
     * Get a list of all sales invoice series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieGetAllForSalesInvoiceWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieGetAllForSalesInvoiceRequest($virtual_operator, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieGetAllForSalesInvoiceAsync
     *
     * Get a list of all sales invoice series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllForSalesInvoiceAsync($virtual_operator, $company_id)
    {
        return $this->serieGetAllForSalesInvoiceAsyncWithHttpInfo($virtual_operator, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieGetAllForSalesInvoiceAsyncWithHttpInfo
     *
     * Get a list of all sales invoice series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetAllForSalesInvoiceAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableSerieOutputDto';
        $request = $this->serieGetAllForSalesInvoiceRequest($virtual_operator, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieGetAllForSalesInvoice'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieGetAllForSalesInvoiceRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieGetAllForSalesInvoice'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieGetAllForSalesInvoice, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieGetAllForSalesInvoice'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/salesinvoice';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieGetCount
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageIEnumerableInt32
     */
    public function serieGetCount($virtual_operator, $company_id)
    {
        list($response) = $this->serieGetCountWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation serieGetCountWithHttpInfo
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageIEnumerableInt32, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieGetCountWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableInt32';
        $request = $this->serieGetCountRequest($virtual_operator, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageIEnumerableInt32',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieGetCountAsync
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetCountAsync($virtual_operator, $company_id)
    {
        return $this->serieGetCountAsyncWithHttpInfo($virtual_operator, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieGetCountAsyncWithHttpInfo
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetCountAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableInt32';
        $request = $this->serieGetCountRequest($virtual_operator, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieGetCount'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieGetCountRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieGetCount'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieGetCount, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieGetCount'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieGetCountWithoutVirtualOperator
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageIEnumerableInt32
     */
    public function serieGetCountWithoutVirtualOperator($company_id)
    {
        list($response) = $this->serieGetCountWithoutVirtualOperatorWithHttpInfo($company_id);
        return $response;
    }

    /**
     * Operation serieGetCountWithoutVirtualOperatorWithHttpInfo
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageIEnumerableInt32, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieGetCountWithoutVirtualOperatorWithHttpInfo($company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableInt32';
        $request = $this->serieGetCountWithoutVirtualOperatorRequest($company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageIEnumerableInt32',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieGetCountWithoutVirtualOperatorAsync
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetCountWithoutVirtualOperatorAsync($company_id)
    {
        return $this->serieGetCountWithoutVirtualOperatorAsyncWithHttpInfo($company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieGetCountWithoutVirtualOperatorAsyncWithHttpInfo
     *
     * Get a list of all series for the especified companyId
     *
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetCountWithoutVirtualOperatorAsyncWithHttpInfo($company_id)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageIEnumerableInt32';
        $request = $this->serieGetCountWithoutVirtualOperatorRequest($company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieGetCountWithoutVirtualOperator'
     *
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieGetCountWithoutVirtualOperatorRequest($company_id)
    {
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieGetCountWithoutVirtualOperator'
            );
        }

        $resourcePath = '/api/companies/{companyId}/series/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieGetDianRegisteredSeries
     *
     * Gets the Dian registered series for the selected company.
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function serieGetDianRegisteredSeries($virtual_operator, $company_id)
    {
        list($response) = $this->serieGetDianRegisteredSeriesWithHttpInfo($virtual_operator, $company_id);
        return $response;
    }

    /**
     * Operation serieGetDianRegisteredSeriesWithHttpInfo
     *
     * Gets the Dian registered series for the selected company.
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieGetDianRegisteredSeriesWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = 'object';
        $request = $this->serieGetDianRegisteredSeriesRequest($virtual_operator, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieGetDianRegisteredSeriesAsync
     *
     * Gets the Dian registered series for the selected company.
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetDianRegisteredSeriesAsync($virtual_operator, $company_id)
    {
        return $this->serieGetDianRegisteredSeriesAsyncWithHttpInfo($virtual_operator, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieGetDianRegisteredSeriesAsyncWithHttpInfo
     *
     * Gets the Dian registered series for the selected company.
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieGetDianRegisteredSeriesAsyncWithHttpInfo($virtual_operator, $company_id)
    {
        $returnType = 'object';
        $request = $this->serieGetDianRegisteredSeriesRequest($virtual_operator, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieGetDianRegisteredSeries'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieGetDianRegisteredSeriesRequest($virtual_operator, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieGetDianRegisteredSeries'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieGetDianRegisteredSeries, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieGetDianRegisteredSeries'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/dian';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieInactivate
     *
     * Disable serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function serieInactivate($virtual_operator, $company_id, $id)
    {
        list($response) = $this->serieInactivateWithHttpInfo($virtual_operator, $company_id, $id);
        return $response;
    }

    /**
     * Operation serieInactivateWithHttpInfo
     *
     * Disable serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieInactivateWithHttpInfo($virtual_operator, $company_id, $id)
    {
        $returnType = 'object';
        $request = $this->serieInactivateRequest($virtual_operator, $company_id, $id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieInactivateAsync
     *
     * Disable serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieInactivateAsync($virtual_operator, $company_id, $id)
    {
        return $this->serieInactivateAsyncWithHttpInfo($virtual_operator, $company_id, $id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieInactivateAsyncWithHttpInfo
     *
     * Disable serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieInactivateAsyncWithHttpInfo($virtual_operator, $company_id, $id)
    {
        $returnType = 'object';
        $request = $this->serieInactivateRequest($virtual_operator, $company_id, $id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieInactivate'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $company_id  (required)
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieInactivateRequest($virtual_operator, $company_id, $id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieInactivate'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieInactivate, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieInactivate'
            );
        }
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serieInactivate'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/{id}/inactivate';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation serieUpdate
     *
     * Update serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\SerieUpdateInputDto $serie_dto  (required)
     * @param  string $company_id company_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function serieUpdate($virtual_operator, $id, $serie_dto, $company_id)
    {
        list($response) = $this->serieUpdateWithHttpInfo($virtual_operator, $id, $serie_dto, $company_id);
        return $response;
    }

    /**
     * Operation serieUpdateWithHttpInfo
     *
     * Update serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\SerieUpdateInputDto $serie_dto  (required)
     * @param  string $company_id (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function serieUpdateWithHttpInfo($virtual_operator, $id, $serie_dto, $company_id)
    {
        $returnType = 'object';
        $request = $this->serieUpdateRequest($virtual_operator, $id, $serie_dto, $company_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation serieUpdateAsync
     *
     * Update serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\SerieUpdateInputDto $serie_dto  (required)
     * @param  string $company_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieUpdateAsync($virtual_operator, $id, $serie_dto, $company_id)
    {
        return $this->serieUpdateAsyncWithHttpInfo($virtual_operator, $id, $serie_dto, $company_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation serieUpdateAsyncWithHttpInfo
     *
     * Update serie
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\SerieUpdateInputDto $serie_dto  (required)
     * @param  string $company_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function serieUpdateAsyncWithHttpInfo($virtual_operator, $id, $serie_dto, $company_id)
    {
        $returnType = 'object';
        $request = $this->serieUpdateRequest($virtual_operator, $id, $serie_dto, $company_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'serieUpdate'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\SerieUpdateInputDto $serie_dto  (required)
     * @param  string $company_id (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function serieUpdateRequest($virtual_operator, $id, $serie_dto, $company_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling serieUpdate'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling SerieApi.serieUpdate, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling serieUpdate'
            );
        }
        // verify the required parameter 'serie_dto' is set
        if ($serie_dto === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $serie_dto when calling serieUpdate'
            );
        }
        // verify the required parameter 'company_id' is set
        if ($company_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $company_id when calling serieUpdate'
            );
        }

        $resourcePath = '/api/{virtualOperator}/companies/{companyId}/series/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($company_id !== null) {
            $resourcePath = str_replace(
                '{' . 'companyId' . '}',
                ObjectSerializer::toPathValue($company_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($serie_dto)) {
            $_tempBody = $serie_dto;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
