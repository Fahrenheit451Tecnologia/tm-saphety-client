<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_7_0_4
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 *
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration $config
     * @param HeaderSelector $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation userCount
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userCount($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->userCountWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation userCountWithHttpInfo
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCountWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->userCountRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCountAsync
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCountAsync($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->userCountAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userCountAsyncWithHttpInfo
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCountAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->userCountRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userCount'
     *
     * @param string $virtual_operator  (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCountRequest($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling userCount');
        }

        $resourcePath = '/api/{virtualOperator}/users/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_user_name !== null) {
            $queryParams['searchCriteriaDto.userName'] = ObjectSerializer::toQueryValue($search_criteria_dto_user_name);
        }
        // query params
        if ($search_criteria_dto_email !== null) {
            $queryParams['searchCriteriaDto.email'] = ObjectSerializer::toQueryValue($search_criteria_dto_email);
        }
        // query params
        if ($search_criteria_dto_virtual_operator !== null) {
            $queryParams['searchCriteriaDto.virtualOperator'] = ObjectSerializer::toQueryValue($search_criteria_dto_virtual_operator);
        }
        // query params
        if ($search_criteria_dto_company_id !== null) {
            $queryParams['searchCriteriaDto.companyId'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_id);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCount_0
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userCount_0($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->userCount_0WithHttpInfo($search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation userCount_0WithHttpInfo
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCount_0WithHttpInfo($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->userCount_0Request($search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCount_0Async
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCount_0Async($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->userCount_0AsyncWithHttpInfo($search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userCount_0AsyncWithHttpInfo
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCount_0AsyncWithHttpInfo($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->userCount_0Request($search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userCount_0'
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCount_0Request($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {

        $resourcePath = '/api/users/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_user_name !== null) {
            $queryParams['searchCriteriaDto.userName'] = ObjectSerializer::toQueryValue($search_criteria_dto_user_name);
        }
        // query params
        if ($search_criteria_dto_email !== null) {
            $queryParams['searchCriteriaDto.email'] = ObjectSerializer::toQueryValue($search_criteria_dto_email);
        }
        // query params
        if ($search_criteria_dto_virtual_operator !== null) {
            $queryParams['searchCriteriaDto.virtualOperator'] = ObjectSerializer::toQueryValue($search_criteria_dto_virtual_operator);
        }
        // query params
        if ($search_criteria_dto_company_id !== null) {
            $queryParams['searchCriteriaDto.companyId'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_id);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCreate
     *
     * Creates or Updates a user.
     *
     * @param \Swagger\Client\Model\UserInputDto $user  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function userCreate($user)
    {
        list($response) = $this->userCreateWithHttpInfo($user);
        return $response;
    }

    /**
     * Operation userCreateWithHttpInfo
     *
     * Creates or Updates a user.
     *
     * @param \Swagger\Client\Model\UserInputDto $user  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCreateWithHttpInfo($user)
    {
        $returnType = 'string';
        $request = $this->userCreateRequest($user);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'string', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCreateAsync
     *
     * Creates or Updates a user.
     *
     * @param \Swagger\Client\Model\UserInputDto $user  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCreateAsync($user)
    {
        return $this->userCreateAsyncWithHttpInfo($user)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userCreateAsyncWithHttpInfo
     *
     * Creates or Updates a user.
     *
     * @param \Swagger\Client\Model\UserInputDto $user  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCreateAsyncWithHttpInfo($user)
    {
        $returnType = 'string';
        $request = $this->userCreateRequest($user);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userCreate'
     *
     * @param \Swagger\Client\Model\UserInputDto $user  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCreateRequest($user)
    {
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling userCreate');
        }

        $resourcePath = '/api/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'POST',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDetails
     *
     * Get a user details.
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userDetails($id, $virtual_operator)
    {
        list($response) = $this->userDetailsWithHttpInfo($id, $virtual_operator);
        return $response;
    }

    /**
     * Operation userDetailsWithHttpInfo
     *
     * Get a user details.
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDetailsWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->userDetailsRequest($id, $virtual_operator);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDetailsAsync
     *
     * Get a user details.
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDetailsAsync($id, $virtual_operator)
    {
        return $this->userDetailsAsyncWithHttpInfo($id, $virtual_operator)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userDetailsAsyncWithHttpInfo
     *
     * Get a user details.
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDetailsAsyncWithHttpInfo($id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->userDetailsRequest($id, $virtual_operator);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userDetails'
     *
     * @param string $id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDetailsRequest($id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userDetails');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling userDetails');
        }

        $resourcePath = '/api/{virtualOperator}/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDetails_0
     *
     * Get a user details.
     *
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userDetails_0($id)
    {
        list($response) = $this->userDetails_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation userDetails_0WithHttpInfo
     *
     * Get a user details.
     *
     * @param string $id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDetails_0WithHttpInfo($id)
    {
        $returnType = 'object';
        $request = $this->userDetails_0Request($id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDetails_0Async
     *
     * Get a user details.
     *
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDetails_0Async($id)
    {
        return $this->userDetails_0AsyncWithHttpInfo($id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userDetails_0AsyncWithHttpInfo
     *
     * Get a user details.
     *
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDetails_0AsyncWithHttpInfo($id)
    {
        $returnType = 'object';
        $request = $this->userDetails_0Request($id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userDetails_0'
     *
     * @param string $id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDetails_0Request($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $id when calling userDetails_0');
        }

        $resourcePath = '/api/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace('{' . 'id' . '}', ObjectSerializer::toPathValue($id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRemove
     *
     * Removes a user from the system.
     *
     * @param string $user_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userRemove($user_id)
    {
        list($response) = $this->userRemoveWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation userRemoveWithHttpInfo
     *
     * Removes a user from the system.
     *
     * @param string $user_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRemoveWithHttpInfo($user_id)
    {
        $returnType = 'object';
        $request = $this->userRemoveRequest($user_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userRemoveAsync
     *
     * Removes a user from the system.
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRemoveAsync($user_id)
    {
        return $this->userRemoveAsyncWithHttpInfo($user_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userRemoveAsyncWithHttpInfo
     *
     * Removes a user from the system.
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRemoveAsyncWithHttpInfo($user_id)
    {
        $returnType = 'object';
        $request = $this->userRemoveRequest($user_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userRemove'
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userRemoveRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userRemove');
        }

        $resourcePath = '/api/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'userId' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'DELETE',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRoles
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userRoles($user_id, $virtual_operator)
    {
        list($response) = $this->userRolesWithHttpInfo($user_id, $virtual_operator);
        return $response;
    }

    /**
     * Operation userRolesWithHttpInfo
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRolesWithHttpInfo($user_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->userRolesRequest($user_id, $virtual_operator);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userRolesAsync
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRolesAsync($user_id, $virtual_operator)
    {
        return $this->userRolesAsyncWithHttpInfo($user_id, $virtual_operator)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userRolesAsyncWithHttpInfo
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRolesAsyncWithHttpInfo($user_id, $virtual_operator)
    {
        $returnType = 'object';
        $request = $this->userRolesRequest($user_id, $virtual_operator);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userRoles'
     *
     * @param string $user_id  (required)
     * @param string $virtual_operator  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userRolesRequest($user_id, $virtual_operator)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userRoles');
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling userRoles');
        }

        $resourcePath = '/api/{virtualOperator}/users/{userId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'userId' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRoles_0
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userRoles_0($user_id)
    {
        list($response) = $this->userRoles_0WithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation userRoles_0WithHttpInfo
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRoles_0WithHttpInfo($user_id)
    {
        $returnType = 'object';
        $request = $this->userRoles_0Request($user_id);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userRoles_0Async
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRoles_0Async($user_id)
    {
        return $this->userRoles_0AsyncWithHttpInfo($user_id)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userRoles_0AsyncWithHttpInfo
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRoles_0AsyncWithHttpInfo($user_id)
    {
        $returnType = 'object';
        $request = $this->userRoles_0Request($user_id);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userRoles_0'
     *
     * @param string $user_id  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userRoles_0Request($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userRoles_0');
        }

        $resourcePath = '/api/users/{userId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'userId' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSearch
     *
     * Search users using a search criterias  Default NumberOfRecords is 25
     *
     * @param string $virtual_operator Virtual operato alias (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userSearch($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->userSearchWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation userSearchWithHttpInfo
     *
     * Search users using a search criterias  Default NumberOfRecords is 25
     *
     * @param string $virtual_operator Virtual operato alias (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSearchWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->userSearchRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSearchAsync
     *
     * Search users using a search criterias  Default NumberOfRecords is 25
     *
     * @param string $virtual_operator Virtual operato alias (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSearchAsync($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->userSearchAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userSearchAsyncWithHttpInfo
     *
     * Search users using a search criterias  Default NumberOfRecords is 25
     *
     * @param string $virtual_operator Virtual operato alias (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSearchAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->userSearchRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userSearch'
     *
     * @param string $virtual_operator Virtual operato alias (required)
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userSearchRequest($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException('Missing the required parameter $virtual_operator when calling userSearch');
        }

        $resourcePath = '/api/{virtualOperator}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_user_name !== null) {
            $queryParams['searchCriteriaDto.userName'] = ObjectSerializer::toQueryValue($search_criteria_dto_user_name);
        }
        // query params
        if ($search_criteria_dto_email !== null) {
            $queryParams['searchCriteriaDto.email'] = ObjectSerializer::toQueryValue($search_criteria_dto_email);
        }
        // query params
        if ($search_criteria_dto_virtual_operator !== null) {
            $queryParams['searchCriteriaDto.virtualOperator'] = ObjectSerializer::toQueryValue($search_criteria_dto_virtual_operator);
        }
        // query params
        if ($search_criteria_dto_company_id !== null) {
            $queryParams['searchCriteriaDto.companyId'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_id);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace('{' . 'virtualOperator' . '}', ObjectSerializer::toPathValue($virtual_operator), $resourcePath);
        }


        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSearch_0
     *
     * Search users using a search criterias  Default NumberOfRecords is 25
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userSearch_0($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->userSearch_0WithHttpInfo($search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation userSearch_0WithHttpInfo
     *
     * Search users using a search criterias  Default NumberOfRecords is 25
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSearch_0WithHttpInfo($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->userSearch_0Request($search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSearch_0Async
     *
     * Search users using a search criterias  Default NumberOfRecords is 25
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSearch_0Async($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->userSearch_0AsyncWithHttpInfo($search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userSearch_0AsyncWithHttpInfo
     *
     * Search users using a search criterias  Default NumberOfRecords is 25
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSearch_0AsyncWithHttpInfo($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'object';
        $request = $this->userSearch_0Request($search_criteria_dto_id, $search_criteria_dto_user_name, $search_criteria_dto_email, $search_criteria_dto_virtual_operator, $search_criteria_dto_company_id, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userSearch_0'
     *
     * @param string $search_criteria_dto_id  (optional)
     * @param string $search_criteria_dto_user_name  (optional)
     * @param string $search_criteria_dto_email  (optional)
     * @param string $search_criteria_dto_virtual_operator  (optional)
     * @param string $search_criteria_dto_company_id  (optional)
     * @param int $search_criteria_dto_offset  (optional)
     * @param int $search_criteria_dto_number_of_records  (optional)
     * @param string $search_criteria_dto_sort_field  (optional)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userSearch_0Request($search_criteria_dto_id = null, $search_criteria_dto_user_name = null, $search_criteria_dto_email = null, $search_criteria_dto_virtual_operator = null, $search_criteria_dto_company_id = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {

        $resourcePath = '/api/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_user_name !== null) {
            $queryParams['searchCriteriaDto.userName'] = ObjectSerializer::toQueryValue($search_criteria_dto_user_name);
        }
        // query params
        if ($search_criteria_dto_email !== null) {
            $queryParams['searchCriteriaDto.email'] = ObjectSerializer::toQueryValue($search_criteria_dto_email);
        }
        // query params
        if ($search_criteria_dto_virtual_operator !== null) {
            $queryParams['searchCriteriaDto.virtualOperator'] = ObjectSerializer::toQueryValue($search_criteria_dto_virtual_operator);
        }
        // query params
        if ($search_criteria_dto_company_id !== null) {
            $queryParams['searchCriteriaDto.companyId'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_id);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }



        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'GET',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUpdate
     *
     * Update user info
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserUpdateDTO $user  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userUpdate($user_id, $user)
    {
        list($response) = $this->userUpdateWithHttpInfo($user_id, $user);
        return $response;
    }

    /**
     * Operation userUpdateWithHttpInfo
     *
     * Update user info
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserUpdateDTO $user  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUpdateWithHttpInfo($user_id, $user)
    {
        $returnType = 'object';
        $request = $this->userUpdateRequest($user_id, $user);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUpdateAsync
     *
     * Update user info
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserUpdateDTO $user  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateAsync($user_id, $user)
    {
        return $this->userUpdateAsyncWithHttpInfo($user_id, $user)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userUpdateAsyncWithHttpInfo
     *
     * Update user info
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserUpdateDTO $user  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateAsyncWithHttpInfo($user_id, $user)
    {
        $returnType = 'object';
        $request = $this->userUpdateRequest($user_id, $user);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userUpdate'
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserUpdateDTO $user  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userUpdateRequest($user_id, $user)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userUpdate');
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user when calling userUpdate');
        }

        $resourcePath = '/api/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'userId' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUpdateRoles
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserRolesSummaryDTO $roles  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function userUpdateRoles($user_id, $roles)
    {
        list($response) = $this->userUpdateRolesWithHttpInfo($user_id, $roles);
        return $response;
    }

    /**
     * Operation userUpdateRolesWithHttpInfo
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserRolesSummaryDTO $roles  (required)
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUpdateRolesWithHttpInfo($user_id, $roles)
    {
        $returnType = 'object';
        $request = $this->userUpdateRolesRequest($user_id, $roles);

        try {

            try {
                $response = $this->client->send($request);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    "[$statusCode] Error connecting to the API ({$request->getUri()})",
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize($e->getResponseBody(), 'object', $e->getResponseHeaders());
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUpdateRolesAsync
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserRolesSummaryDTO $roles  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateRolesAsync($user_id, $roles)
    {
        return $this->userUpdateRolesAsyncWithHttpInfo($user_id, $roles)->then(function ($response) {
            return $response[0];
        });
    }

    /**
     * Operation userUpdateRolesAsyncWithHttpInfo
     *
     * Get a user details.
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserRolesSummaryDTO $roles  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateRolesAsyncWithHttpInfo($user_id, $roles)
    {
        $returnType = 'object';
        $request = $this->userUpdateRolesRequest($user_id, $roles);

        return $this->client->sendAsync($request)->then(function ($response) use ($returnType) {
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];
        }, function ($exception) {
            $response = $exception->getResponse();
            $statusCode = $response->getStatusCode();
            throw new ApiException(
                "[$statusCode] Error connecting to the API ({$exception->getRequest()->getUri()})",
                $statusCode,
                $response->getHeaders(),
                $response->getBody()
            );
        });
    }

    /**
     * Create request for operation 'userUpdateRoles'
     *
     * @param string $user_id  (required)
     * @param \Swagger\Client\Model\UserRolesSummaryDTO $roles  (required)
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userUpdateRolesRequest($user_id, $roles)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException('Missing the required parameter $user_id when calling userUpdateRoles');
        }
        // verify the required parameter 'roles' is set
        if ($roles === null) {
            throw new \InvalidArgumentException('Missing the required parameter $roles when calling userUpdateRoles');
        }

        $resourcePath = '/api/users/{userId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace('{' . 'userId' . '}', ObjectSerializer::toPathValue($user_id), $resourcePath);
        }

        // body params
        $_tempBody = null;
        if (isset($roles)) {
            $_tempBody = $roles;
        }

        if ($multipart) {
            $headers= $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            $httpBody = $_tempBody; // $_tempBody is the method argument, if present

        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                $httpBody = new MultipartStream($multipartContents); // for HTTP post (form)

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams); // for HTTP post (form)
            }
        }


        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        $url = $this->config->getHost() . $resourcePath . ($query ? '?' . $query : '');

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        return new Request(
            'PUT',
            $url,
            $headers,
            $httpBody
        );
    }

}
