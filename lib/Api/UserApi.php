<?php
/**
 * UserApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * UserApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class UserApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation userCount
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function userCount($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        list($response) = $this->userCountWithHttpInfo($virtual_operator, $user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);
        return $response;
    }

    /**
     * Operation userCountWithHttpInfo
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCountWithHttpInfo($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->userCountRequest($virtual_operator, $user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCountAsync
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCountAsync($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        return $this->userCountAsyncWithHttpInfo($virtual_operator, $user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCountAsyncWithHttpInfo
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCountAsyncWithHttpInfo($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->userCountRequest($virtual_operator, $user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCount'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCountRequest($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling userCount'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling UserApi.userCount, must be smaller than or equal to 60.');
        }

        if ($user_search_criteria_input_dto_user_name !== null && strlen($user_search_criteria_input_dto_user_name) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_user_name" when calling UserApi.userCount, must be smaller than or equal to 100.');
        }

        if ($user_search_criteria_input_dto_email !== null && strlen($user_search_criteria_input_dto_email) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_email" when calling UserApi.userCount, must be smaller than or equal to 100.');
        }

        if ($user_search_criteria_input_dto_virtual_operator !== null && strlen($user_search_criteria_input_dto_virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_virtual_operator" when calling UserApi.userCount, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/{virtualOperator}/users/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_search_criteria_input_dto_id !== null) {
            $queryParams['userSearchCriteriaInputDto.id'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_id);
        }
        // query params
        if ($user_search_criteria_input_dto_user_name !== null) {
            $queryParams['userSearchCriteriaInputDto.userName'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_user_name);
        }
        // query params
        if ($user_search_criteria_input_dto_email !== null) {
            $queryParams['userSearchCriteriaInputDto.email'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_email);
        }
        // query params
        if ($user_search_criteria_input_dto_virtual_operator !== null) {
            $queryParams['userSearchCriteriaInputDto.virtualOperator'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_virtual_operator);
        }
        // query params
        if ($user_search_criteria_input_dto_company_id !== null) {
            $queryParams['userSearchCriteriaInputDto.companyId'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_company_id);
        }
        // query params
        if ($user_search_criteria_input_dto_offset !== null) {
            $queryParams['userSearchCriteriaInputDto.offset'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_offset);
        }
        // query params
        if ($user_search_criteria_input_dto_number_of_records !== null) {
            $queryParams['userSearchCriteriaInputDto.numberOfRecords'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_number_of_records);
        }
        // query params
        if ($user_search_criteria_input_dto_sort_field !== null) {
            $queryParams['userSearchCriteriaInputDto.sortField'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCount_0
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param  string $user_search_criteria_input_dto_id user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function userCount_0($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        list($response) = $this->userCount_0WithHttpInfo($user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);
        return $response;
    }

    /**
     * Operation userCount_0WithHttpInfo
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCount_0WithHttpInfo($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->userCount_0Request($user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCount_0Async
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCount_0Async($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        return $this->userCount_0AsyncWithHttpInfo($user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCount_0AsyncWithHttpInfo
     *
     * Counts the number of results given for a specific search criteria
     *
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCount_0AsyncWithHttpInfo($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->userCount_0Request($user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCount_0'
     *
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCount_0Request($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        if ($user_search_criteria_input_dto_user_name !== null && strlen($user_search_criteria_input_dto_user_name) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_user_name" when calling UserApi.userCount_0, must be smaller than or equal to 100.');
        }

        if ($user_search_criteria_input_dto_email !== null && strlen($user_search_criteria_input_dto_email) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_email" when calling UserApi.userCount_0, must be smaller than or equal to 100.');
        }

        if ($user_search_criteria_input_dto_virtual_operator !== null && strlen($user_search_criteria_input_dto_virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_virtual_operator" when calling UserApi.userCount_0, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/users/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_search_criteria_input_dto_id !== null) {
            $queryParams['userSearchCriteriaInputDto.id'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_id);
        }
        // query params
        if ($user_search_criteria_input_dto_user_name !== null) {
            $queryParams['userSearchCriteriaInputDto.userName'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_user_name);
        }
        // query params
        if ($user_search_criteria_input_dto_email !== null) {
            $queryParams['userSearchCriteriaInputDto.email'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_email);
        }
        // query params
        if ($user_search_criteria_input_dto_virtual_operator !== null) {
            $queryParams['userSearchCriteriaInputDto.virtualOperator'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_virtual_operator);
        }
        // query params
        if ($user_search_criteria_input_dto_company_id !== null) {
            $queryParams['userSearchCriteriaInputDto.companyId'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_company_id);
        }
        // query params
        if ($user_search_criteria_input_dto_offset !== null) {
            $queryParams['userSearchCriteriaInputDto.offset'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_offset);
        }
        // query params
        if ($user_search_criteria_input_dto_number_of_records !== null) {
            $queryParams['userSearchCriteriaInputDto.numberOfRecords'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_number_of_records);
        }
        // query params
        if ($user_search_criteria_input_dto_sort_field !== null) {
            $queryParams['userSearchCriteriaInputDto.sortField'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_sort_field);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userCreate
     *
     * Creates a user.
     *
     * @param  \Swagger\Client\Model\UserInputDto $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function userCreate($user)
    {
        list($response) = $this->userCreateWithHttpInfo($user);
        return $response;
    }

    /**
     * Operation userCreateWithHttpInfo
     *
     * Creates a user.
     *
     * @param  \Swagger\Client\Model\UserInputDto $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function userCreateWithHttpInfo($user)
    {
        $returnType = 'string';
        $request = $this->userCreateRequest($user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userCreateAsync
     *
     * Creates a user.
     *
     * @param  \Swagger\Client\Model\UserInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCreateAsync($user)
    {
        return $this->userCreateAsyncWithHttpInfo($user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userCreateAsyncWithHttpInfo
     *
     * Creates a user.
     *
     * @param  \Swagger\Client\Model\UserInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userCreateAsyncWithHttpInfo($user)
    {
        $returnType = 'string';
        $request = $this->userCreateRequest($user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userCreate'
     *
     * @param  \Swagger\Client\Model\UserInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userCreateRequest($user)
    {
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling userCreate'
            );
        }

        $resourcePath = '/api/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;



        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDetails
     *
     * Get a user details.
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserOutputDto
     */
    public function userDetails($id, $virtual_operator)
    {
        list($response) = $this->userDetailsWithHttpInfo($id, $virtual_operator);
        return $response;
    }

    /**
     * Operation userDetailsWithHttpInfo
     *
     * Get a user details.
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDetailsWithHttpInfo($id, $virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\UserOutputDto';
        $request = $this->userDetailsRequest($id, $virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDetailsAsync
     *
     * Get a user details.
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDetailsAsync($id, $virtual_operator)
    {
        return $this->userDetailsAsyncWithHttpInfo($id, $virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDetailsAsyncWithHttpInfo
     *
     * Get a user details.
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDetailsAsyncWithHttpInfo($id, $virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\UserOutputDto';
        $request = $this->userDetailsRequest($id, $virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDetails'
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDetailsRequest($id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userDetails'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling userDetails'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling UserApi.userDetails, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/{virtualOperator}/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userDetails_0
     *
     * Get a user details.
     *
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserOutputDto
     */
    public function userDetails_0($id)
    {
        list($response) = $this->userDetails_0WithHttpInfo($id);
        return $response;
    }

    /**
     * Operation userDetails_0WithHttpInfo
     *
     * Get a user details.
     *
     * @param  string $id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function userDetails_0WithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\UserOutputDto';
        $request = $this->userDetails_0Request($id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userDetails_0Async
     *
     * Get a user details.
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDetails_0Async($id)
    {
        return $this->userDetails_0AsyncWithHttpInfo($id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userDetails_0AsyncWithHttpInfo
     *
     * Get a user details.
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userDetails_0AsyncWithHttpInfo($id)
    {
        $returnType = '\Swagger\Client\Model\UserOutputDto';
        $request = $this->userDetails_0Request($id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userDetails_0'
     *
     * @param  string $id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userDetails_0Request($id)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling userDetails_0'
            );
        }

        $resourcePath = '/api/users/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRemove
     *
     * Removes a user from the system.
     *
     * @param  string $user_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function userRemove($user_id)
    {
        list($response) = $this->userRemoveWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation userRemoveWithHttpInfo
     *
     * Removes a user from the system.
     *
     * @param  string $user_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRemoveWithHttpInfo($user_id)
    {
        $returnType = 'string';
        $request = $this->userRemoveRequest($user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userRemoveAsync
     *
     * Removes a user from the system.
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRemoveAsync($user_id)
    {
        return $this->userRemoveAsyncWithHttpInfo($user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRemoveAsyncWithHttpInfo
     *
     * Removes a user from the system.
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRemoveAsyncWithHttpInfo($user_id)
    {
        $returnType = 'string';
        $request = $this->userRemoveRequest($user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRemove'
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userRemoveRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userRemove'
            );
        }

        $resourcePath = '/api/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRoles
     *
     * Get a user roles.
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserRolesOutputDto
     */
    public function userRoles($user_id, $virtual_operator)
    {
        list($response) = $this->userRolesWithHttpInfo($user_id, $virtual_operator);
        return $response;
    }

    /**
     * Operation userRolesWithHttpInfo
     *
     * Get a user roles.
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserRolesOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRolesWithHttpInfo($user_id, $virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\UserRolesOutputDto';
        $request = $this->userRolesRequest($user_id, $virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserRolesOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userRolesAsync
     *
     * Get a user roles.
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRolesAsync($user_id, $virtual_operator)
    {
        return $this->userRolesAsyncWithHttpInfo($user_id, $virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRolesAsyncWithHttpInfo
     *
     * Get a user roles.
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRolesAsyncWithHttpInfo($user_id, $virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\UserRolesOutputDto';
        $request = $this->userRolesRequest($user_id, $virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRoles'
     *
     * @param  string $user_id  (required)
     * @param  string $virtual_operator  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userRolesRequest($user_id, $virtual_operator)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userRoles'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling userRoles'
            );
        }

        $resourcePath = '/api/{virtualOperator}/users/{userId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userRoles_0
     *
     * Get a user roles.
     *
     * @param  string $user_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserRolesOutputDto
     */
    public function userRoles_0($user_id)
    {
        list($response) = $this->userRoles_0WithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation userRoles_0WithHttpInfo
     *
     * Get a user roles.
     *
     * @param  string $user_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserRolesOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function userRoles_0WithHttpInfo($user_id)
    {
        $returnType = '\Swagger\Client\Model\UserRolesOutputDto';
        $request = $this->userRoles_0Request($user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserRolesOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userRoles_0Async
     *
     * Get a user roles.
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRoles_0Async($user_id)
    {
        return $this->userRoles_0AsyncWithHttpInfo($user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userRoles_0AsyncWithHttpInfo
     *
     * Get a user roles.
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userRoles_0AsyncWithHttpInfo($user_id)
    {
        $returnType = '\Swagger\Client\Model\UserRolesOutputDto';
        $request = $this->userRoles_0Request($user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userRoles_0'
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userRoles_0Request($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userRoles_0'
            );
        }

        $resourcePath = '/api/users/{userId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSearch
     *
     * Search users using a search criterias
     *
     * @param  string $virtual_operator Virtual operato alias; MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserOutputDto[]
     */
    public function userSearch($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        list($response) = $this->userSearchWithHttpInfo($virtual_operator, $user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);
        return $response;
    }

    /**
     * Operation userSearchWithHttpInfo
     *
     * Search users using a search criterias
     *
     * @param  string $virtual_operator Virtual operato alias; MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserOutputDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userSearchWithHttpInfo($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\UserOutputDto[]';
        $request = $this->userSearchRequest($virtual_operator, $user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserOutputDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSearchAsync
     *
     * Search users using a search criterias
     *
     * @param  string $virtual_operator Virtual operato alias; MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSearchAsync($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        return $this->userSearchAsyncWithHttpInfo($virtual_operator, $user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSearchAsyncWithHttpInfo
     *
     * Search users using a search criterias
     *
     * @param  string $virtual_operator Virtual operato alias; MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSearchAsyncWithHttpInfo($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\UserOutputDto[]';
        $request = $this->userSearchRequest($virtual_operator, $user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSearch'
     *
     * @param  string $virtual_operator Virtual operato alias; MaxLength: 60 (required)
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userSearchRequest($virtual_operator, $user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling userSearch'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling UserApi.userSearch, must be smaller than or equal to 60.');
        }

        if ($user_search_criteria_input_dto_user_name !== null && strlen($user_search_criteria_input_dto_user_name) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_user_name" when calling UserApi.userSearch, must be smaller than or equal to 100.');
        }

        if ($user_search_criteria_input_dto_email !== null && strlen($user_search_criteria_input_dto_email) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_email" when calling UserApi.userSearch, must be smaller than or equal to 100.');
        }

        if ($user_search_criteria_input_dto_virtual_operator !== null && strlen($user_search_criteria_input_dto_virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_virtual_operator" when calling UserApi.userSearch, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/{virtualOperator}/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_search_criteria_input_dto_id !== null) {
            $queryParams['userSearchCriteriaInputDto.id'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_id);
        }
        // query params
        if ($user_search_criteria_input_dto_user_name !== null) {
            $queryParams['userSearchCriteriaInputDto.userName'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_user_name);
        }
        // query params
        if ($user_search_criteria_input_dto_email !== null) {
            $queryParams['userSearchCriteriaInputDto.email'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_email);
        }
        // query params
        if ($user_search_criteria_input_dto_virtual_operator !== null) {
            $queryParams['userSearchCriteriaInputDto.virtualOperator'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_virtual_operator);
        }
        // query params
        if ($user_search_criteria_input_dto_company_id !== null) {
            $queryParams['userSearchCriteriaInputDto.companyId'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_company_id);
        }
        // query params
        if ($user_search_criteria_input_dto_offset !== null) {
            $queryParams['userSearchCriteriaInputDto.offset'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_offset);
        }
        // query params
        if ($user_search_criteria_input_dto_number_of_records !== null) {
            $queryParams['userSearchCriteriaInputDto.numberOfRecords'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_number_of_records);
        }
        // query params
        if ($user_search_criteria_input_dto_sort_field !== null) {
            $queryParams['userSearchCriteriaInputDto.sortField'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSearch_0
     *
     * Search users using a search criterias
     *
     * @param  string $user_search_criteria_input_dto_id user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\UserOutputDto[]
     */
    public function userSearch_0($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        list($response) = $this->userSearch_0WithHttpInfo($user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);
        return $response;
    }

    /**
     * Operation userSearch_0WithHttpInfo
     *
     * Search users using a search criterias
     *
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\UserOutputDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function userSearch_0WithHttpInfo($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\UserOutputDto[]';
        $request = $this->userSearch_0Request($user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\UserOutputDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSearch_0Async
     *
     * Search users using a search criterias
     *
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSearch_0Async($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        return $this->userSearch_0AsyncWithHttpInfo($user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSearch_0AsyncWithHttpInfo
     *
     * Search users using a search criterias
     *
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSearch_0AsyncWithHttpInfo($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\UserOutputDto[]';
        $request = $this->userSearch_0Request($user_search_criteria_input_dto_id, $user_search_criteria_input_dto_user_name, $user_search_criteria_input_dto_email, $user_search_criteria_input_dto_virtual_operator, $user_search_criteria_input_dto_company_id, $user_search_criteria_input_dto_offset, $user_search_criteria_input_dto_number_of_records, $user_search_criteria_input_dto_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSearch_0'
     *
     * @param  string $user_search_criteria_input_dto_id (optional)
     * @param  string $user_search_criteria_input_dto_user_name MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_email MaxLength: 100 (optional)
     * @param  string $user_search_criteria_input_dto_virtual_operator MaxLength: 60 (optional)
     * @param  string $user_search_criteria_input_dto_company_id (optional)
     * @param  int $user_search_criteria_input_dto_offset (optional)
     * @param  int $user_search_criteria_input_dto_number_of_records (optional)
     * @param  string $user_search_criteria_input_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userSearch_0Request($user_search_criteria_input_dto_id = null, $user_search_criteria_input_dto_user_name = null, $user_search_criteria_input_dto_email = null, $user_search_criteria_input_dto_virtual_operator = null, $user_search_criteria_input_dto_company_id = null, $user_search_criteria_input_dto_offset = null, $user_search_criteria_input_dto_number_of_records = null, $user_search_criteria_input_dto_sort_field = null)
    {
        if ($user_search_criteria_input_dto_user_name !== null && strlen($user_search_criteria_input_dto_user_name) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_user_name" when calling UserApi.userSearch_0, must be smaller than or equal to 100.');
        }

        if ($user_search_criteria_input_dto_email !== null && strlen($user_search_criteria_input_dto_email) > 100) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_email" when calling UserApi.userSearch_0, must be smaller than or equal to 100.');
        }

        if ($user_search_criteria_input_dto_virtual_operator !== null && strlen($user_search_criteria_input_dto_virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$user_search_criteria_input_dto_virtual_operator" when calling UserApi.userSearch_0, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/users';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($user_search_criteria_input_dto_id !== null) {
            $queryParams['userSearchCriteriaInputDto.id'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_id);
        }
        // query params
        if ($user_search_criteria_input_dto_user_name !== null) {
            $queryParams['userSearchCriteriaInputDto.userName'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_user_name);
        }
        // query params
        if ($user_search_criteria_input_dto_email !== null) {
            $queryParams['userSearchCriteriaInputDto.email'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_email);
        }
        // query params
        if ($user_search_criteria_input_dto_virtual_operator !== null) {
            $queryParams['userSearchCriteriaInputDto.virtualOperator'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_virtual_operator);
        }
        // query params
        if ($user_search_criteria_input_dto_company_id !== null) {
            $queryParams['userSearchCriteriaInputDto.companyId'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_company_id);
        }
        // query params
        if ($user_search_criteria_input_dto_offset !== null) {
            $queryParams['userSearchCriteriaInputDto.offset'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_offset);
        }
        // query params
        if ($user_search_criteria_input_dto_number_of_records !== null) {
            $queryParams['userSearchCriteriaInputDto.numberOfRecords'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_number_of_records);
        }
        // query params
        if ($user_search_criteria_input_dto_sort_field !== null) {
            $queryParams['userSearchCriteriaInputDto.sortField'] = ObjectSerializer::toQueryValue($user_search_criteria_input_dto_sort_field);
        }


        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userSendUserActivationToken
     *
     * Send user activation token
     *
     * @param  string $user_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function userSendUserActivationToken($user_id)
    {
        list($response) = $this->userSendUserActivationTokenWithHttpInfo($user_id);
        return $response;
    }

    /**
     * Operation userSendUserActivationTokenWithHttpInfo
     *
     * Send user activation token
     *
     * @param  string $user_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function userSendUserActivationTokenWithHttpInfo($user_id)
    {
        $returnType = 'string';
        $request = $this->userSendUserActivationTokenRequest($user_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userSendUserActivationTokenAsync
     *
     * Send user activation token
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendUserActivationTokenAsync($user_id)
    {
        return $this->userSendUserActivationTokenAsyncWithHttpInfo($user_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userSendUserActivationTokenAsyncWithHttpInfo
     *
     * Send user activation token
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userSendUserActivationTokenAsyncWithHttpInfo($user_id)
    {
        $returnType = 'string';
        $request = $this->userSendUserActivationTokenRequest($user_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userSendUserActivationToken'
     *
     * @param  string $user_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userSendUserActivationTokenRequest($user_id)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userSendUserActivationToken'
            );
        }

        $resourcePath = '/api/users/{userId}/sendactivationtoken';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUpdate
     *
     * Update user info
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserUpdateInputDto $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function userUpdate($user_id, $user)
    {
        list($response) = $this->userUpdateWithHttpInfo($user_id, $user);
        return $response;
    }

    /**
     * Operation userUpdateWithHttpInfo
     *
     * Update user info
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserUpdateInputDto $user  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUpdateWithHttpInfo($user_id, $user)
    {
        $returnType = 'string';
        $request = $this->userUpdateRequest($user_id, $user);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUpdateAsync
     *
     * Update user info
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserUpdateInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateAsync($user_id, $user)
    {
        return $this->userUpdateAsyncWithHttpInfo($user_id, $user)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUpdateAsyncWithHttpInfo
     *
     * Update user info
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserUpdateInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateAsyncWithHttpInfo($user_id, $user)
    {
        $returnType = 'string';
        $request = $this->userUpdateRequest($user_id, $user);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUpdate'
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserUpdateInputDto $user  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userUpdateRequest($user_id, $user)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userUpdate'
            );
        }
        // verify the required parameter 'user' is set
        if ($user === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user when calling userUpdate'
            );
        }

        $resourcePath = '/api/users/{userId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($user)) {
            $_tempBody = $user;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userUpdateRoles
     *
     * update a user roles.
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserRolesUpdateInputDto $roles  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return string
     */
    public function userUpdateRoles($user_id, $roles)
    {
        list($response) = $this->userUpdateRolesWithHttpInfo($user_id, $roles);
        return $response;
    }

    /**
     * Operation userUpdateRolesWithHttpInfo
     *
     * update a user roles.
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserRolesUpdateInputDto $roles  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of string, HTTP status code, HTTP response headers (array of strings)
     */
    public function userUpdateRolesWithHttpInfo($user_id, $roles)
    {
        $returnType = 'string';
        $request = $this->userUpdateRolesRequest($user_id, $roles);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'string',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userUpdateRolesAsync
     *
     * update a user roles.
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserRolesUpdateInputDto $roles  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateRolesAsync($user_id, $roles)
    {
        return $this->userUpdateRolesAsyncWithHttpInfo($user_id, $roles)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userUpdateRolesAsyncWithHttpInfo
     *
     * update a user roles.
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserRolesUpdateInputDto $roles  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function userUpdateRolesAsyncWithHttpInfo($user_id, $roles)
    {
        $returnType = 'string';
        $request = $this->userUpdateRolesRequest($user_id, $roles);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userUpdateRoles'
     *
     * @param  string $user_id  (required)
     * @param  \Swagger\Client\Model\UserRolesUpdateInputDto $roles  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function userUpdateRolesRequest($user_id, $roles)
    {
        // verify the required parameter 'user_id' is set
        if ($user_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $user_id when calling userUpdateRoles'
            );
        }
        // verify the required parameter 'roles' is set
        if ($roles === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $roles when calling userUpdateRoles'
            );
        }

        $resourcePath = '/api/users/{userId}/roles';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($user_id !== null) {
            $resourcePath = str_replace(
                '{' . 'userId' . '}',
                ObjectSerializer::toPathValue($user_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($roles)) {
            $_tempBody = $roles;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
