<?php
/**
 * InboundDocumentApi
 * PHP version 5
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */

/**
 * eInvoice Api
 *
 * No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)
 *
 * OpenAPI spec version: 1_8_1_16
 * 
 * Generated by: https://github.com/swagger-api/swagger-codegen.git
 * Swagger Codegen version: 2.3.1
 */

/**
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen
 * Do not edit the class manually.
 */

namespace Swagger\Client\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use Swagger\Client\ApiException;
use Swagger\Client\Configuration;
use Swagger\Client\HeaderSelector;
use Swagger\Client\ObjectSerializer;

/**
 * InboundDocumentApi Class Doc Comment
 *
 * @category Class
 * @package  Swagger\Client
 * @author   Swagger Codegen team
 * @link     https://github.com/swagger-api/swagger-codegen
 */
class InboundDocumentApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation inboundDocumentAccept
     *
     * Accepts a outboundDocument
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageBoolean
     */
    public function inboundDocumentAccept($id, $virtual_operator)
    {
        list($response) = $this->inboundDocumentAcceptWithHttpInfo($id, $virtual_operator);
        return $response;
    }

    /**
     * Operation inboundDocumentAcceptWithHttpInfo
     *
     * Accepts a outboundDocument
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageBoolean, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentAcceptWithHttpInfo($id, $virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageBoolean';
        $request = $this->inboundDocumentAcceptRequest($id, $virtual_operator);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageBoolean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentAcceptAsync
     *
     * Accepts a outboundDocument
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentAcceptAsync($id, $virtual_operator)
    {
        return $this->inboundDocumentAcceptAsyncWithHttpInfo($id, $virtual_operator)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentAcceptAsyncWithHttpInfo
     *
     * Accepts a outboundDocument
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentAcceptAsyncWithHttpInfo($id, $virtual_operator)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageBoolean';
        $request = $this->inboundDocumentAcceptRequest($id, $virtual_operator);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentAccept'
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentAcceptRequest($id, $virtual_operator)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling inboundDocumentAccept'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentAccept'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentAccept, must be smaller than or equal to 60.');
        }


        $resourcePath = '/api/{virtualOperator}/inbounddocuments/{id}/accept';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentAddAttachment
     *
     * Adds a manual attachment to the inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $attachment  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentAttachmentOutputDto
     */
    public function inboundDocumentAddAttachment($virtual_operator, $id, $attachment)
    {
        list($response) = $this->inboundDocumentAddAttachmentWithHttpInfo($virtual_operator, $id, $attachment);
        return $response;
    }

    /**
     * Operation inboundDocumentAddAttachmentWithHttpInfo
     *
     * Adds a manual attachment to the inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $attachment  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentAttachmentOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentAddAttachmentWithHttpInfo($virtual_operator, $id, $attachment)
    {
        $returnType = '\Swagger\Client\Model\DocumentAttachmentOutputDto';
        $request = $this->inboundDocumentAddAttachmentRequest($virtual_operator, $id, $attachment);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentAttachmentOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentAddAttachmentAsync
     *
     * Adds a manual attachment to the inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $attachment  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentAddAttachmentAsync($virtual_operator, $id, $attachment)
    {
        return $this->inboundDocumentAddAttachmentAsyncWithHttpInfo($virtual_operator, $id, $attachment)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentAddAttachmentAsyncWithHttpInfo
     *
     * Adds a manual attachment to the inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $attachment  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentAddAttachmentAsyncWithHttpInfo($virtual_operator, $id, $attachment)
    {
        $returnType = '\Swagger\Client\Model\DocumentAttachmentOutputDto';
        $request = $this->inboundDocumentAddAttachmentRequest($virtual_operator, $id, $attachment);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentAddAttachment'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $attachment  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentAddAttachmentRequest($virtual_operator, $id, $attachment)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentAddAttachment'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentAddAttachment, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling inboundDocumentAddAttachment'
            );
        }
        // verify the required parameter 'attachment' is set
        if ($attachment === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment when calling inboundDocumentAddAttachment'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/{id}/addAttachment';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($attachment)) {
            $_tempBody = $attachment;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentAttachment
     *
     * Gets an attachment
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentAttachmentOutputDto
     */
    public function inboundDocumentAttachment($virtual_operator, $file_id)
    {
        list($response) = $this->inboundDocumentAttachmentWithHttpInfo($virtual_operator, $file_id);
        return $response;
    }

    /**
     * Operation inboundDocumentAttachmentWithHttpInfo
     *
     * Gets an attachment
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentAttachmentOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentAttachmentWithHttpInfo($virtual_operator, $file_id)
    {
        $returnType = '\Swagger\Client\Model\DocumentAttachmentOutputDto';
        $request = $this->inboundDocumentAttachmentRequest($virtual_operator, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentAttachmentOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentAttachmentAsync
     *
     * Gets an attachment
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentAttachmentAsync($virtual_operator, $file_id)
    {
        return $this->inboundDocumentAttachmentAsyncWithHttpInfo($virtual_operator, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentAttachmentAsyncWithHttpInfo
     *
     * Gets an attachment
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentAttachmentAsyncWithHttpInfo($virtual_operator, $file_id)
    {
        $returnType = '\Swagger\Client\Model\DocumentAttachmentOutputDto';
        $request = $this->inboundDocumentAttachmentRequest($virtual_operator, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentAttachment'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentAttachmentRequest($virtual_operator, $file_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentAttachment'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentAttachment, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling inboundDocumentAttachment'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/attachments/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentAttachmentContent
     *
     * Get an attachment content
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function inboundDocumentAttachmentContent($virtual_operator, $file_id, $disposition_inline = null)
    {
        list($response) = $this->inboundDocumentAttachmentContentWithHttpInfo($virtual_operator, $file_id, $disposition_inline);
        return $response;
    }

    /**
     * Operation inboundDocumentAttachmentContentWithHttpInfo
     *
     * Get an attachment content
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentAttachmentContentWithHttpInfo($virtual_operator, $file_id, $disposition_inline = null)
    {
        $returnType = 'object';
        $request = $this->inboundDocumentAttachmentContentRequest($virtual_operator, $file_id, $disposition_inline);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentAttachmentContentAsync
     *
     * Get an attachment content
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentAttachmentContentAsync($virtual_operator, $file_id, $disposition_inline = null)
    {
        return $this->inboundDocumentAttachmentContentAsyncWithHttpInfo($virtual_operator, $file_id, $disposition_inline)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentAttachmentContentAsyncWithHttpInfo
     *
     * Get an attachment content
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentAttachmentContentAsyncWithHttpInfo($virtual_operator, $file_id, $disposition_inline = null)
    {
        $returnType = 'object';
        $request = $this->inboundDocumentAttachmentContentRequest($virtual_operator, $file_id, $disposition_inline);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentAttachmentContent'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentAttachmentContentRequest($virtual_operator, $file_id, $disposition_inline = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentAttachmentContent'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentAttachmentContent, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling inboundDocumentAttachmentContent'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/attachments/{fileId}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($disposition_inline !== null) {
            $queryParams['dispositionInline'] = ObjectSerializer::toQueryValue($disposition_inline);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentCount
     *
     * Counts documents using search criteria
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field search_criteria_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return int
     */
    public function inboundDocumentCount($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->inboundDocumentCountWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_pdf, $search_criteria_dto_include_xml, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation inboundDocumentCountWithHttpInfo
     *
     * Counts documents using search criteria
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of int, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentCountWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->inboundDocumentCountRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_pdf, $search_criteria_dto_include_xml, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'int',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentCountAsync
     *
     * Counts documents using search criteria
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentCountAsync($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->inboundDocumentCountAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_pdf, $search_criteria_dto_include_xml, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentCountAsyncWithHttpInfo
     *
     * Counts documents using search criteria
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentCountAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = 'int';
        $request = $this->inboundDocumentCountRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_pdf, $search_criteria_dto_include_xml, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentCount'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentCountRequest($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentCount'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentCount, must be smaller than or equal to 60.');
        }

        if ($search_criteria_dto_document_number !== null && strlen($search_criteria_dto_document_number) > 20) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_dto_document_number" when calling InboundDocumentApi.inboundDocumentCount, must be smaller than or equal to 20.');
        }

        if ($search_criteria_dto_currency !== null && strlen($search_criteria_dto_currency) > 50) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_dto_currency" when calling InboundDocumentApi.inboundDocumentCount, must be smaller than or equal to 50.');
        }


        $resourcePath = '/api/{virtualOperator}/inbounddocuments/count';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_document_number !== null) {
            $queryParams['searchCriteriaDto.documentNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_number);
        }
        // query params
        if ($search_criteria_dto_currency !== null) {
            $queryParams['searchCriteriaDto.currency'] = ObjectSerializer::toQueryValue($search_criteria_dto_currency);
        }
        // query params
        if (is_array($search_criteria_dto_company_ids)) {
            $search_criteria_dto_company_ids = ObjectSerializer::serializeCollection($search_criteria_dto_company_ids, 'multi', true);
        }
        if ($search_criteria_dto_company_ids !== null) {
            $queryParams['searchCriteriaDto.companyIds'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_ids);
        }
        // query params
        if (is_array($search_criteria_dto_issuers)) {
            $search_criteria_dto_issuers = ObjectSerializer::serializeCollection($search_criteria_dto_issuers, 'multi', true);
        }
        if ($search_criteria_dto_issuers !== null) {
            $queryParams['searchCriteriaDto.issuers'] = ObjectSerializer::toQueryValue($search_criteria_dto_issuers);
        }
        // query params
        if (is_array($search_criteria_dto_customers)) {
            $search_criteria_dto_customers = ObjectSerializer::serializeCollection($search_criteria_dto_customers, 'multi', true);
        }
        if ($search_criteria_dto_customers !== null) {
            $queryParams['searchCriteriaDto.customers'] = ObjectSerializer::toQueryValue($search_criteria_dto_customers);
        }
        // query params
        if ($search_criteria_dto_include_pdf !== null) {
            $queryParams['searchCriteriaDto.includePdf'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_pdf);
        }
        // query params
        if ($search_criteria_dto_include_xml !== null) {
            $queryParams['searchCriteriaDto.includeXml'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_xml);
        }
        // query params
        if ($search_criteria_dto_include_attachments !== null) {
            $queryParams['searchCriteriaDto.includeAttachments'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_attachments);
        }
        // query params
        if (is_array($search_criteria_dto_document_types)) {
            $search_criteria_dto_document_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_types, 'multi', true);
        }
        if ($search_criteria_dto_document_types !== null) {
            $queryParams['searchCriteriaDto.documentTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_types);
        }
        // query params
        if (is_array($search_criteria_dto_document_sub_types)) {
            $search_criteria_dto_document_sub_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_sub_types, 'multi', true);
        }
        if ($search_criteria_dto_document_sub_types !== null) {
            $queryParams['searchCriteriaDto.documentSubTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_sub_types);
        }
        // query params
        if (is_array($search_criteria_dto_business_status)) {
            $search_criteria_dto_business_status = ObjectSerializer::serializeCollection($search_criteria_dto_business_status, 'multi', true);
        }
        if ($search_criteria_dto_business_status !== null) {
            $queryParams['searchCriteriaDto.businessStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_business_status);
        }
        // query params
        if (is_array($search_criteria_dto_communication_status)) {
            $search_criteria_dto_communication_status = ObjectSerializer::serializeCollection($search_criteria_dto_communication_status, 'multi', true);
        }
        if ($search_criteria_dto_communication_status !== null) {
            $queryParams['searchCriteriaDto.communicationStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_communication_status);
        }
        // query params
        if ($search_criteria_dto_creation_date_start !== null) {
            $queryParams['searchCriteriaDto.creationDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_start);
        }
        // query params
        if ($search_criteria_dto_creation_date_end !== null) {
            $queryParams['searchCriteriaDto.creationDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_end);
        }
        // query params
        if ($search_criteria_dto_document_date_start !== null) {
            $queryParams['searchCriteriaDto.documentDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_start);
        }
        // query params
        if ($search_criteria_dto_document_date_end !== null) {
            $queryParams['searchCriteriaDto.documentDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_end);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentCreateDocument
     *
     * Upload a received document.
     *
     * @param  string $virtual_operator The virtual operator where the receiving company lives.; MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $xml_document The XML/UBL document to upload. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageGuid
     */
    public function inboundDocumentCreateDocument($virtual_operator, $xml_document)
    {
        list($response) = $this->inboundDocumentCreateDocumentWithHttpInfo($virtual_operator, $xml_document);
        return $response;
    }

    /**
     * Operation inboundDocumentCreateDocumentWithHttpInfo
     *
     * Upload a received document.
     *
     * @param  string $virtual_operator The virtual operator where the receiving company lives.; MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $xml_document The XML/UBL document to upload. (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageGuid, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentCreateDocumentWithHttpInfo($virtual_operator, $xml_document)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageGuid';
        $request = $this->inboundDocumentCreateDocumentRequest($virtual_operator, $xml_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageGuid',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentCreateDocumentAsync
     *
     * Upload a received document.
     *
     * @param  string $virtual_operator The virtual operator where the receiving company lives.; MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $xml_document The XML/UBL document to upload. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentCreateDocumentAsync($virtual_operator, $xml_document)
    {
        return $this->inboundDocumentCreateDocumentAsyncWithHttpInfo($virtual_operator, $xml_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentCreateDocumentAsyncWithHttpInfo
     *
     * Upload a received document.
     *
     * @param  string $virtual_operator The virtual operator where the receiving company lives.; MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $xml_document The XML/UBL document to upload. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentCreateDocumentAsyncWithHttpInfo($virtual_operator, $xml_document)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageGuid';
        $request = $this->inboundDocumentCreateDocumentRequest($virtual_operator, $xml_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentCreateDocument'
     *
     * @param  string $virtual_operator The virtual operator where the receiving company lives.; MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $xml_document The XML/UBL document to upload. (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentCreateDocumentRequest($virtual_operator, $xml_document)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentCreateDocument'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentCreateDocument, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'xml_document' is set
        if ($xml_document === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $xml_document when calling inboundDocumentCreateDocument'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/upload';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($xml_document)) {
            $_tempBody = $xml_document;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentDocumentFile
     *
     * Gets a file
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentFileOutputDto
     */
    public function inboundDocumentDocumentFile($virtual_operator, $file_id)
    {
        list($response) = $this->inboundDocumentDocumentFileWithHttpInfo($virtual_operator, $file_id);
        return $response;
    }

    /**
     * Operation inboundDocumentDocumentFileWithHttpInfo
     *
     * Gets a file
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentFileOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentDocumentFileWithHttpInfo($virtual_operator, $file_id)
    {
        $returnType = '\Swagger\Client\Model\DocumentFileOutputDto';
        $request = $this->inboundDocumentDocumentFileRequest($virtual_operator, $file_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentDocumentFileAsync
     *
     * Gets a file
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentDocumentFileAsync($virtual_operator, $file_id)
    {
        return $this->inboundDocumentDocumentFileAsyncWithHttpInfo($virtual_operator, $file_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentDocumentFileAsyncWithHttpInfo
     *
     * Gets a file
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentDocumentFileAsyncWithHttpInfo($virtual_operator, $file_id)
    {
        $returnType = '\Swagger\Client\Model\DocumentFileOutputDto';
        $request = $this->inboundDocumentDocumentFileRequest($virtual_operator, $file_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentDocumentFile'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentDocumentFileRequest($virtual_operator, $file_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentDocumentFile'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentDocumentFile, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling inboundDocumentDocumentFile'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/files/{fileId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentFileContent
     *
     * Get a file content
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return object
     */
    public function inboundDocumentFileContent($virtual_operator, $file_id, $disposition_inline = null)
    {
        list($response) = $this->inboundDocumentFileContentWithHttpInfo($virtual_operator, $file_id, $disposition_inline);
        return $response;
    }

    /**
     * Operation inboundDocumentFileContentWithHttpInfo
     *
     * Get a file content
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of object, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentFileContentWithHttpInfo($virtual_operator, $file_id, $disposition_inline = null)
    {
        $returnType = 'object';
        $request = $this->inboundDocumentFileContentRequest($virtual_operator, $file_id, $disposition_inline);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'object',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentFileContentAsync
     *
     * Get a file content
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentFileContentAsync($virtual_operator, $file_id, $disposition_inline = null)
    {
        return $this->inboundDocumentFileContentAsyncWithHttpInfo($virtual_operator, $file_id, $disposition_inline)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentFileContentAsyncWithHttpInfo
     *
     * Get a file content
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentFileContentAsyncWithHttpInfo($virtual_operator, $file_id, $disposition_inline = null)
    {
        $returnType = 'object';
        $request = $this->inboundDocumentFileContentRequest($virtual_operator, $file_id, $disposition_inline);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentFileContent'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $file_id  (required)
     * @param  bool $disposition_inline Default&#x3D;false; Is true, the response content-disposition will be inline. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentFileContentRequest($virtual_operator, $file_id, $disposition_inline = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentFileContent'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentFileContent, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'file_id' is set
        if ($file_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $file_id when calling inboundDocumentFileContent'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/files/{fileId}/content';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($disposition_inline !== null) {
            $queryParams['dispositionInline'] = ObjectSerializer::toQueryValue($disposition_inline);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($file_id !== null) {
            $resourcePath = str_replace(
                '{' . 'fileId' . '}',
                ObjectSerializer::toPathValue($file_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentGet
     *
     * Get the detail of a specific document based on specific Id
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id The unique identifier of document (required)
     * @param  bool $include_pdf True if result should return Pdf content (optional)
     * @param  bool $include_xml True if result should return XML content (optional)
     * @param  bool $include_attachments True if result should return Document Attachments content (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InboundDocumentOutputDto
     */
    public function inboundDocumentGet($virtual_operator, $id, $include_pdf = null, $include_xml = null, $include_attachments = null)
    {
        list($response) = $this->inboundDocumentGetWithHttpInfo($virtual_operator, $id, $include_pdf, $include_xml, $include_attachments);
        return $response;
    }

    /**
     * Operation inboundDocumentGetWithHttpInfo
     *
     * Get the detail of a specific document based on specific Id
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id The unique identifier of document (required)
     * @param  bool $include_pdf True if result should return Pdf content (optional)
     * @param  bool $include_xml True if result should return XML content (optional)
     * @param  bool $include_attachments True if result should return Document Attachments content (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InboundDocumentOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentGetWithHttpInfo($virtual_operator, $id, $include_pdf = null, $include_xml = null, $include_attachments = null)
    {
        $returnType = '\Swagger\Client\Model\InboundDocumentOutputDto';
        $request = $this->inboundDocumentGetRequest($virtual_operator, $id, $include_pdf, $include_xml, $include_attachments);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InboundDocumentOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentGetAsync
     *
     * Get the detail of a specific document based on specific Id
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id The unique identifier of document (required)
     * @param  bool $include_pdf True if result should return Pdf content (optional)
     * @param  bool $include_xml True if result should return XML content (optional)
     * @param  bool $include_attachments True if result should return Document Attachments content (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentGetAsync($virtual_operator, $id, $include_pdf = null, $include_xml = null, $include_attachments = null)
    {
        return $this->inboundDocumentGetAsyncWithHttpInfo($virtual_operator, $id, $include_pdf, $include_xml, $include_attachments)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentGetAsyncWithHttpInfo
     *
     * Get the detail of a specific document based on specific Id
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id The unique identifier of document (required)
     * @param  bool $include_pdf True if result should return Pdf content (optional)
     * @param  bool $include_xml True if result should return XML content (optional)
     * @param  bool $include_attachments True if result should return Document Attachments content (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentGetAsyncWithHttpInfo($virtual_operator, $id, $include_pdf = null, $include_xml = null, $include_attachments = null)
    {
        $returnType = '\Swagger\Client\Model\InboundDocumentOutputDto';
        $request = $this->inboundDocumentGetRequest($virtual_operator, $id, $include_pdf, $include_xml, $include_attachments);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentGet'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id The unique identifier of document (required)
     * @param  bool $include_pdf True if result should return Pdf content (optional)
     * @param  bool $include_xml True if result should return XML content (optional)
     * @param  bool $include_attachments True if result should return Document Attachments content (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentGetRequest($virtual_operator, $id, $include_pdf = null, $include_xml = null, $include_attachments = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentGet'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentGet, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling inboundDocumentGet'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/{id}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($include_pdf !== null) {
            $queryParams['includePdf'] = ObjectSerializer::toQueryValue($include_pdf);
        }
        // query params
        if ($include_xml !== null) {
            $queryParams['includeXml'] = ObjectSerializer::toQueryValue($include_xml);
        }
        // query params
        if ($include_attachments !== null) {
            $queryParams['includeAttachments'] = ObjectSerializer::toQueryValue($include_attachments);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentReject
     *
     * Rejects a outboundDocument
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\ResultMessageBoolean
     */
    public function inboundDocumentReject($id, $virtual_operator, $data)
    {
        list($response) = $this->inboundDocumentRejectWithHttpInfo($id, $virtual_operator, $data);
        return $response;
    }

    /**
     * Operation inboundDocumentRejectWithHttpInfo
     *
     * Rejects a outboundDocument
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\ResultMessageBoolean, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentRejectWithHttpInfo($id, $virtual_operator, $data)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageBoolean';
        $request = $this->inboundDocumentRejectRequest($id, $virtual_operator, $data);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\ResultMessageBoolean',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentRejectAsync
     *
     * Rejects a outboundDocument
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentRejectAsync($id, $virtual_operator, $data)
    {
        return $this->inboundDocumentRejectAsyncWithHttpInfo($id, $virtual_operator, $data)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentRejectAsyncWithHttpInfo
     *
     * Rejects a outboundDocument
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentRejectAsyncWithHttpInfo($id, $virtual_operator, $data)
    {
        $returnType = '\Swagger\Client\Model\ResultMessageBoolean';
        $request = $this->inboundDocumentRejectRequest($id, $virtual_operator, $data);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentReject'
     *
     * @param  string $id  (required)
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  \Swagger\Client\Model\BusinessStatusDTO $data  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentRejectRequest($id, $virtual_operator, $data)
    {
        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling inboundDocumentReject'
            );
        }
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentReject'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentReject, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'data' is set
        if ($data === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $data when calling inboundDocumentReject'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/{id}/reject';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($data)) {
            $_tempBody = $data;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentRemoveAttachment
     *
     * Deletes a manual attachment of an inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return bool
     */
    public function inboundDocumentRemoveAttachment($virtual_operator, $id, $attachment_id)
    {
        list($response) = $this->inboundDocumentRemoveAttachmentWithHttpInfo($virtual_operator, $id, $attachment_id);
        return $response;
    }

    /**
     * Operation inboundDocumentRemoveAttachmentWithHttpInfo
     *
     * Deletes a manual attachment of an inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of bool, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentRemoveAttachmentWithHttpInfo($virtual_operator, $id, $attachment_id)
    {
        $returnType = 'bool';
        $request = $this->inboundDocumentRemoveAttachmentRequest($virtual_operator, $id, $attachment_id);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'bool',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentRemoveAttachmentAsync
     *
     * Deletes a manual attachment of an inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentRemoveAttachmentAsync($virtual_operator, $id, $attachment_id)
    {
        return $this->inboundDocumentRemoveAttachmentAsyncWithHttpInfo($virtual_operator, $id, $attachment_id)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentRemoveAttachmentAsyncWithHttpInfo
     *
     * Deletes a manual attachment of an inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentRemoveAttachmentAsyncWithHttpInfo($virtual_operator, $id, $attachment_id)
    {
        $returnType = 'bool';
        $request = $this->inboundDocumentRemoveAttachmentRequest($virtual_operator, $id, $attachment_id);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentRemoveAttachment'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  string $attachment_id  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentRemoveAttachmentRequest($virtual_operator, $id, $attachment_id)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentRemoveAttachment'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentRemoveAttachment, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling inboundDocumentRemoveAttachment'
            );
        }
        // verify the required parameter 'attachment_id' is set
        if ($attachment_id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $attachment_id when calling inboundDocumentRemoveAttachment'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/{id}/deleteAttachment/{attachmentId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }
        // path params
        if ($attachment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'attachmentId' . '}',
                ObjectSerializer::toPathValue($attachment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'DELETE',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentSearch
     *
     * Search documents using search criteria  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field search_criteria_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\InboundDocumentOutputDto[]
     */
    public function inboundDocumentSearch($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        list($response) = $this->inboundDocumentSearchWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_pdf, $search_criteria_dto_include_xml, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);
        return $response;
    }

    /**
     * Operation inboundDocumentSearchWithHttpInfo
     *
     * Search documents using search criteria  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\InboundDocumentOutputDto[], HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentSearchWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\InboundDocumentOutputDto[]';
        $request = $this->inboundDocumentSearchRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_pdf, $search_criteria_dto_include_xml, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\InboundDocumentOutputDto[]',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentSearchAsync
     *
     * Search documents using search criteria  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentSearchAsync($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        return $this->inboundDocumentSearchAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_pdf, $search_criteria_dto_include_xml, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentSearchAsyncWithHttpInfo
     *
     * Search documents using search criteria  Default NumberOfRecords=25
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentSearchAsyncWithHttpInfo($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        $returnType = '\Swagger\Client\Model\InboundDocumentOutputDto[]';
        $request = $this->inboundDocumentSearchRequest($virtual_operator, $search_criteria_dto_id, $search_criteria_dto_document_number, $search_criteria_dto_currency, $search_criteria_dto_company_ids, $search_criteria_dto_issuers, $search_criteria_dto_customers, $search_criteria_dto_include_pdf, $search_criteria_dto_include_xml, $search_criteria_dto_include_attachments, $search_criteria_dto_document_types, $search_criteria_dto_document_sub_types, $search_criteria_dto_business_status, $search_criteria_dto_communication_status, $search_criteria_dto_creation_date_start, $search_criteria_dto_creation_date_end, $search_criteria_dto_document_date_start, $search_criteria_dto_document_date_end, $search_criteria_dto_offset, $search_criteria_dto_number_of_records, $search_criteria_dto_sort_field);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentSearch'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $search_criteria_dto_id (optional)
     * @param  string $search_criteria_dto_document_number MaxLength: 20 (optional)
     * @param  string $search_criteria_dto_currency MaxLength: 50 (optional)
     * @param  string[] $search_criteria_dto_company_ids (optional)
     * @param  string[] $search_criteria_dto_issuers (optional)
     * @param  string[] $search_criteria_dto_customers (optional)
     * @param  bool $search_criteria_dto_include_pdf (optional)
     * @param  bool $search_criteria_dto_include_xml (optional)
     * @param  bool $search_criteria_dto_include_attachments (optional)
     * @param  string[] $search_criteria_dto_document_types (optional)
     * @param  string[] $search_criteria_dto_document_sub_types (optional)
     * @param  string[] $search_criteria_dto_business_status (optional)
     * @param  string[] $search_criteria_dto_communication_status (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_start (optional)
     * @param  \DateTime $search_criteria_dto_creation_date_end (optional)
     * @param  \DateTime $search_criteria_dto_document_date_start (optional)
     * @param  \DateTime $search_criteria_dto_document_date_end (optional)
     * @param  int $search_criteria_dto_offset (optional)
     * @param  int $search_criteria_dto_number_of_records (optional)
     * @param  string $search_criteria_dto_sort_field (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentSearchRequest($virtual_operator, $search_criteria_dto_id = null, $search_criteria_dto_document_number = null, $search_criteria_dto_currency = null, $search_criteria_dto_company_ids = null, $search_criteria_dto_issuers = null, $search_criteria_dto_customers = null, $search_criteria_dto_include_pdf = null, $search_criteria_dto_include_xml = null, $search_criteria_dto_include_attachments = null, $search_criteria_dto_document_types = null, $search_criteria_dto_document_sub_types = null, $search_criteria_dto_business_status = null, $search_criteria_dto_communication_status = null, $search_criteria_dto_creation_date_start = null, $search_criteria_dto_creation_date_end = null, $search_criteria_dto_document_date_start = null, $search_criteria_dto_document_date_end = null, $search_criteria_dto_offset = null, $search_criteria_dto_number_of_records = null, $search_criteria_dto_sort_field = null)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentSearch'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentSearch, must be smaller than or equal to 60.');
        }

        if ($search_criteria_dto_document_number !== null && strlen($search_criteria_dto_document_number) > 20) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_dto_document_number" when calling InboundDocumentApi.inboundDocumentSearch, must be smaller than or equal to 20.');
        }

        if ($search_criteria_dto_currency !== null && strlen($search_criteria_dto_currency) > 50) {
            throw new \InvalidArgumentException('invalid length for "$search_criteria_dto_currency" when calling InboundDocumentApi.inboundDocumentSearch, must be smaller than or equal to 50.');
        }


        $resourcePath = '/api/{virtualOperator}/inbounddocuments';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($search_criteria_dto_id !== null) {
            $queryParams['searchCriteriaDto.id'] = ObjectSerializer::toQueryValue($search_criteria_dto_id);
        }
        // query params
        if ($search_criteria_dto_document_number !== null) {
            $queryParams['searchCriteriaDto.documentNumber'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_number);
        }
        // query params
        if ($search_criteria_dto_currency !== null) {
            $queryParams['searchCriteriaDto.currency'] = ObjectSerializer::toQueryValue($search_criteria_dto_currency);
        }
        // query params
        if (is_array($search_criteria_dto_company_ids)) {
            $search_criteria_dto_company_ids = ObjectSerializer::serializeCollection($search_criteria_dto_company_ids, 'multi', true);
        }
        if ($search_criteria_dto_company_ids !== null) {
            $queryParams['searchCriteriaDto.companyIds'] = ObjectSerializer::toQueryValue($search_criteria_dto_company_ids);
        }
        // query params
        if (is_array($search_criteria_dto_issuers)) {
            $search_criteria_dto_issuers = ObjectSerializer::serializeCollection($search_criteria_dto_issuers, 'multi', true);
        }
        if ($search_criteria_dto_issuers !== null) {
            $queryParams['searchCriteriaDto.issuers'] = ObjectSerializer::toQueryValue($search_criteria_dto_issuers);
        }
        // query params
        if (is_array($search_criteria_dto_customers)) {
            $search_criteria_dto_customers = ObjectSerializer::serializeCollection($search_criteria_dto_customers, 'multi', true);
        }
        if ($search_criteria_dto_customers !== null) {
            $queryParams['searchCriteriaDto.customers'] = ObjectSerializer::toQueryValue($search_criteria_dto_customers);
        }
        // query params
        if ($search_criteria_dto_include_pdf !== null) {
            $queryParams['searchCriteriaDto.includePdf'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_pdf);
        }
        // query params
        if ($search_criteria_dto_include_xml !== null) {
            $queryParams['searchCriteriaDto.includeXml'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_xml);
        }
        // query params
        if ($search_criteria_dto_include_attachments !== null) {
            $queryParams['searchCriteriaDto.includeAttachments'] = ObjectSerializer::toQueryValue($search_criteria_dto_include_attachments);
        }
        // query params
        if (is_array($search_criteria_dto_document_types)) {
            $search_criteria_dto_document_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_types, 'multi', true);
        }
        if ($search_criteria_dto_document_types !== null) {
            $queryParams['searchCriteriaDto.documentTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_types);
        }
        // query params
        if (is_array($search_criteria_dto_document_sub_types)) {
            $search_criteria_dto_document_sub_types = ObjectSerializer::serializeCollection($search_criteria_dto_document_sub_types, 'multi', true);
        }
        if ($search_criteria_dto_document_sub_types !== null) {
            $queryParams['searchCriteriaDto.documentSubTypes'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_sub_types);
        }
        // query params
        if (is_array($search_criteria_dto_business_status)) {
            $search_criteria_dto_business_status = ObjectSerializer::serializeCollection($search_criteria_dto_business_status, 'multi', true);
        }
        if ($search_criteria_dto_business_status !== null) {
            $queryParams['searchCriteriaDto.businessStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_business_status);
        }
        // query params
        if (is_array($search_criteria_dto_communication_status)) {
            $search_criteria_dto_communication_status = ObjectSerializer::serializeCollection($search_criteria_dto_communication_status, 'multi', true);
        }
        if ($search_criteria_dto_communication_status !== null) {
            $queryParams['searchCriteriaDto.communicationStatus'] = ObjectSerializer::toQueryValue($search_criteria_dto_communication_status);
        }
        // query params
        if ($search_criteria_dto_creation_date_start !== null) {
            $queryParams['searchCriteriaDto.creationDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_start);
        }
        // query params
        if ($search_criteria_dto_creation_date_end !== null) {
            $queryParams['searchCriteriaDto.creationDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_creation_date_end);
        }
        // query params
        if ($search_criteria_dto_document_date_start !== null) {
            $queryParams['searchCriteriaDto.documentDateStart'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_start);
        }
        // query params
        if ($search_criteria_dto_document_date_end !== null) {
            $queryParams['searchCriteriaDto.documentDateEnd'] = ObjectSerializer::toQueryValue($search_criteria_dto_document_date_end);
        }
        // query params
        if ($search_criteria_dto_offset !== null) {
            $queryParams['searchCriteriaDto.offset'] = ObjectSerializer::toQueryValue($search_criteria_dto_offset);
        }
        // query params
        if ($search_criteria_dto_number_of_records !== null) {
            $queryParams['searchCriteriaDto.numberOfRecords'] = ObjectSerializer::toQueryValue($search_criteria_dto_number_of_records);
        }
        // query params
        if ($search_criteria_dto_sort_field !== null) {
            $queryParams['searchCriteriaDto.sortField'] = ObjectSerializer::toQueryValue($search_criteria_dto_sort_field);
        }

        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation inboundDocumentUploadFilePdf
     *
     * Uploads the Pdf file to the inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $pdf_document  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \Swagger\Client\Model\DocumentFileOutputDto
     */
    public function inboundDocumentUploadFilePdf($virtual_operator, $id, $pdf_document)
    {
        list($response) = $this->inboundDocumentUploadFilePdfWithHttpInfo($virtual_operator, $id, $pdf_document);
        return $response;
    }

    /**
     * Operation inboundDocumentUploadFilePdfWithHttpInfo
     *
     * Uploads the Pdf file to the inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $pdf_document  (required)
     *
     * @throws \Swagger\Client\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \Swagger\Client\Model\DocumentFileOutputDto, HTTP status code, HTTP response headers (array of strings)
     */
    public function inboundDocumentUploadFilePdfWithHttpInfo($virtual_operator, $id, $pdf_document)
    {
        $returnType = '\Swagger\Client\Model\DocumentFileOutputDto';
        $request = $this->inboundDocumentUploadFilePdfRequest($virtual_operator, $id, $pdf_document);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? $e->getResponse()->getBody()->getContents() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = $responseBody->getContents();
                if ($returnType !== 'string') {
                    $content = json_decode($content);
                }
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\Swagger\Client\Model\DocumentFileOutputDto',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation inboundDocumentUploadFilePdfAsync
     *
     * Uploads the Pdf file to the inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $pdf_document  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentUploadFilePdfAsync($virtual_operator, $id, $pdf_document)
    {
        return $this->inboundDocumentUploadFilePdfAsyncWithHttpInfo($virtual_operator, $id, $pdf_document)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation inboundDocumentUploadFilePdfAsyncWithHttpInfo
     *
     * Uploads the Pdf file to the inbound document
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $pdf_document  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function inboundDocumentUploadFilePdfAsyncWithHttpInfo($virtual_operator, $id, $pdf_document)
    {
        $returnType = '\Swagger\Client\Model\DocumentFileOutputDto';
        $request = $this->inboundDocumentUploadFilePdfRequest($virtual_operator, $id, $pdf_document);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = $responseBody->getContents();
                        if ($returnType !== 'string') {
                            $content = json_decode($content);
                        }
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'inboundDocumentUploadFilePdf'
     *
     * @param  string $virtual_operator MaxLength: 60 (required)
     * @param  string $id  (required)
     * @param  \Swagger\Client\Model\FileUploadInputDto $pdf_document  (required)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function inboundDocumentUploadFilePdfRequest($virtual_operator, $id, $pdf_document)
    {
        // verify the required parameter 'virtual_operator' is set
        if ($virtual_operator === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $virtual_operator when calling inboundDocumentUploadFilePdf'
            );
        }
        if (strlen($virtual_operator) > 60) {
            throw new \InvalidArgumentException('invalid length for "$virtual_operator" when calling InboundDocumentApi.inboundDocumentUploadFilePdf, must be smaller than or equal to 60.');
        }

        // verify the required parameter 'id' is set
        if ($id === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $id when calling inboundDocumentUploadFilePdf'
            );
        }
        // verify the required parameter 'pdf_document' is set
        if ($pdf_document === null) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $pdf_document when calling inboundDocumentUploadFilePdf'
            );
        }

        $resourcePath = '/api/{virtualOperator}/inbounddocuments/{id}/uploadFilePdf';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // path params
        if ($virtual_operator !== null) {
            $resourcePath = str_replace(
                '{' . 'virtualOperator' . '}',
                ObjectSerializer::toPathValue($virtual_operator),
                $resourcePath
            );
        }
        // path params
        if ($id !== null) {
            $resourcePath = str_replace(
                '{' . 'id' . '}',
                ObjectSerializer::toPathValue($id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($pdf_document)) {
            $_tempBody = $pdf_document;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'text/json', 'application/xml', 'text/xml']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'text/json', 'application/xml', 'text/xml'],
                ['application/json', 'text/json', 'application/xml', 'text/xml', 'application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            $httpBody = $_tempBody;
            // \stdClass has no __toString(), so we should encode it manually
            if ($httpBody instanceof \stdClass && $headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($httpBody);
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
